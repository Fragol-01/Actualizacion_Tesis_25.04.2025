
AVANCE_Tesis040425.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000adc  08007c90  08007c90  00017c90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800876c  0800876c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800876c  0800876c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800876c  0800876c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800876c  0800876c  0001876c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008770  08008770  00018770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          000020c0  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200022a8  200022a8  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c647  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028a4  00000000  00000000  0002c85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  0002f108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009f0  00000000  00000000  0002fc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023195  00000000  00000000  00030648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000120d0  00000000  00000000  000537dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be7e3  00000000  00000000  000658ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00124090  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003af0  00000000  00000000  001240e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c78 	.word	0x08007c78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08007c78 	.word	0x08007c78

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	db0c      	blt.n	8000bd4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	f003 021f 	and.w	r2, r3, #31
 8000bc0:	4907      	ldr	r1, [pc, #28]	; (8000be0 <__NVIC_ClearPendingIRQ+0x38>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	095b      	lsrs	r3, r3, #5
 8000bc8:	2001      	movs	r0, #1
 8000bca:	fa00 f202 	lsl.w	r2, r0, r2
 8000bce:	3360      	adds	r3, #96	; 0x60
 8000bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <audio_recorder_init>:
// Contadores de diagnóstico
volatile uint32_t halfBuffersLost = 0;
volatile uint32_t fullBuffersLost = 0;

// Inicializa el grabador de audio
bool audio_recorder_init(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000bea:	af00      	add	r7, sp, #0
    // Configurar el ADC y el DMA para la captura
    tim_TIM6_MIC_config(); // Configura el timer para muestreo a 48kHz
 8000bec:	f004 f8d4 	bl	8004d98 <tim_TIM6_MIC_config>
    opamp_config();        // Configura el OPAMP para el micrófono PA0->A0
 8000bf0:	f003 ffd6 	bl	8004ba0 <opamp_config>
    adc_MIC_config();      // Configura el ADC
 8000bf4:	f003 fcb0 	bl	8004558 <adc_MIC_config>
    
    // Obtener valores del sector base
    uint8_t buffer[512];
    if (SD_disk_read(0, buffer, 0, 1) == RES_OK) {
 8000bf8:	1d39      	adds	r1, r7, #4
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f000 fe24 	bl	800184c <SD_disk_read>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d13d      	bne.n	8000c86 <audio_recorder_init+0xa2>
        // Leer current file index del sector base
        currentFileIndex = buffer[3] | ((uint16_t)buffer[4] << 8);
 8000c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c12:	78db      	ldrb	r3, [r3, #3]
 8000c14:	b21a      	sxth	r2, r3
 8000c16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c1e:	791b      	ldrb	r3, [r3, #4]
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	b21b      	sxth	r3, r3
 8000c24:	4313      	orrs	r3, r2
 8000c26:	b21b      	sxth	r3, r3
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <audio_recorder_init+0xd8>)
 8000c2c:	801a      	strh	r2, [r3, #0]

        // Leer sector counter
        uint32_t sector_counter = buffer[8] | ((uint32_t)buffer[9] << 8) |
 8000c2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c32:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c36:	7a1b      	ldrb	r3, [r3, #8]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c42:	7a5b      	ldrb	r3, [r3, #9]
 8000c44:	021b      	lsls	r3, r3, #8
 8000c46:	431a      	orrs	r2, r3
                                 ((uint32_t)buffer[10] << 16) | ((uint32_t)buffer[11] << 24);
 8000c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c50:	7a9b      	ldrb	r3, [r3, #10]
 8000c52:	041b      	lsls	r3, r3, #16
        uint32_t sector_counter = buffer[8] | ((uint32_t)buffer[9] << 8) |
 8000c54:	431a      	orrs	r2, r3
                                 ((uint32_t)buffer[10] << 16) | ((uint32_t)buffer[11] << 24);
 8000c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c5e:	7adb      	ldrb	r3, [r3, #11]
 8000c60:	061b      	lsls	r3, r3, #24
        uint32_t sector_counter = buffer[8] | ((uint32_t)buffer[9] << 8) |
 8000c62:	4313      	orrs	r3, r2
 8000c64:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

        // Verificar si hay espacio disponible
        if (sector_counter + 45000 > total_sd_sectors) {
 8000c68:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000c6c:	f503 432f 	add.w	r3, r3, #44800	; 0xaf00
 8000c70:	33c8      	adds	r3, #200	; 0xc8
 8000c72:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <audio_recorder_init+0xdc>)
 8000c74:	6812      	ldr	r2, [r2, #0]
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d905      	bls.n	8000c86 <audio_recorder_init+0xa2>
            printf("¡ADVERTENCIA! Memoria SD llena. No se pueden grabar mas archivos.\r\n");
 8000c7a:	4812      	ldr	r0, [pc, #72]	; (8000cc4 <audio_recorder_init+0xe0>)
 8000c7c:	f004 ff58 	bl	8005b30 <puts>
            memoriaLlena = true;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <audio_recorder_init+0xe4>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
        }
    }

    // Resetear estados
    recorderState = RECORDER_IDLE;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <audio_recorder_init+0xe8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
    currentSector = 1;
 8000c8c:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <audio_recorder_init+0xec>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	601a      	str	r2, [r3, #0]
    sectoresGrabados = 0;
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <audio_recorder_init+0xf0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
    halfBufferReady = false;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <audio_recorder_init+0xf4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
    fullBufferReady = false;
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <audio_recorder_init+0xf8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
    stopRequested = false;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <audio_recorder_init+0xfc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
    
    printf("Grabador de audio inicializado\r\n");
 8000caa:	480e      	ldr	r0, [pc, #56]	; (8000ce4 <audio_recorder_init+0x100>)
 8000cac:	f004 ff40 	bl	8005b30 <puts>
    return true;
 8000cb0:	2301      	movs	r3, #1
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20002206 	.word	0x20002206
 8000cc0:	20002220 	.word	0x20002220
 8000cc4:	08007c90 	.word	0x08007c90
 8000cc8:	20002211 	.word	0x20002211
 8000ccc:	20002204 	.word	0x20002204
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20002208 	.word	0x20002208
 8000cd8:	2000220e 	.word	0x2000220e
 8000cdc:	2000220f 	.word	0x2000220f
 8000ce0:	20002210 	.word	0x20002210
 8000ce4:	08007cd4 	.word	0x08007cd4

08000ce8 <audio_recorder_start>:

// Inicia la grabación
bool audio_recorder_start(void) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 8000cee:	af00      	add	r7, sp, #0
    // Verificar si podemos iniciar grabación
    if (recorderState != RECORDER_IDLE && recorderState != RECORDER_STOPPED) {
 8000cf0:	4b8c      	ldr	r3, [pc, #560]	; (8000f24 <audio_recorder_start+0x23c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d009      	beq.n	8000d0e <audio_recorder_start+0x26>
 8000cfa:	4b8a      	ldr	r3, [pc, #552]	; (8000f24 <audio_recorder_start+0x23c>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	d004      	beq.n	8000d0e <audio_recorder_start+0x26>
        printf("Error: No se puede iniciar grabacion, estado incorrecto\r\n");
 8000d04:	4888      	ldr	r0, [pc, #544]	; (8000f28 <audio_recorder_start+0x240>)
 8000d06:	f004 ff13 	bl	8005b30 <puts>
        return false;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e104      	b.n	8000f18 <audio_recorder_start+0x230>
    }
    
    // Verificar si memoria está llena
    if (memoriaLlena) {
 8000d0e:	4b87      	ldr	r3, [pc, #540]	; (8000f2c <audio_recorder_start+0x244>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d004      	beq.n	8000d22 <audio_recorder_start+0x3a>
        printf("Error: No se puede iniciar grabacion, memoria SD llena\r\n");
 8000d18:	4885      	ldr	r0, [pc, #532]	; (8000f30 <audio_recorder_start+0x248>)
 8000d1a:	f004 ff09 	bl	8005b30 <puts>
        return false;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e0fa      	b.n	8000f18 <audio_recorder_start+0x230>
    }

    // Actualizar sector donde comienza el archivo
    if (currentFileIndex > 0) {
 8000d22:	4b84      	ldr	r3, [pc, #528]	; (8000f34 <audio_recorder_start+0x24c>)
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00c      	beq.n	8000d46 <audio_recorder_start+0x5e>
        currentSector = 1 + (currentFileIndex * (45000)); // +1 por sector principal
 8000d2c:	4b81      	ldr	r3, [pc, #516]	; (8000f34 <audio_recorder_start+0x24c>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	461a      	mov	r2, r3
 8000d34:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8000d38:	fb02 f303 	mul.w	r3, r2, r3
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b7d      	ldr	r3, [pc, #500]	; (8000f38 <audio_recorder_start+0x250>)
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	e002      	b.n	8000d4c <audio_recorder_start+0x64>
    } else {
        currentSector = 1;
 8000d46:	4b7c      	ldr	r3, [pc, #496]	; (8000f38 <audio_recorder_start+0x250>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
    }

    // Inicializar y configurar el buffer DMA
    memset((void*)audioBuffer, 0, sizeof(audioBuffer));
 8000d4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d50:	2100      	movs	r1, #0
 8000d52:	487a      	ldr	r0, [pc, #488]	; (8000f3c <audio_recorder_start+0x254>)
 8000d54:	f004 f9f4 	bl	8005140 <memset>
    
    // Iniciar DMA y timer para comenzar a recolectar datos
    adc_MIC_DMA_config((uint16_t*)audioBuffer, AUDIO_BUFFER_SIZE);
 8000d58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5c:	4877      	ldr	r0, [pc, #476]	; (8000f3c <audio_recorder_start+0x254>)
 8000d5e:	f003 fcb5 	bl	80046cc <adc_MIC_DMA_config>
    TIM6->CR1 |= (TIM_CR1_CEN); // Iniciar el timer
 8000d62:	4b77      	ldr	r3, [pc, #476]	; (8000f40 <audio_recorder_start+0x258>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a76      	ldr	r2, [pc, #472]	; (8000f40 <audio_recorder_start+0x258>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6013      	str	r3, [r2, #0]

    // Configurar el sector principal del archivo actual
    sectorPrincipalActual = currentSector;
 8000d6e:	4b72      	ldr	r3, [pc, #456]	; (8000f38 <audio_recorder_start+0x250>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	4b73      	ldr	r3, [pc, #460]	; (8000f44 <audio_recorder_start+0x25c>)
 8000d76:	801a      	strh	r2, [r3, #0]
    
    // Iniciar la grabación antes de escribir
    recorderState = RECORDER_RECORDING;
 8000d78:	4b6a      	ldr	r3, [pc, #424]	; (8000f24 <audio_recorder_start+0x23c>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
    sectoresGrabados = 0;
 8000d7e:	4b72      	ldr	r3, [pc, #456]	; (8000f48 <audio_recorder_start+0x260>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
    halfBufferReady = false;
 8000d84:	4b71      	ldr	r3, [pc, #452]	; (8000f4c <audio_recorder_start+0x264>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
    fullBufferReady = false;
 8000d8a:	4b71      	ldr	r3, [pc, #452]	; (8000f50 <audio_recorder_start+0x268>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
    stopRequested = false;
 8000d90:	4b70      	ldr	r3, [pc, #448]	; (8000f54 <audio_recorder_start+0x26c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]

    // Esperar a que el DMA llene al menos la mitad del buffer
    uint32_t timeout = HAL_GetTick() + 100; // 100ms timeout
 8000d96:	f001 fd15 	bl	80027c4 <HAL_GetTick>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	3364      	adds	r3, #100	; 0x64
 8000d9e:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
    while (!halfBufferReady && HAL_GetTick() < timeout) {
 8000da2:	bf00      	nop
 8000da4:	4b69      	ldr	r3, [pc, #420]	; (8000f4c <audio_recorder_start+0x264>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	f083 0301 	eor.w	r3, r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d006      	beq.n	8000dc2 <audio_recorder_start+0xda>
 8000db4:	f001 fd06 	bl	80027c4 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d8f0      	bhi.n	8000da4 <audio_recorder_start+0xbc>
        // Esperar a que lleguen datos
    }

    if (!halfBufferReady) {
 8000dc2:	4b62      	ldr	r3, [pc, #392]	; (8000f4c <audio_recorder_start+0x264>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	f083 0301 	eor.w	r3, r3, #1
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d013      	beq.n	8000dfa <audio_recorder_start+0x112>
        printf("Error: Timeout esperando datos de audio\r\n");
 8000dd2:	4861      	ldr	r0, [pc, #388]	; (8000f58 <audio_recorder_start+0x270>)
 8000dd4:	f004 feac 	bl	8005b30 <puts>
        TIM6->CR1 &= ~(TIM_CR1_CEN); // Detener timer
 8000dd8:	4b59      	ldr	r3, [pc, #356]	; (8000f40 <audio_recorder_start+0x258>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a58      	ldr	r2, [pc, #352]	; (8000f40 <audio_recorder_start+0x258>)
 8000dde:	f023 0301 	bic.w	r3, r3, #1
 8000de2:	6013      	str	r3, [r2, #0]
        DMA1_Channel1->CCR &= ~(DMA_CCR_EN); // Detener DMA
 8000de4:	4b5d      	ldr	r3, [pc, #372]	; (8000f5c <audio_recorder_start+0x274>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a5c      	ldr	r2, [pc, #368]	; (8000f5c <audio_recorder_start+0x274>)
 8000dea:	f023 0301 	bic.w	r3, r3, #1
 8000dee:	6013      	str	r3, [r2, #0]
        recorderState = RECORDER_STOPPED;
 8000df0:	4b4c      	ldr	r3, [pc, #304]	; (8000f24 <audio_recorder_start+0x23c>)
 8000df2:	2203      	movs	r2, #3
 8000df4:	701a      	strb	r2, [r3, #0]
        return false;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e08e      	b.n	8000f18 <audio_recorder_start+0x230>
    }

    // Crear un buffer temporal para los primeros 4 sectores (combina metadatos + datos)
    uint8_t primerSector[2048]; // 4 sectores = 2048 bytes
    memset(primerSector, 0, sizeof(primerSector));
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f004 f99c 	bl	8005140 <memset>

    // Primeros 12 bytes: metadatos del archivo
    primerSector[0] = 0;                     // segundos
 8000e08:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8000e0c:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
    primerSector[1] = 0;                     // minutos
 8000e14:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8000e18:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	705a      	strb	r2, [r3, #1]
    primerSector[2] = 0;                     // horas
 8000e20:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8000e24:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8000e28:	2200      	movs	r2, #0
 8000e2a:	709a      	strb	r2, [r3, #2]
    primerSector[3] = 1;                     // día semana
 8000e2c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8000e30:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8000e34:	2201      	movs	r2, #1
 8000e36:	70da      	strb	r2, [r3, #3]
    primerSector[4] = 1;                     // día mes
 8000e38:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8000e3c:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8000e40:	2201      	movs	r2, #1
 8000e42:	711a      	strb	r2, [r3, #4]
    primerSector[5] = 1;                     // mes
 8000e44:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8000e48:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	715a      	strb	r2, [r3, #5]
    primerSector[6] = 23;                    // año
 8000e50:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8000e54:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8000e58:	2217      	movs	r2, #23
 8000e5a:	719a      	strb	r2, [r3, #6]
    primerSector[7] = 0x89;                  // Llave identificadora (0x89)
 8000e5c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8000e60:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8000e64:	2289      	movs	r2, #137	; 0x89
 8000e66:	71da      	strb	r2, [r3, #7]
    primerSector[8] = currentFileIndex & 0xFF;        // índice bajo
 8000e68:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <audio_recorder_start+0x24c>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8000e74:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8000e78:	721a      	strb	r2, [r3, #8]
    primerSector[9] = (currentFileIndex >> 8) & 0xFF; // índice alto
 8000e7a:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <audio_recorder_start+0x24c>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8000e8a:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8000e8e:	725a      	strb	r2, [r3, #9]
    // bytes 10-11 quedan en 0
    
    // A partir del byte 12, copiar datos del buffer de audio (2036 bytes)
    memcpy(primerSector + 12, (const void*)audioBuffer, 2048 - 12);
 8000e90:	463b      	mov	r3, r7
 8000e92:	330c      	adds	r3, #12
 8000e94:	f240 72f4 	movw	r2, #2036	; 0x7f4
 8000e98:	4928      	ldr	r1, [pc, #160]	; (8000f3c <audio_recorder_start+0x254>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f004 f942 	bl	8005124 <memcpy>
    
    // Escribir estos 4 sectores combinados
    DRESULT write_result = SD_disk_write(0, primerSector, sectorPrincipalActual, 4);
 8000ea0:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <audio_recorder_start+0x25c>)
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	2304      	movs	r3, #4
 8000eac:	2000      	movs	r0, #0
 8000eae:	f000 fd3d 	bl	800192c <SD_disk_write>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f887 3803 	strb.w	r3, [r7, #2051]	; 0x803
    if (write_result != RES_OK) {
 8000eb8:	f897 3803 	ldrb.w	r3, [r7, #2051]	; 0x803
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d016      	beq.n	8000eee <audio_recorder_start+0x206>
        printf("Error al escribir sector principal+datos: %d\r\n", write_result);
 8000ec0:	f897 3803 	ldrb.w	r3, [r7, #2051]	; 0x803
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4826      	ldr	r0, [pc, #152]	; (8000f60 <audio_recorder_start+0x278>)
 8000ec8:	f004 fdac 	bl	8005a24 <iprintf>
        TIM6->CR1 &= ~(TIM_CR1_CEN);
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <audio_recorder_start+0x258>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <audio_recorder_start+0x258>)
 8000ed2:	f023 0301 	bic.w	r3, r3, #1
 8000ed6:	6013      	str	r3, [r2, #0]
        DMA1_Channel1->CCR &= ~(DMA_CCR_EN);
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <audio_recorder_start+0x274>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a1f      	ldr	r2, [pc, #124]	; (8000f5c <audio_recorder_start+0x274>)
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	6013      	str	r3, [r2, #0]
        recorderState = RECORDER_STOPPED;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <audio_recorder_start+0x23c>)
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	701a      	strb	r2, [r3, #0]
        return false;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e014      	b.n	8000f18 <audio_recorder_start+0x230>
    }
    
    // Marcar que usamos parte del buffer y avanzar al siguiente sector
    halfBufferReady = false; // Ya usamos estos datos
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <audio_recorder_start+0x264>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
    currentSector += 4;      // Avanzar 4 sectores
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <audio_recorder_start+0x250>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <audio_recorder_start+0x250>)
 8000efc:	6013      	str	r3, [r2, #0]
    sectoresGrabados += 4;   // Incrementar contador - Ya grabamos 4 sectores
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <audio_recorder_start+0x260>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3304      	adds	r3, #4
 8000f04:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <audio_recorder_start+0x260>)
 8000f06:	6013      	str	r3, [r2, #0]
    
    printf("Grabacion iniciada - Archivo #%d\r\n", currentFileIndex);
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <audio_recorder_start+0x24c>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4814      	ldr	r0, [pc, #80]	; (8000f64 <audio_recorder_start+0x27c>)
 8000f12:	f004 fd87 	bl	8005a24 <iprintf>
    return true;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f607 0708 	addw	r7, r7, #2056	; 0x808
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20002204 	.word	0x20002204
 8000f28:	08007cf4 	.word	0x08007cf4
 8000f2c:	20002211 	.word	0x20002211
 8000f30:	08007d30 	.word	0x08007d30
 8000f34:	20002206 	.word	0x20002206
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000204 	.word	0x20000204
 8000f40:	40001000 	.word	0x40001000
 8000f44:	2000220c 	.word	0x2000220c
 8000f48:	20002208 	.word	0x20002208
 8000f4c:	2000220e 	.word	0x2000220e
 8000f50:	2000220f 	.word	0x2000220f
 8000f54:	20002210 	.word	0x20002210
 8000f58:	08007d68 	.word	0x08007d68
 8000f5c:	40020008 	.word	0x40020008
 8000f60:	08007d94 	.word	0x08007d94
 8000f64:	08007dc4 	.word	0x08007dc4

08000f68 <audio_recorder_stop>:
    }
}

// Modificar la función audio_recorder_stop()

void audio_recorder_stop(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000f6e:	af00      	add	r7, sp, #0
    if (recorderState == RECORDER_RECORDING || recorderState == RECORDER_PAUSED) {
 8000f70:	4b5b      	ldr	r3, [pc, #364]	; (80010e0 <audio_recorder_stop+0x178>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d005      	beq.n	8000f86 <audio_recorder_stop+0x1e>
 8000f7a:	4b59      	ldr	r3, [pc, #356]	; (80010e0 <audio_recorder_stop+0x178>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	f040 80a7 	bne.w	80010d4 <audio_recorder_stop+0x16c>
        // Detener el timer y el DMA
        TIM6->CR1 &= ~(TIM_CR1_CEN);
 8000f86:	4b57      	ldr	r3, [pc, #348]	; (80010e4 <audio_recorder_stop+0x17c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a56      	ldr	r2, [pc, #344]	; (80010e4 <audio_recorder_stop+0x17c>)
 8000f8c:	f023 0301 	bic.w	r3, r3, #1
 8000f90:	6013      	str	r3, [r2, #0]
        DMA1_Channel1->CCR &= ~(DMA_CCR_EN);
 8000f92:	4b55      	ldr	r3, [pc, #340]	; (80010e8 <audio_recorder_stop+0x180>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a54      	ldr	r2, [pc, #336]	; (80010e8 <audio_recorder_stop+0x180>)
 8000f98:	f023 0301 	bic.w	r3, r3, #1
 8000f9c:	6013      	str	r3, [r2, #0]
        
        // Leer sector base
        uint8_t buffer[512];
        DRESULT read_result = SD_disk_read(0, buffer, 0, 1);
 8000f9e:	4639      	mov	r1, r7
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 fc51 	bl	800184c <SD_disk_read>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
        if (read_result == RES_OK) {
 8000fb0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d168      	bne.n	800108a <audio_recorder_stop+0x122>
            // Si completamos un archivo (casi completo también cuenta)
            if (sectoresGrabados >= 45000) {
 8000fb8:	4b4c      	ldr	r3, [pc, #304]	; (80010ec <audio_recorder_stop+0x184>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d957      	bls.n	8001074 <audio_recorder_stop+0x10c>
                // Incrementar el contador de archivos escritos
                currentFileIndex++;
 8000fc4:	4b4a      	ldr	r3, [pc, #296]	; (80010f0 <audio_recorder_stop+0x188>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	3301      	adds	r3, #1
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	4b48      	ldr	r3, [pc, #288]	; (80010f0 <audio_recorder_stop+0x188>)
 8000fd0:	801a      	strh	r2, [r3, #0]

                // Actualizar en el sector base
                buffer[3] = currentFileIndex & 0xFF;
 8000fd2:	4b47      	ldr	r3, [pc, #284]	; (80010f0 <audio_recorder_stop+0x188>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fde:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000fe2:	70da      	strb	r2, [r3, #3]
                buffer[4] = (currentFileIndex >> 8) & 0xFF;
 8000fe4:	4b42      	ldr	r3, [pc, #264]	; (80010f0 <audio_recorder_stop+0x188>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ff4:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000ff8:	711a      	strb	r2, [r3, #4]

                // Calcular sector del próximo archivo
                uint32_t sector_counter = 1 + (currentFileIndex * 45000);
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <audio_recorder_stop+0x188>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8001006:	fb02 f303 	mul.w	r3, r2, r3
 800100a:	3301      	adds	r3, #1
 800100c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
                buffer[8] = sector_counter & 0xFF;
 8001010:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001014:	b2da      	uxtb	r2, r3
 8001016:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800101a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800101e:	721a      	strb	r2, [r3, #8]
                buffer[9] = (sector_counter >> 8) & 0xFF;
 8001020:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	b2da      	uxtb	r2, r3
 8001028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800102c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001030:	725a      	strb	r2, [r3, #9]
                buffer[10] = (sector_counter >> 16) & 0xFF;
 8001032:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001036:	0c1b      	lsrs	r3, r3, #16
 8001038:	b2da      	uxtb	r2, r3
 800103a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800103e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001042:	729a      	strb	r2, [r3, #10]
                buffer[11] = (sector_counter >> 24) & 0xFF;
 8001044:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001048:	0e1b      	lsrs	r3, r3, #24
 800104a:	b2da      	uxtb	r2, r3
 800104c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001050:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001054:	72da      	strb	r2, [r3, #11]

                // Verificar si hay espacio para el próximo archivo usando el valor global
                if (sector_counter + 45000 > total_sd_sectors) {
 8001056:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800105a:	f503 432f 	add.w	r3, r3, #44800	; 0xaf00
 800105e:	33c8      	adds	r3, #200	; 0xc8
 8001060:	4a24      	ldr	r2, [pc, #144]	; (80010f4 <audio_recorder_stop+0x18c>)
 8001062:	6812      	ldr	r2, [r2, #0]
 8001064:	4293      	cmp	r3, r2
 8001066:	d905      	bls.n	8001074 <audio_recorder_stop+0x10c>
                    printf("¡ADVERTENCIA! Memoria SD llena. No se pueden grabar mas archivos.\r\n");
 8001068:	4823      	ldr	r0, [pc, #140]	; (80010f8 <audio_recorder_stop+0x190>)
 800106a:	f004 fd61 	bl	8005b30 <puts>
                    memoriaLlena = true;
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <audio_recorder_stop+0x194>)
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
                }
            }
            
            // Escribir sector actualizado
            SD_disk_write(0, buffer, 0, 1);
 8001074:	4639      	mov	r1, r7
 8001076:	2301      	movs	r3, #1
 8001078:	2200      	movs	r2, #0
 800107a:	2000      	movs	r0, #0
 800107c:	f000 fc56 	bl	800192c <SD_disk_write>
            SD_disk_ioctl(0, CTRL_SYNC, 0); // Asegurar que se escribió físicamente
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	2000      	movs	r0, #0
 8001086:	f000 fcdf 	bl	8001a48 <SD_disk_ioctl>
        }
        
        printf("Grabacion detenida - Sectores grabados: %lu\r\n", sectoresGrabados);
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <audio_recorder_stop+0x184>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4619      	mov	r1, r3
 8001090:	481b      	ldr	r0, [pc, #108]	; (8001100 <audio_recorder_stop+0x198>)
 8001092:	f004 fcc7 	bl	8005a24 <iprintf>

        // IMPORTANTE: Resetear contadores y flags para el próximo archivo
        sectoresGrabados = 0;
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <audio_recorder_stop+0x184>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
        stopRequested = false;
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <audio_recorder_stop+0x19c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]



        // Y solo después intentamos iniciar una nueva grabación si corresponde
        if (!memoriaLlena && currentFileIndex > 0) {
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <audio_recorder_stop+0x194>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f083 0301 	eor.w	r3, r3, #1
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00d      	beq.n	80010ce <audio_recorder_stop+0x166>
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <audio_recorder_stop+0x188>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d008      	beq.n	80010ce <audio_recorder_stop+0x166>
            printf("Iniciando siguiente grabación automáticamente...\r\n");
 80010bc:	4812      	ldr	r0, [pc, #72]	; (8001108 <audio_recorder_stop+0x1a0>)
 80010be:	f004 fd37 	bl	8005b30 <puts>
            // Primero cambiamos el estado a STOPPED
            recorderState = RECORDER_STOPPED;
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <audio_recorder_stop+0x178>)
 80010c4:	2203      	movs	r2, #3
 80010c6:	701a      	strb	r2, [r3, #0]
            audio_recorder_start(); // Comenzar siguiente grabación
 80010c8:	f7ff fe0e 	bl	8000ce8 <audio_recorder_start>
        } else {
            recorderState = RECORDER_STOPPED;
        }
    }
}
 80010cc:	e002      	b.n	80010d4 <audio_recorder_stop+0x16c>
            recorderState = RECORDER_STOPPED;
 80010ce:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <audio_recorder_stop+0x178>)
 80010d0:	2203      	movs	r2, #3
 80010d2:	701a      	strb	r2, [r3, #0]
}
 80010d4:	bf00      	nop
 80010d6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20002204 	.word	0x20002204
 80010e4:	40001000 	.word	0x40001000
 80010e8:	40020008 	.word	0x40020008
 80010ec:	20002208 	.word	0x20002208
 80010f0:	20002206 	.word	0x20002206
 80010f4:	20002220 	.word	0x20002220
 80010f8:	08007c90 	.word	0x08007c90
 80010fc:	20002211 	.word	0x20002211
 8001100:	08007e14 	.word	0x08007e14
 8001104:	20002210 	.word	0x20002210
 8001108:	08007e44 	.word	0x08007e44

0800110c <audio_recorder_process>:

// Proceso principal (debe llamarse en el loop principal)
void audio_recorder_process(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
    // Verificar si hay datos listos para procesar
    if (recorderState == RECORDER_RECORDING) {
 8001112:	4b3c      	ldr	r3, [pc, #240]	; (8001204 <audio_recorder_process+0xf8>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d16e      	bne.n	80011fa <audio_recorder_process+0xee>
        // Procesar la primera mitad del buffer si está lista
        if (halfBufferReady) {
 800111c:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <audio_recorder_process+0xfc>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d02e      	beq.n	8001184 <audio_recorder_process+0x78>
            // Escribir 4 sectores en una sola operación (2048 bytes)
            uint8_t* writeBuffer = (uint8_t*)&audioBuffer[0];
 8001126:	4b39      	ldr	r3, [pc, #228]	; (800120c <audio_recorder_process+0x100>)
 8001128:	60fb      	str	r3, [r7, #12]
            DRESULT write_result = SD_disk_write(0, writeBuffer, currentSector, 4);
 800112a:	4b39      	ldr	r3, [pc, #228]	; (8001210 <audio_recorder_process+0x104>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	2304      	movs	r3, #4
 8001130:	68f9      	ldr	r1, [r7, #12]
 8001132:	2000      	movs	r0, #0
 8001134:	f000 fbfa 	bl	800192c <SD_disk_write>
 8001138:	4603      	mov	r3, r0
 800113a:	72fb      	strb	r3, [r7, #11]
            
            if (write_result == RES_OK) {
 800113c:	7afb      	ldrb	r3, [r7, #11]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d116      	bne.n	8001170 <audio_recorder_process+0x64>
                currentSector += 4;         // Avanzar 4 sectores
 8001142:	4b33      	ldr	r3, [pc, #204]	; (8001210 <audio_recorder_process+0x104>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3304      	adds	r3, #4
 8001148:	4a31      	ldr	r2, [pc, #196]	; (8001210 <audio_recorder_process+0x104>)
 800114a:	6013      	str	r3, [r2, #0]
                sectoresGrabados += 4;      // Incrementar contador total
 800114c:	4b31      	ldr	r3, [pc, #196]	; (8001214 <audio_recorder_process+0x108>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3304      	adds	r3, #4
 8001152:	4a30      	ldr	r2, [pc, #192]	; (8001214 <audio_recorder_process+0x108>)
 8001154:	6013      	str	r3, [r2, #0]
                halfBufferReady = false;
 8001156:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <audio_recorder_process+0xfc>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
                
                // Si alcanzamos el límite de sectores para un archivo
                if (sectoresGrabados >= 45000) {
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <audio_recorder_process+0x108>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001164:	4293      	cmp	r3, r2
 8001166:	d90d      	bls.n	8001184 <audio_recorder_process+0x78>
                    stopRequested = true;
 8001168:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <audio_recorder_process+0x10c>)
 800116a:	2201      	movs	r2, #1
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	e009      	b.n	8001184 <audio_recorder_process+0x78>
                }
            } else {
                printf("Error al escribir datos (half): %d\r\n", write_result);
 8001170:	7afb      	ldrb	r3, [r7, #11]
 8001172:	4619      	mov	r1, r3
 8001174:	4829      	ldr	r0, [pc, #164]	; (800121c <audio_recorder_process+0x110>)
 8001176:	f004 fc55 	bl	8005a24 <iprintf>
                halfBuffersLost++;
 800117a:	4b29      	ldr	r3, [pc, #164]	; (8001220 <audio_recorder_process+0x114>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a27      	ldr	r2, [pc, #156]	; (8001220 <audio_recorder_process+0x114>)
 8001182:	6013      	str	r3, [r2, #0]
            }
        }
        
        // Procesar la segunda mitad del buffer si está lista
        if (fullBufferReady) {
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <audio_recorder_process+0x118>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d02e      	beq.n	80011ec <audio_recorder_process+0xe0>
            // Escribir 4 sectores en una sola operación (2048 bytes)
            // El offset es 512 bytes (128 valores de 32 bits) después del primer bloque de 4 sectores
            uint8_t* writeBuffer = (uint8_t*)&audioBuffer[512];
 800118e:	4b26      	ldr	r3, [pc, #152]	; (8001228 <audio_recorder_process+0x11c>)
 8001190:	607b      	str	r3, [r7, #4]
            DRESULT write_result = SD_disk_write(0, writeBuffer, currentSector, 4);
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <audio_recorder_process+0x104>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	2304      	movs	r3, #4
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	2000      	movs	r0, #0
 800119c:	f000 fbc6 	bl	800192c <SD_disk_write>
 80011a0:	4603      	mov	r3, r0
 80011a2:	70fb      	strb	r3, [r7, #3]
            
            if (write_result == RES_OK) {
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d116      	bne.n	80011d8 <audio_recorder_process+0xcc>
                currentSector += 4;
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <audio_recorder_process+0x104>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3304      	adds	r3, #4
 80011b0:	4a17      	ldr	r2, [pc, #92]	; (8001210 <audio_recorder_process+0x104>)
 80011b2:	6013      	str	r3, [r2, #0]
                sectoresGrabados += 4;
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <audio_recorder_process+0x108>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3304      	adds	r3, #4
 80011ba:	4a16      	ldr	r2, [pc, #88]	; (8001214 <audio_recorder_process+0x108>)
 80011bc:	6013      	str	r3, [r2, #0]
                fullBufferReady = false;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <audio_recorder_process+0x118>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
                
                if (sectoresGrabados >= 45000) {
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <audio_recorder_process+0x108>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d90d      	bls.n	80011ec <audio_recorder_process+0xe0>
                    stopRequested = true;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <audio_recorder_process+0x10c>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	e009      	b.n	80011ec <audio_recorder_process+0xe0>
                }
            } else {
                printf("Error al escribir datos (full): %d\r\n", write_result);
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	4619      	mov	r1, r3
 80011dc:	4813      	ldr	r0, [pc, #76]	; (800122c <audio_recorder_process+0x120>)
 80011de:	f004 fc21 	bl	8005a24 <iprintf>
                fullBuffersLost++;
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <audio_recorder_process+0x124>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	4a11      	ldr	r2, [pc, #68]	; (8001230 <audio_recorder_process+0x124>)
 80011ea:	6013      	str	r3, [r2, #0]
            }
        }
        
        // Verificación para detener grabación
        if (stopRequested) {
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <audio_recorder_process+0x10c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <audio_recorder_process+0xee>
            audio_recorder_stop();
 80011f6:	f7ff feb7 	bl	8000f68 <audio_recorder_stop>
        }
    }
}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20002204 	.word	0x20002204
 8001208:	2000220e 	.word	0x2000220e
 800120c:	20000204 	.word	0x20000204
 8001210:	20000000 	.word	0x20000000
 8001214:	20002208 	.word	0x20002208
 8001218:	20002210 	.word	0x20002210
 800121c:	08007e78 	.word	0x08007e78
 8001220:	20002214 	.word	0x20002214
 8001224:	2000220f 	.word	0x2000220f
 8001228:	20000a04 	.word	0x20000a04
 800122c:	08007ea0 	.word	0x08007ea0
 8001230:	20002218 	.word	0x20002218

08001234 <audio_recorder_get_state>:

// Devuelve el estado actual del grabador
RecorderState audio_recorder_get_state(void) {
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
    return recorderState;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <audio_recorder_get_state+0x14>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	20002204 	.word	0x20002204

0800124c <DMA1_Channel1_IRQHandler>:
}

/**
 * @Brief DMA1 Channel 1 Interrupt Handler
 */
void DMA1_Channel1_IRQHandler(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
    // Half Transfer Complete
    if (DMA1->ISR & DMA_ISR_HTIF1) {
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <DMA1_Channel1_IRQHandler+0xac>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	2b00      	cmp	r3, #0
 800125a:	d020      	beq.n	800129e <DMA1_Channel1_IRQHandler+0x52>
        // Limpiar flag
        DMA1->IFCR |= DMA_IFCR_CHTIF1;
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <DMA1_Channel1_IRQHandler+0xac>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4a25      	ldr	r2, [pc, #148]	; (80012f8 <DMA1_Channel1_IRQHandler+0xac>)
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	6053      	str	r3, [r2, #4]

        // Si estamos grabando y no hay una transferencia previa pendiente
        if (recorderState == RECORDER_RECORDING && !halfBufferReady) {
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <DMA1_Channel1_IRQHandler+0xb0>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b01      	cmp	r3, #1
 8001270:	d10b      	bne.n	800128a <DMA1_Channel1_IRQHandler+0x3e>
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <DMA1_Channel1_IRQHandler+0xb4>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	f083 0301 	eor.w	r3, r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <DMA1_Channel1_IRQHandler+0x3e>
            halfBufferReady = true;
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <DMA1_Channel1_IRQHandler+0xb4>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	e009      	b.n	800129e <DMA1_Channel1_IRQHandler+0x52>
        } else {
            // Si hay un buffer pendiente, registrar pérdida de datos
            if (halfBufferReady) {
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <DMA1_Channel1_IRQHandler+0xb4>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d004      	beq.n	800129e <DMA1_Channel1_IRQHandler+0x52>
                // Incrementar contador de buffers perdidos (variable global)
                halfBuffersLost++;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <DMA1_Channel1_IRQHandler+0xb8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	4a1a      	ldr	r2, [pc, #104]	; (8001304 <DMA1_Channel1_IRQHandler+0xb8>)
 800129c:	6013      	str	r3, [r2, #0]
            }
        }
    }

    // Transfer Complete
    if (DMA1->ISR & DMA_ISR_TCIF1) {
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <DMA1_Channel1_IRQHandler+0xac>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d020      	beq.n	80012ec <DMA1_Channel1_IRQHandler+0xa0>
        // Limpiar flag
        DMA1->IFCR |= DMA_IFCR_CTCIF1;
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <DMA1_Channel1_IRQHandler+0xac>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <DMA1_Channel1_IRQHandler+0xac>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6053      	str	r3, [r2, #4]

        // Si estamos grabando y no hay una transferencia previa pendiente
        if (recorderState == RECORDER_RECORDING && !fullBufferReady) {
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <DMA1_Channel1_IRQHandler+0xb0>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d10b      	bne.n	80012d8 <DMA1_Channel1_IRQHandler+0x8c>
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <DMA1_Channel1_IRQHandler+0xbc>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	f083 0301 	eor.w	r3, r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <DMA1_Channel1_IRQHandler+0x8c>
            fullBufferReady = true;
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <DMA1_Channel1_IRQHandler+0xbc>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	e009      	b.n	80012ec <DMA1_Channel1_IRQHandler+0xa0>
        } else {
            // Si hay un buffer pendiente, registrar pérdida de datos
            if (fullBufferReady) {
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <DMA1_Channel1_IRQHandler+0xbc>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d004      	beq.n	80012ec <DMA1_Channel1_IRQHandler+0xa0>
                fullBuffersLost++;
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <DMA1_Channel1_IRQHandler+0xc0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	4a08      	ldr	r2, [pc, #32]	; (800130c <DMA1_Channel1_IRQHandler+0xc0>)
 80012ea:	6013      	str	r3, [r2, #0]
            }
        }
    }

    // Limpiar flag de interrupción pendiente global
    NVIC_ClearPendingIRQ(DMA1_Channel1_IRQn);
 80012ec:	200b      	movs	r0, #11
 80012ee:	f7ff fc5b 	bl	8000ba8 <__NVIC_ClearPendingIRQ>
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40020000 	.word	0x40020000
 80012fc:	20002204 	.word	0x20002204
 8001300:	2000220e 	.word	0x2000220e
 8001304:	20002214 	.word	0x20002214
 8001308:	2000220f 	.word	0x2000220f
 800130c:	20002218 	.word	0x20002218

08001310 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	spi_cs_sd_write(false);
 8001314:	2000      	movs	r0, #0
 8001316:	f003 fd1f 	bl	8004d58 <spi_cs_sd_write>
	HAL_Delay(1);
 800131a:	2001      	movs	r0, #1
 800131c:	f001 fa5e 	bl	80027dc <HAL_Delay>
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	spi_cs_sd_write(true);
 8001328:	2001      	movs	r0, #1
 800132a:	f003 fd15 	bl	8004d58 <spi_cs_sd_write>
	HAL_Delay(1);
 800132e:	2001      	movs	r0, #1
 8001330:	f001 fa54 	bl	80027dc <HAL_Delay>
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001342:	bf00      	nop
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <SPI_TxByte+0x30>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b02      	cmp	r3, #2
 8001350:	d1f8      	bne.n	8001344 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001352:	1df9      	adds	r1, r7, #7
 8001354:	2364      	movs	r3, #100	; 0x64
 8001356:	2201      	movs	r2, #1
 8001358:	4803      	ldr	r0, [pc, #12]	; (8001368 <SPI_TxByte+0x30>)
 800135a:	f002 fbba 	bl	8003ad2 <HAL_SPI_Transmit>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20002234 	.word	0x20002234

0800136c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001378:	bf00      	nop
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <SPI_TxBuffer+0x30>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b02      	cmp	r3, #2
 8001386:	d1f8      	bne.n	800137a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001388:	887a      	ldrh	r2, [r7, #2]
 800138a:	2364      	movs	r3, #100	; 0x64
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4803      	ldr	r0, [pc, #12]	; (800139c <SPI_TxBuffer+0x30>)
 8001390:	f002 fb9f 	bl	8003ad2 <HAL_SPI_Transmit>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20002234 	.word	0x20002234

080013a0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80013a6:	23ff      	movs	r3, #255	; 0xff
 80013a8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80013aa:	bf00      	nop
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <SPI_RxByte+0x34>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d1f8      	bne.n	80013ac <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80013ba:	1dba      	adds	r2, r7, #6
 80013bc:	1df9      	adds	r1, r7, #7
 80013be:	2364      	movs	r3, #100	; 0x64
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2301      	movs	r3, #1
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <SPI_RxByte+0x34>)
 80013c6:	f002 fcf9 	bl	8003dbc <HAL_SPI_TransmitReceive>

	return data;
 80013ca:	79bb      	ldrb	r3, [r7, #6]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20002234 	.word	0x20002234

080013d8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80013e0:	f7ff ffde 	bl	80013a0 <SPI_RxByte>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	701a      	strb	r2, [r3, #0]
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <SD_ReadyWait+0x30>)
 80013fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001400:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001402:	f7ff ffcd 	bl	80013a0 <SPI_RxByte>
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	2bff      	cmp	r3, #255	; 0xff
 800140e:	d004      	beq.n	800141a <SD_ReadyWait+0x26>
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <SD_ReadyWait+0x30>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	b29b      	uxth	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f3      	bne.n	8001402 <SD_ReadyWait+0xe>

	return res;
 800141a:	79fb      	ldrb	r3, [r7, #7]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20002228 	.word	0x20002228

08001428 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800142e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001432:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001434:	f7ff ff76 	bl	8001324 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	e005      	b.n	800144a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800143e:	20ff      	movs	r0, #255	; 0xff
 8001440:	f7ff ff7a 	bl	8001338 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	3301      	adds	r3, #1
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	2b09      	cmp	r3, #9
 800144e:	ddf6      	ble.n	800143e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001450:	f7ff ff5e 	bl	8001310 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001454:	2340      	movs	r3, #64	; 0x40
 8001456:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001468:	2395      	movs	r3, #149	; 0x95
 800146a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800146c:	463b      	mov	r3, r7
 800146e:	2106      	movs	r1, #6
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff7b 	bl	800136c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001476:	e002      	b.n	800147e <SD_PowerOn+0x56>
	{
		cnt--;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3b01      	subs	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800147e:	f7ff ff8f 	bl	80013a0 <SPI_RxByte>
 8001482:	4603      	mov	r3, r0
 8001484:	2b01      	cmp	r3, #1
 8001486:	d002      	beq.n	800148e <SD_PowerOn+0x66>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f4      	bne.n	8001478 <SD_PowerOn+0x50>
	}

	DESELECT();
 800148e:	f7ff ff49 	bl	8001324 <DESELECT>
	SPI_TxByte(0XFF);
 8001492:	20ff      	movs	r0, #255	; 0xff
 8001494:	f7ff ff50 	bl	8001338 <SPI_TxByte>

	PowerFlag = 1;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <SD_PowerOn+0x80>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2000221d 	.word	0x2000221d

080014ac <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <SD_PowerOff+0x14>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	2000221d 	.word	0x2000221d

080014c4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	return PowerFlag;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <SD_CheckPower+0x14>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	2000221d 	.word	0x2000221d

080014dc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(uint8_t *buff, UINT len)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <SD_RxDataBlock+0x5c>)
 80014ea:	22c8      	movs	r2, #200	; 0xc8
 80014ec:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80014ee:	f7ff ff57 	bl	80013a0 <SPI_RxByte>
 80014f2:	4603      	mov	r3, r0
 80014f4:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	2bff      	cmp	r3, #255	; 0xff
 80014fa:	d104      	bne.n	8001506 <SD_RxDataBlock+0x2a>
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <SD_RxDataBlock+0x5c>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f3      	bne.n	80014ee <SD_RxDataBlock+0x12>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	2bfe      	cmp	r3, #254	; 0xfe
 800150a:	d001      	beq.n	8001510 <SD_RxDataBlock+0x34>
 800150c:	2300      	movs	r3, #0
 800150e:	e00f      	b.n	8001530 <SD_RxDataBlock+0x54>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff5e 	bl	80013d8 <SPI_RxBytePtr>
	} while(len--);
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	1e5a      	subs	r2, r3, #1
 8001520:	807a      	strh	r2, [r7, #2]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f4      	bne.n	8001510 <SD_RxDataBlock+0x34>

	/* discard CRC */
	SPI_RxByte();
 8001526:	f7ff ff3b 	bl	80013a0 <SPI_RxByte>
	SPI_RxByte();
 800152a:	f7ff ff39 	bl	80013a0 <SPI_RxByte>

	return TRUE;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20002226 	.word	0x20002226

0800153c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, uint8_t token)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800154c:	f7ff ff52 	bl	80013f4 <SD_ReadyWait>
 8001550:	4603      	mov	r3, r0
 8001552:	2bff      	cmp	r3, #255	; 0xff
 8001554:	d001      	beq.n	800155a <SD_TxDataBlock+0x1e>
 8001556:	2300      	movs	r3, #0
 8001558:	e02f      	b.n	80015ba <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff feeb 	bl	8001338 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	2bfd      	cmp	r3, #253	; 0xfd
 8001566:	d020      	beq.n	80015aa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fefd 	bl	800136c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001572:	f7ff ff15 	bl	80013a0 <SPI_RxByte>
		SPI_RxByte();
 8001576:	f7ff ff13 	bl	80013a0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800157a:	e00b      	b.n	8001594 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800157c:	f7ff ff10 	bl	80013a0 <SPI_RxByte>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	2b05      	cmp	r3, #5
 800158c:	d006      	beq.n	800159c <SD_TxDataBlock+0x60>
			i++;
 800158e:	7bbb      	ldrb	r3, [r7, #14]
 8001590:	3301      	adds	r3, #1
 8001592:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001594:	7bbb      	ldrb	r3, [r7, #14]
 8001596:	2b40      	cmp	r3, #64	; 0x40
 8001598:	d9f0      	bls.n	800157c <SD_TxDataBlock+0x40>
 800159a:	e000      	b.n	800159e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800159c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800159e:	bf00      	nop
 80015a0:	f7ff fefe 	bl	80013a0 <SPI_RxByte>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0fa      	beq.n	80015a0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	f003 031f 	and.w	r3, r3, #31
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d101      	bne.n	80015b8 <SD_TxDataBlock+0x7c>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <SD_TxDataBlock+0x7e>

	return FALSE;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static uint8_t SD_SendCmd(uint8_t cmd, uint32_t arg)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	6039      	str	r1, [r7, #0]
 80015cc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80015ce:	f7ff ff11 	bl	80013f4 <SD_ReadyWait>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2bff      	cmp	r3, #255	; 0xff
 80015d6:	d001      	beq.n	80015dc <SD_SendCmd+0x1a>
 80015d8:	23ff      	movs	r3, #255	; 0xff
 80015da:	e042      	b.n	8001662 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff feaa 	bl	8001338 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	0e1b      	lsrs	r3, r3, #24
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fea4 	bl	8001338 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	0c1b      	lsrs	r3, r3, #16
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fe9e 	bl	8001338 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	b2db      	uxtb	r3, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fe98 	bl	8001338 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fe93 	bl	8001338 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b40      	cmp	r3, #64	; 0x40
 8001616:	d102      	bne.n	800161e <SD_SendCmd+0x5c>
 8001618:	2395      	movs	r3, #149	; 0x95
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e007      	b.n	800162e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b48      	cmp	r3, #72	; 0x48
 8001622:	d102      	bne.n	800162a <SD_SendCmd+0x68>
 8001624:	2387      	movs	r3, #135	; 0x87
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	e001      	b.n	800162e <SD_SendCmd+0x6c>
	else crc = 1;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fe81 	bl	8001338 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b4c      	cmp	r3, #76	; 0x4c
 800163a:	d101      	bne.n	8001640 <SD_SendCmd+0x7e>
 800163c:	f7ff feb0 	bl	80013a0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001640:	230a      	movs	r3, #10
 8001642:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001644:	f7ff feac 	bl	80013a0 <SPI_RxByte>
 8001648:	4603      	mov	r3, r0
 800164a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800164c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001650:	2b00      	cmp	r3, #0
 8001652:	da05      	bge.n	8001660 <SD_SendCmd+0x9e>
 8001654:	7bbb      	ldrb	r3, [r7, #14]
 8001656:	3b01      	subs	r3, #1
 8001658:	73bb      	strb	r3, [r7, #14]
 800165a:	7bbb      	ldrb	r3, [r7, #14]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f1      	bne.n	8001644 <SD_SendCmd+0x82>

	return res;
 8001660:	7b7b      	ldrb	r3, [r7, #13]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
bool SD_disk_initialize(uint8_t drv)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SD_disk_initialize+0x14>
 800167c:	2301      	movs	r3, #1
 800167e:	e0da      	b.n	8001836 <SD_disk_initialize+0x1ca>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001680:	4b6f      	ldr	r3, [pc, #444]	; (8001840 <SD_disk_initialize+0x1d4>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <SD_disk_initialize+0x2a>
 800168e:	4b6c      	ldr	r3, [pc, #432]	; (8001840 <SD_disk_initialize+0x1d4>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	e0cf      	b.n	8001836 <SD_disk_initialize+0x1ca>

	/* power on */
	SD_PowerOn();
 8001696:	f7ff fec7 	bl	8001428 <SD_PowerOn>

	/* slave select */
	SELECT();
 800169a:	f7ff fe39 	bl	8001310 <SELECT>

	/* check disk type */
	type = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80016a2:	2100      	movs	r1, #0
 80016a4:	2040      	movs	r0, #64	; 0x40
 80016a6:	f7ff ff8c 	bl	80015c2 <SD_SendCmd>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	f040 80a6 	bne.w	80017fe <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80016b2:	4b64      	ldr	r3, [pc, #400]	; (8001844 <SD_disk_initialize+0x1d8>)
 80016b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016b8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80016ba:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80016be:	2048      	movs	r0, #72	; 0x48
 80016c0:	f7ff ff7f 	bl	80015c2 <SD_SendCmd>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d158      	bne.n	800177c <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	e00c      	b.n	80016ea <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80016d0:	7bfc      	ldrb	r4, [r7, #15]
 80016d2:	f7ff fe65 	bl	80013a0 <SPI_RxByte>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	f104 0310 	add.w	r3, r4, #16
 80016de:	443b      	add	r3, r7
 80016e0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	3301      	adds	r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d9ef      	bls.n	80016d0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80016f0:	7abb      	ldrb	r3, [r7, #10]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	f040 8083 	bne.w	80017fe <SD_disk_initialize+0x192>
 80016f8:	7afb      	ldrb	r3, [r7, #11]
 80016fa:	2baa      	cmp	r3, #170	; 0xaa
 80016fc:	d17f      	bne.n	80017fe <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80016fe:	2100      	movs	r1, #0
 8001700:	2077      	movs	r0, #119	; 0x77
 8001702:	f7ff ff5e 	bl	80015c2 <SD_SendCmd>
 8001706:	4603      	mov	r3, r0
 8001708:	2b01      	cmp	r3, #1
 800170a:	d807      	bhi.n	800171c <SD_disk_initialize+0xb0>
 800170c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001710:	2069      	movs	r0, #105	; 0x69
 8001712:	f7ff ff56 	bl	80015c2 <SD_SendCmd>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <SD_disk_initialize+0xbc>
				} while (Timer1);
 800171c:	4b49      	ldr	r3, [pc, #292]	; (8001844 <SD_disk_initialize+0x1d8>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	b29b      	uxth	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1eb      	bne.n	80016fe <SD_disk_initialize+0x92>
 8001726:	e000      	b.n	800172a <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001728:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800172a:	4b46      	ldr	r3, [pc, #280]	; (8001844 <SD_disk_initialize+0x1d8>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d064      	beq.n	80017fe <SD_disk_initialize+0x192>
 8001734:	2100      	movs	r1, #0
 8001736:	207a      	movs	r0, #122	; 0x7a
 8001738:	f7ff ff43 	bl	80015c2 <SD_SendCmd>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d15d      	bne.n	80017fe <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]
 8001746:	e00c      	b.n	8001762 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001748:	7bfc      	ldrb	r4, [r7, #15]
 800174a:	f7ff fe29 	bl	80013a0 <SPI_RxByte>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	f104 0310 	add.w	r3, r4, #16
 8001756:	443b      	add	r3, r7
 8001758:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	3301      	adds	r3, #1
 8001760:	73fb      	strb	r3, [r7, #15]
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	2b03      	cmp	r3, #3
 8001766:	d9ef      	bls.n	8001748 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001768:	7a3b      	ldrb	r3, [r7, #8]
 800176a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <SD_disk_initialize+0x10a>
 8001772:	230c      	movs	r3, #12
 8001774:	e000      	b.n	8001778 <SD_disk_initialize+0x10c>
 8001776:	2304      	movs	r3, #4
 8001778:	73bb      	strb	r3, [r7, #14]
 800177a:	e040      	b.n	80017fe <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800177c:	2100      	movs	r1, #0
 800177e:	2077      	movs	r0, #119	; 0x77
 8001780:	f7ff ff1f 	bl	80015c2 <SD_SendCmd>
 8001784:	4603      	mov	r3, r0
 8001786:	2b01      	cmp	r3, #1
 8001788:	d808      	bhi.n	800179c <SD_disk_initialize+0x130>
 800178a:	2100      	movs	r1, #0
 800178c:	2069      	movs	r0, #105	; 0x69
 800178e:	f7ff ff18 	bl	80015c2 <SD_SendCmd>
 8001792:	4603      	mov	r3, r0
 8001794:	2b01      	cmp	r3, #1
 8001796:	d801      	bhi.n	800179c <SD_disk_initialize+0x130>
 8001798:	2302      	movs	r3, #2
 800179a:	e000      	b.n	800179e <SD_disk_initialize+0x132>
 800179c:	2301      	movs	r3, #1
 800179e:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80017a0:	7bbb      	ldrb	r3, [r7, #14]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d10e      	bne.n	80017c4 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80017a6:	2100      	movs	r1, #0
 80017a8:	2077      	movs	r0, #119	; 0x77
 80017aa:	f7ff ff0a 	bl	80015c2 <SD_SendCmd>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d80e      	bhi.n	80017d2 <SD_disk_initialize+0x166>
 80017b4:	2100      	movs	r1, #0
 80017b6:	2069      	movs	r0, #105	; 0x69
 80017b8:	f7ff ff03 	bl	80015c2 <SD_SendCmd>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d107      	bne.n	80017d2 <SD_disk_initialize+0x166>
 80017c2:	e00d      	b.n	80017e0 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80017c4:	2100      	movs	r1, #0
 80017c6:	2041      	movs	r0, #65	; 0x41
 80017c8:	f7ff fefb 	bl	80015c2 <SD_SendCmd>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <SD_disk_initialize+0x1d8>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1e1      	bne.n	80017a0 <SD_disk_initialize+0x134>
 80017dc:	e000      	b.n	80017e0 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80017de:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <SD_disk_initialize+0x1d8>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <SD_disk_initialize+0x18e>
 80017ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ee:	2050      	movs	r0, #80	; 0x50
 80017f0:	f7ff fee7 	bl	80015c2 <SD_SendCmd>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <SD_disk_initialize+0x192>
 80017fa:	2300      	movs	r3, #0
 80017fc:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <SD_disk_initialize+0x1dc>)
 8001800:	7bbb      	ldrb	r3, [r7, #14]
 8001802:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001804:	f7ff fd8e 	bl	8001324 <DESELECT>
	SPI_RxByte();
 8001808:	f7ff fdca 	bl	80013a0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800180c:	7bbb      	ldrb	r3, [r7, #14]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00c      	beq.n	800182c <SD_disk_initialize+0x1c0>
	{
		Stat &= ~STA_NOINIT;
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <SD_disk_initialize+0x1d4>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf14      	ite	ne
 8001820:	2301      	movne	r3, #1
 8001822:	2300      	moveq	r3, #0
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <SD_disk_initialize+0x1d4>)
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	e001      	b.n	8001830 <SD_disk_initialize+0x1c4>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800182c:	f7ff fe3e 	bl	80014ac <SD_PowerOff>
	}

	return Stat;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <SD_disk_initialize+0x1d4>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b2db      	uxtb	r3, r3
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bd90      	pop	{r4, r7, pc}
 800183e:	bf00      	nop
 8001840:	20000004 	.word	0x20000004
 8001844:	20002226 	.word	0x20002226
 8001848:	2000221c 	.word	0x2000221c

0800184c <SD_disk_read>:
	return Stat;
}

/* read sector */
DRESULT SD_disk_read(uint8_t pdrv, uint8_t* buff, uint32_t sector, uint16_t count)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	461a      	mov	r2, r3
 8001858:	4603      	mov	r3, r0
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	4613      	mov	r3, r2
 800185e:	81bb      	strh	r3, [r7, #12]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d102      	bne.n	800186c <SD_disk_read+0x20>
 8001866:	89bb      	ldrh	r3, [r7, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <SD_disk_read+0x24>
 800186c:	2304      	movs	r3, #4
 800186e:	e054      	b.n	800191a <SD_disk_read+0xce>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001870:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <SD_disk_read+0xd8>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SD_disk_read+0x36>
 800187e:	2303      	movs	r3, #3
 8001880:	e04b      	b.n	800191a <SD_disk_read+0xce>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <SD_disk_read+0xdc>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	2b00      	cmp	r3, #0
 800188c:	d102      	bne.n	8001894 <SD_disk_read+0x48>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	025b      	lsls	r3, r3, #9
 8001892:	607b      	str	r3, [r7, #4]

	SELECT();
 8001894:	f7ff fd3c 	bl	8001310 <SELECT>

	if (count == 1)
 8001898:	89bb      	ldrh	r3, [r7, #12]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d111      	bne.n	80018c2 <SD_disk_read+0x76>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	2051      	movs	r0, #81	; 0x51
 80018a2:	f7ff fe8e 	bl	80015c2 <SD_SendCmd>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d12c      	bne.n	8001906 <SD_disk_read+0xba>
 80018ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b0:	68b8      	ldr	r0, [r7, #8]
 80018b2:	f7ff fe13 	bl	80014dc <SD_RxDataBlock>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d024      	beq.n	8001906 <SD_disk_read+0xba>
 80018bc:	2300      	movs	r3, #0
 80018be:	81bb      	strh	r3, [r7, #12]
 80018c0:	e021      	b.n	8001906 <SD_disk_read+0xba>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	2052      	movs	r0, #82	; 0x52
 80018c6:	f7ff fe7c 	bl	80015c2 <SD_SendCmd>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d11a      	bne.n	8001906 <SD_disk_read+0xba>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80018d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018d4:	68b8      	ldr	r0, [r7, #8]
 80018d6:	f7ff fe01 	bl	80014dc <SD_RxDataBlock>
 80018da:	4603      	mov	r3, r0
 80018dc:	f083 0301 	eor.w	r3, r3, #1
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10a      	bne.n	80018fc <SD_disk_read+0xb0>
				buff += 512;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018ec:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80018ee:	89bb      	ldrh	r3, [r7, #12]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	81bb      	strh	r3, [r7, #12]
 80018f4:	89bb      	ldrh	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1ea      	bne.n	80018d0 <SD_disk_read+0x84>
 80018fa:	e000      	b.n	80018fe <SD_disk_read+0xb2>
				if (!SD_RxDataBlock(buff, 512)) break;
 80018fc:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80018fe:	2100      	movs	r1, #0
 8001900:	204c      	movs	r0, #76	; 0x4c
 8001902:	f7ff fe5e 	bl	80015c2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001906:	f7ff fd0d 	bl	8001324 <DESELECT>
	SPI_RxByte();
 800190a:	f7ff fd49 	bl	80013a0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800190e:	89bb      	ldrh	r3, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf14      	ite	ne
 8001914:	2301      	movne	r3, #1
 8001916:	2300      	moveq	r3, #0
 8001918:	b2db      	uxtb	r3, r3
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000004 	.word	0x20000004
 8001928:	2000221c 	.word	0x2000221c

0800192c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(uint8_t pdrv, const uint8_t* buff, DWORD sector, UINT count)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	461a      	mov	r2, r3
 8001938:	4603      	mov	r3, r0
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	4613      	mov	r3, r2
 800193e:	81bb      	strh	r3, [r7, #12]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <SD_disk_write+0x20>
 8001946:	89bb      	ldrh	r3, [r7, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <SD_disk_write+0x24>
 800194c:	2304      	movs	r3, #4
 800194e:	e072      	b.n	8001a36 <SD_disk_write+0x10a>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001950:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <SD_disk_write+0x114>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SD_disk_write+0x36>
 800195e:	2303      	movs	r3, #3
 8001960:	e069      	b.n	8001a36 <SD_disk_write+0x10a>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001962:	4b37      	ldr	r3, [pc, #220]	; (8001a40 <SD_disk_write+0x114>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <SD_disk_write+0x48>
 8001970:	2302      	movs	r3, #2
 8001972:	e060      	b.n	8001a36 <SD_disk_write+0x10a>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001974:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <SD_disk_write+0x118>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <SD_disk_write+0x5a>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	025b      	lsls	r3, r3, #9
 8001984:	607b      	str	r3, [r7, #4]

	SELECT();
 8001986:	f7ff fcc3 	bl	8001310 <SELECT>

	if (count == 1)
 800198a:	89bb      	ldrh	r3, [r7, #12]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d110      	bne.n	80019b2 <SD_disk_write+0x86>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	2058      	movs	r0, #88	; 0x58
 8001994:	f7ff fe15 	bl	80015c2 <SD_SendCmd>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d141      	bne.n	8001a22 <SD_disk_write+0xf6>
 800199e:	21fe      	movs	r1, #254	; 0xfe
 80019a0:	68b8      	ldr	r0, [r7, #8]
 80019a2:	f7ff fdcb 	bl	800153c <SD_TxDataBlock>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d03a      	beq.n	8001a22 <SD_disk_write+0xf6>
			count = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	81bb      	strh	r3, [r7, #12]
 80019b0:	e037      	b.n	8001a22 <SD_disk_write+0xf6>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80019b2:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <SD_disk_write+0x118>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d008      	beq.n	80019d0 <SD_disk_write+0xa4>
		{
			SD_SendCmd(CMD55, 0);
 80019be:	2100      	movs	r1, #0
 80019c0:	2077      	movs	r0, #119	; 0x77
 80019c2:	f7ff fdfe 	bl	80015c2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80019c6:	89bb      	ldrh	r3, [r7, #12]
 80019c8:	4619      	mov	r1, r3
 80019ca:	2057      	movs	r0, #87	; 0x57
 80019cc:	f7ff fdf9 	bl	80015c2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	2059      	movs	r0, #89	; 0x59
 80019d4:	f7ff fdf5 	bl	80015c2 <SD_SendCmd>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d121      	bne.n	8001a22 <SD_disk_write+0xf6>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80019de:	21fc      	movs	r1, #252	; 0xfc
 80019e0:	68b8      	ldr	r0, [r7, #8]
 80019e2:	f7ff fdab 	bl	800153c <SD_TxDataBlock>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f083 0301 	eor.w	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10a      	bne.n	8001a08 <SD_disk_write+0xdc>
				buff += 512;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80019f8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80019fa:	89bb      	ldrh	r3, [r7, #12]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	81bb      	strh	r3, [r7, #12]
 8001a00:	89bb      	ldrh	r3, [r7, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1eb      	bne.n	80019de <SD_disk_write+0xb2>
 8001a06:	e000      	b.n	8001a0a <SD_disk_write+0xde>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001a08:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001a0a:	21fd      	movs	r1, #253	; 0xfd
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f7ff fd95 	bl	800153c <SD_TxDataBlock>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f083 0301 	eor.w	r3, r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <SD_disk_write+0xf6>
			{
				count = 1;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	81bb      	strh	r3, [r7, #12]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001a22:	f7ff fc7f 	bl	8001324 <DESELECT>
	SPI_RxByte();
 8001a26:	f7ff fcbb 	bl	80013a0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001a2a:	89bb      	ldrh	r3, [r7, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bf14      	ite	ne
 8001a30:	2301      	movne	r3, #1
 8001a32:	2300      	moveq	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000004 	.word	0x20000004
 8001a44:	2000221c 	.word	0x2000221c

08001a48 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(uint8_t drv, uint8_t ctrl, void *buff)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b08b      	sub	sp, #44	; 0x2c
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	603a      	str	r2, [r7, #0]
 8001a52:	71fb      	strb	r3, [r7, #7]
 8001a54:	460b      	mov	r3, r1
 8001a56:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <SD_disk_ioctl+0x1e>
 8001a62:	2304      	movs	r3, #4
 8001a64:	e113      	b.n	8001c8e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001a6c:	79bb      	ldrb	r3, [r7, #6]
 8001a6e:	2b05      	cmp	r3, #5
 8001a70:	d124      	bne.n	8001abc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d012      	beq.n	8001aa0 <SD_disk_ioctl+0x58>
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	dc1a      	bgt.n	8001ab4 <SD_disk_ioctl+0x6c>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <SD_disk_ioctl+0x40>
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d006      	beq.n	8001a94 <SD_disk_ioctl+0x4c>
 8001a86:	e015      	b.n	8001ab4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001a88:	f7ff fd10 	bl	80014ac <SD_PowerOff>
			res = RES_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a92:	e0fa      	b.n	8001c8a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001a94:	f7ff fcc8 	bl	8001428 <SD_PowerOn>
			res = RES_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a9e:	e0f4      	b.n	8001c8a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	1c5c      	adds	r4, r3, #1
 8001aa4:	f7ff fd0e 	bl	80014c4 <SD_CheckPower>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ab2:	e0ea      	b.n	8001c8a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001aba:	e0e6      	b.n	8001c8a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001abc:	4b76      	ldr	r3, [pc, #472]	; (8001c98 <SD_disk_ioctl+0x250>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SD_disk_ioctl+0x86>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0df      	b.n	8001c8e <SD_disk_ioctl+0x246>

		SELECT();
 8001ace:	f7ff fc1f 	bl	8001310 <SELECT>

		switch (ctrl)
 8001ad2:	79bb      	ldrb	r3, [r7, #6]
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	f200 80c9 	bhi.w	8001c6c <SD_disk_ioctl+0x224>
 8001ada:	a201      	add	r2, pc, #4	; (adr r2, 8001ae0 <SD_disk_ioctl+0x98>)
 8001adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae0:	08001bd7 	.word	0x08001bd7
 8001ae4:	08001b15 	.word	0x08001b15
 8001ae8:	08001bc7 	.word	0x08001bc7
 8001aec:	08001c6d 	.word	0x08001c6d
 8001af0:	08001c6d 	.word	0x08001c6d
 8001af4:	08001c6d 	.word	0x08001c6d
 8001af8:	08001c6d 	.word	0x08001c6d
 8001afc:	08001c6d 	.word	0x08001c6d
 8001b00:	08001c6d 	.word	0x08001c6d
 8001b04:	08001c6d 	.word	0x08001c6d
 8001b08:	08001be9 	.word	0x08001be9
 8001b0c:	08001c0d 	.word	0x08001c0d
 8001b10:	08001c31 	.word	0x08001c31
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001b14:	2100      	movs	r1, #0
 8001b16:	2049      	movs	r0, #73	; 0x49
 8001b18:	f7ff fd53 	bl	80015c2 <SD_SendCmd>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f040 80a8 	bne.w	8001c74 <SD_disk_ioctl+0x22c>
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	2110      	movs	r1, #16
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fcd6 	bl	80014dc <SD_RxDataBlock>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 809e 	beq.w	8001c74 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001b38:	7b3b      	ldrb	r3, [r7, #12]
 8001b3a:	099b      	lsrs	r3, r3, #6
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d10e      	bne.n	8001b60 <SD_disk_ioctl+0x118>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001b42:	7d7b      	ldrb	r3, [r7, #21]
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	7d3b      	ldrb	r3, [r7, #20]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3301      	adds	r3, #1
 8001b54:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001b56:	8bfb      	ldrh	r3, [r7, #30]
 8001b58:	029a      	lsls	r2, r3, #10
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e02e      	b.n	8001bbe <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001b60:	7c7b      	ldrb	r3, [r7, #17]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	7dbb      	ldrb	r3, [r7, #22]
 8001b6a:	09db      	lsrs	r3, r3, #7
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	7d7b      	ldrb	r3, [r7, #21]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f003 0306 	and.w	r3, r3, #6
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	3302      	adds	r3, #2
 8001b84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001b88:	7d3b      	ldrb	r3, [r7, #20]
 8001b8a:	099b      	lsrs	r3, r3, #6
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	7cfb      	ldrb	r3, [r7, #19]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	7cbb      	ldrb	r3, [r7, #18]
 8001b9e:	029b      	lsls	r3, r3, #10
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	4413      	add	r3, r2
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	3301      	adds	r3, #1
 8001bae:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001bb0:	8bfa      	ldrh	r2, [r7, #30]
 8001bb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bb6:	3b09      	subs	r3, #9
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001bc4:	e056      	b.n	8001c74 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bcc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001bd4:	e055      	b.n	8001c82 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001bd6:	f7ff fc0d 	bl	80013f4 <SD_ReadyWait>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2bff      	cmp	r3, #255	; 0xff
 8001bde:	d14b      	bne.n	8001c78 <SD_disk_ioctl+0x230>
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001be6:	e047      	b.n	8001c78 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001be8:	2100      	movs	r1, #0
 8001bea:	2049      	movs	r0, #73	; 0x49
 8001bec:	f7ff fce9 	bl	80015c2 <SD_SendCmd>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d142      	bne.n	8001c7c <SD_disk_ioctl+0x234>
 8001bf6:	2110      	movs	r1, #16
 8001bf8:	6a38      	ldr	r0, [r7, #32]
 8001bfa:	f7ff fc6f 	bl	80014dc <SD_RxDataBlock>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d03b      	beq.n	8001c7c <SD_disk_ioctl+0x234>
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001c0a:	e037      	b.n	8001c7c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	204a      	movs	r0, #74	; 0x4a
 8001c10:	f7ff fcd7 	bl	80015c2 <SD_SendCmd>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d132      	bne.n	8001c80 <SD_disk_ioctl+0x238>
 8001c1a:	2110      	movs	r1, #16
 8001c1c:	6a38      	ldr	r0, [r7, #32]
 8001c1e:	f7ff fc5d 	bl	80014dc <SD_RxDataBlock>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d02b      	beq.n	8001c80 <SD_disk_ioctl+0x238>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001c2e:	e027      	b.n	8001c80 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001c30:	2100      	movs	r1, #0
 8001c32:	207a      	movs	r0, #122	; 0x7a
 8001c34:	f7ff fcc5 	bl	80015c2 <SD_SendCmd>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d116      	bne.n	8001c6c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c44:	e00b      	b.n	8001c5e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001c46:	6a3c      	ldr	r4, [r7, #32]
 8001c48:	1c63      	adds	r3, r4, #1
 8001c4a:	623b      	str	r3, [r7, #32]
 8001c4c:	f7ff fba8 	bl	80013a0 <SPI_RxByte>
 8001c50:	4603      	mov	r3, r0
 8001c52:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001c54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d9ef      	bls.n	8001c46 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c72:	e006      	b.n	8001c82 <SD_disk_ioctl+0x23a>
			break;
 8001c74:	bf00      	nop
 8001c76:	e004      	b.n	8001c82 <SD_disk_ioctl+0x23a>
			break;
 8001c78:	bf00      	nop
 8001c7a:	e002      	b.n	8001c82 <SD_disk_ioctl+0x23a>
			break;
 8001c7c:	bf00      	nop
 8001c7e:	e000      	b.n	8001c82 <SD_disk_ioctl+0x23a>
			break;
 8001c80:	bf00      	nop
		}

		DESELECT();
 8001c82:	f7ff fb4f 	bl	8001324 <DESELECT>
		SPI_RxByte();
 8001c86:	f7ff fb8b 	bl	80013a0 <SPI_RxByte>
	}

	return res;
 8001c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	372c      	adds	r7, #44	; 0x2c
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd90      	pop	{r4, r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000004 	.word	0x20000004

08001c9c <configurar_sector_base>:
Cálculo de sectores necesarios:
Cada sector es de 512 bytes (definido por la SD)
23040000 bytes ÷ 512 bytes/sector = 45000 sectores
 */

bool configurar_sector_base(uint8_t frecuencia_khz, uint16_t sectores_por_fichero, uint16_t num_ficheros) {
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	4608      	mov	r0, r1
 8001ca8:	4611      	mov	r1, r2
 8001caa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001cae:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8001cb2:	4622      	mov	r2, r4
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001cba:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	801a      	strh	r2, [r3, #0]
 8001cc2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001cc6:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8001cca:	460a      	mov	r2, r1
 8001ccc:	801a      	strh	r2, [r3, #0]
    uint8_t buffer[512];
    memset(buffer, 0, sizeof(buffer));
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 fa31 	bl	8005140 <memset>

    // Obtener el número total de sectores de la SD una sola vez
    if (SD_disk_ioctl(0, GET_SECTOR_COUNT, &total_sd_sectors) == RES_OK) {
 8001cde:	4a69      	ldr	r2, [pc, #420]	; (8001e84 <configurar_sector_base+0x1e8>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f7ff feb0 	bl	8001a48 <SD_disk_ioctl>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d130      	bne.n	8001d50 <configurar_sector_base+0xb4>
        printf("Capacidad total de la SD: %lu sectores\r\n", total_sd_sectors);
 8001cee:	4b65      	ldr	r3, [pc, #404]	; (8001e84 <configurar_sector_base+0x1e8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4864      	ldr	r0, [pc, #400]	; (8001e88 <configurar_sector_base+0x1ec>)
 8001cf6:	f003 fe95 	bl	8005a24 <iprintf>
        printf("Un archivo ocupa %u sectores\r\n", sectores_por_fichero);
 8001cfa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001cfe:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	4861      	ldr	r0, [pc, #388]	; (8001e8c <configurar_sector_base+0x1f0>)
 8001d08:	f003 fe8c 	bl	8005a24 <iprintf>

        // Calcular máximos archivos posibles basado en el espacio total
        if (total_sd_sectors > sectores_por_fichero) {
 8001d0c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d10:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d14:	881a      	ldrh	r2, [r3, #0]
 8001d16:	4b5b      	ldr	r3, [pc, #364]	; (8001e84 <configurar_sector_base+0x1e8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d21d      	bcs.n	8001d5a <configurar_sector_base+0xbe>
            num_ficheros = (uint16_t)((total_sd_sectors - 1) / sectores_por_fichero);
 8001d1e:	4b59      	ldr	r3, [pc, #356]	; (8001e84 <configurar_sector_base+0x1e8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	1e5a      	subs	r2, r3, #1
 8001d24:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d28:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d32:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d36:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8001d3a:	801a      	strh	r2, [r3, #0]
            printf("Número máximo de archivos posibles: %u\r\n", num_ficheros);
 8001d3c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d40:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	4619      	mov	r1, r3
 8001d48:	4851      	ldr	r0, [pc, #324]	; (8001e90 <configurar_sector_base+0x1f4>)
 8001d4a:	f003 fe6b 	bl	8005a24 <iprintf>
 8001d4e:	e004      	b.n	8001d5a <configurar_sector_base+0xbe>
        }
    } else {
        printf("Error al obtener capacidad total de la SD\r\n");
 8001d50:	4850      	ldr	r0, [pc, #320]	; (8001e94 <configurar_sector_base+0x1f8>)
 8001d52:	f003 feed 	bl	8005b30 <puts>
        return false;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e08f      	b.n	8001e7a <configurar_sector_base+0x1de>
    }
    
    // IMPORTANTE: Dividir sectores_por_fichero por 100 como espera LectorAudio.py
    uint16_t sectores_para_guardar = sectores_por_fichero / 100;
 8001d5a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d5e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	4a4c      	ldr	r2, [pc, #304]	; (8001e98 <configurar_sector_base+0x1fc>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
    
    // Configurar los valores según el formato exacto
    buffer[0] = frecuencia_khz;                          // Frecuencia
 8001d70:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d78:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001d7c:	f2a2 2209 	subw	r2, r2, #521	; 0x209
 8001d80:	7812      	ldrb	r2, [r2, #0]
 8001d82:	701a      	strb	r2, [r3, #0]
    buffer[1] = (sectores_para_guardar) & 0xFF;          // LOW-T_Pack
 8001d84:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d92:	705a      	strb	r2, [r3, #1]
    buffer[2] = ((sectores_para_guardar) >> 8) & 0xFF;   // HIGH-T_Pack
 8001d94:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001da2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001da6:	709a      	strb	r2, [r3, #2]
    buffer[3] = 0;                                        // LOW-N_Pack (archivos escritos = 0)
 8001da8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001dac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001db0:	2200      	movs	r2, #0
 8001db2:	70da      	strb	r2, [r3, #3]
    buffer[4] = 0;                                        // HIGH-N_Pack (archivos escritos = 0)
 8001db4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001db8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	711a      	strb	r2, [r3, #4]
    buffer[7] = 0x89;                                     // Llave que identifica el sector base
 8001dc0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001dc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dc8:	2289      	movs	r2, #137	; 0x89
 8001dca:	71da      	strb	r2, [r3, #7]
    
    // Inicializar contador de sectores en 1 (después del sector 0)
    buffer[8] = 1;   // Comenzamos a escribir en el sector 1
 8001dcc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001dd0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	721a      	strb	r2, [r3, #8]
    buffer[9] = 0;
 8001dd8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001ddc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001de0:	2200      	movs	r2, #0
 8001de2:	725a      	strb	r2, [r3, #9]
    buffer[10] = 0;
 8001de4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001de8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dec:	2200      	movs	r2, #0
 8001dee:	729a      	strb	r2, [r3, #10]
    buffer[11] = 0;
 8001df0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001df4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001df8:	2200      	movs	r2, #0
 8001dfa:	72da      	strb	r2, [r3, #11]

    printf("Configurando sector base (sector 0)...\r\n");
 8001dfc:	4827      	ldr	r0, [pc, #156]	; (8001e9c <configurar_sector_base+0x200>)
 8001dfe:	f003 fe97 	bl	8005b30 <puts>
    printf("Frecuencia: %d kHz\r\n", frecuencia_khz);
 8001e02:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001e06:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4824      	ldr	r0, [pc, #144]	; (8001ea0 <configurar_sector_base+0x204>)
 8001e10:	f003 fe08 	bl	8005a24 <iprintf>
    printf("Sectores por fichero: %d (guardado como: %d)\r\n",
 8001e14:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001e18:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8001e22:	4619      	mov	r1, r3
 8001e24:	481f      	ldr	r0, [pc, #124]	; (8001ea4 <configurar_sector_base+0x208>)
 8001e26:	f003 fdfd 	bl	8005a24 <iprintf>
           sectores_por_fichero, sectores_para_guardar);
    printf("Numero de ficheros: %d\r\n", num_ficheros);
 8001e2a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001e2e:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	4619      	mov	r1, r3
 8001e36:	481c      	ldr	r0, [pc, #112]	; (8001ea8 <configurar_sector_base+0x20c>)
 8001e38:	f003 fdf4 	bl	8005a24 <iprintf>
    
    // Escribir en el sector 0
    DRESULT write_result = SD_disk_write(0, buffer, 0, 1);
 8001e3c:	f107 010c 	add.w	r1, r7, #12
 8001e40:	2301      	movs	r3, #1
 8001e42:	2200      	movs	r2, #0
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7ff fd71 	bl	800192c <SD_disk_write>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
    
    if (write_result == RES_OK) {
 8001e50:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d109      	bne.n	8001e6c <configurar_sector_base+0x1d0>
        printf("Sector base configurado correctamente\r\n");
 8001e58:	4814      	ldr	r0, [pc, #80]	; (8001eac <configurar_sector_base+0x210>)
 8001e5a:	f003 fe69 	bl	8005b30 <puts>
        
        // Sincronizar para asegurar que la escritura se completó físicamente
        SD_disk_ioctl(0, CTRL_SYNC, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff fdf0 	bl	8001a48 <SD_disk_ioctl>
        return true;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e006      	b.n	8001e7a <configurar_sector_base+0x1de>
    } else {
        printf("Error al configurar sector base: %d\r\n", write_result);
 8001e6c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001e70:	4619      	mov	r1, r3
 8001e72:	480f      	ldr	r0, [pc, #60]	; (8001eb0 <configurar_sector_base+0x214>)
 8001e74:	f003 fdd6 	bl	8005a24 <iprintf>
        return false;
 8001e78:	2300      	movs	r3, #0
    }
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f507 7705 	add.w	r7, r7, #532	; 0x214
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd90      	pop	{r4, r7, pc}
 8001e84:	20002220 	.word	0x20002220
 8001e88:	08007ec8 	.word	0x08007ec8
 8001e8c:	08007ef4 	.word	0x08007ef4
 8001e90:	08007f14 	.word	0x08007f14
 8001e94:	08007f40 	.word	0x08007f40
 8001e98:	51eb851f 	.word	0x51eb851f
 8001e9c:	08007f6c 	.word	0x08007f6c
 8001ea0:	08007f94 	.word	0x08007f94
 8001ea4:	08007fac 	.word	0x08007fac
 8001ea8:	08007fdc 	.word	0x08007fdc
 8001eac:	08007ff8 	.word	0x08007ff8
 8001eb0:	08008020 	.word	0x08008020

08001eb4 <leer_sector_base>:

/**
 * @brief Lee el sector base (sector 0) y muestra su información
 * @return true si la operación fue exitosa, false en caso contrario
 */
bool leer_sector_base(void) {
 8001eb4:	b5b0      	push	{r4, r5, r7, lr}
 8001eb6:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8001eba:	af02      	add	r7, sp, #8
    uint8_t buffer[512];
    memset(buffer, 0, sizeof(buffer));
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f003 f93b 	bl	8005140 <memset>
    
    printf("Leyendo sector base (sector 0)...\r\n");
 8001eca:	4863      	ldr	r0, [pc, #396]	; (8002058 <leer_sector_base+0x1a4>)
 8001ecc:	f003 fe30 	bl	8005b30 <puts>
    
    // Leer el sector 0
    DRESULT read_result = SD_disk_read(0, buffer, 0, 1);
 8001ed0:	4639      	mov	r1, r7
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7ff fcb8 	bl	800184c <SD_disk_read>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
    
    if (read_result == RES_OK) {
 8001ee2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 80a9 	bne.w	800203e <leer_sector_base+0x18a>
        uint8_t frecuencia_khz = buffer[0];
 8001eec:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001ef0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
        
        // Leer correctamente los 2 bytes de sectores_por_fichero
        uint16_t sectores_guardados = buffer[1] | ((uint16_t)buffer[2] << 8);
 8001efa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001efe:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001f02:	785b      	ldrb	r3, [r3, #1]
 8001f04:	b21a      	sxth	r2, r3
 8001f06:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001f0a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001f0e:	789b      	ldrb	r3, [r3, #2]
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	4313      	orrs	r3, r2
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
        
        // IMPORTANTE: Multiplicar por 100 para obtener el valor real
        uint16_t sectores_por_fichero = sectores_guardados * 100;
 8001f1c:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001f20:	461a      	mov	r2, r3
 8001f22:	0092      	lsls	r2, r2, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	461a      	mov	r2, r3
 8001f28:	0091      	lsls	r1, r2, #2
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	f8a7 320a 	strh.w	r3, [r7, #522]	; 0x20a
        
        uint16_t num_ficheros = buffer[3] | ((uint16_t)buffer[4] << 8);
 8001f36:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001f3a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001f3e:	78db      	ldrb	r3, [r3, #3]
 8001f40:	b21a      	sxth	r2, r3
 8001f42:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001f46:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001f4a:	791b      	ldrb	r3, [r3, #4]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b21b      	sxth	r3, r3
 8001f54:	f8a7 3208 	strh.w	r3, [r7, #520]	; 0x208
        uint8_t llave = buffer[7];
 8001f58:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001f5c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001f60:	79db      	ldrb	r3, [r3, #7]
 8001f62:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
        
        printf("Datos del sector base:\r\n");
 8001f66:	483d      	ldr	r0, [pc, #244]	; (800205c <leer_sector_base+0x1a8>)
 8001f68:	f003 fde2 	bl	8005b30 <puts>
        printf("Frecuencia: %d kHz\r\n", frecuencia_khz);
 8001f6c:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001f70:	4619      	mov	r1, r3
 8001f72:	483b      	ldr	r0, [pc, #236]	; (8002060 <leer_sector_base+0x1ac>)
 8001f74:	f003 fd56 	bl	8005a24 <iprintf>
        printf("Sectores por fichero: %d (valor guardado: %d)\r\n", 
 8001f78:	f8b7 320a 	ldrh.w	r3, [r7, #522]	; 0x20a
 8001f7c:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 8001f80:	4619      	mov	r1, r3
 8001f82:	4838      	ldr	r0, [pc, #224]	; (8002064 <leer_sector_base+0x1b0>)
 8001f84:	f003 fd4e 	bl	8005a24 <iprintf>
               sectores_por_fichero, sectores_guardados);
        printf("Numero de ficheros: %d\r\n", num_ficheros);
 8001f88:	f8b7 3208 	ldrh.w	r3, [r7, #520]	; 0x208
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4836      	ldr	r0, [pc, #216]	; (8002068 <leer_sector_base+0x1b4>)
 8001f90:	f003 fd48 	bl	8005a24 <iprintf>
        printf("Llave: 0x%02X (Esperado: 0x89)\r\n", llave);
 8001f94:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4834      	ldr	r0, [pc, #208]	; (800206c <leer_sector_base+0x1b8>)
 8001f9c:	f003 fd42 	bl	8005a24 <iprintf>
        
        // Calcular el tiempo total disponible (en minutos)
        float tiempo_minutos = (float)sectores_por_fichero * (float)num_ficheros * 512.0f / 2.0f / 60.0f / (frecuencia_khz * 1000.0f);
 8001fa0:	f8b7 320a 	ldrh.w	r3, [r7, #522]	; 0x20a
 8001fa4:	ee07 3a90 	vmov	s15, r3
 8001fa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fac:	f8b7 3208 	ldrh.w	r3, [r7, #520]	; 0x208
 8001fb0:	ee07 3a90 	vmov	s15, r3
 8001fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fbc:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002070 <leer_sector_base+0x1bc>
 8001fc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fc4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001fc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fcc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002074 <leer_sector_base+0x1c0>
 8001fd0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fd4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002078 <leer_sector_base+0x1c4>
 8001fe4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fec:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
        printf("Tiempo total disponible: %.1f minutos (%.1f horas)\r\n", 
 8001ff0:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 8001ff4:	f7fe faa8 	bl	8000548 <__aeabi_f2d>
 8001ff8:	4604      	mov	r4, r0
 8001ffa:	460d      	mov	r5, r1
               tiempo_minutos, tiempo_minutos/60.0f);
 8001ffc:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 8002000:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002074 <leer_sector_base+0x1c0>
 8002004:	eec7 6a87 	vdiv.f32	s13, s15, s14
        printf("Tiempo total disponible: %.1f minutos (%.1f horas)\r\n", 
 8002008:	ee16 0a90 	vmov	r0, s13
 800200c:	f7fe fa9c 	bl	8000548 <__aeabi_f2d>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	e9cd 2300 	strd	r2, r3, [sp]
 8002018:	4622      	mov	r2, r4
 800201a:	462b      	mov	r3, r5
 800201c:	4817      	ldr	r0, [pc, #92]	; (800207c <leer_sector_base+0x1c8>)
 800201e:	f003 fd01 	bl	8005a24 <iprintf>
        
        if (llave == 0x89) {
 8002022:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002026:	2b89      	cmp	r3, #137	; 0x89
 8002028:	d104      	bne.n	8002034 <leer_sector_base+0x180>
            printf("Formato de sector base valido\r\n");
 800202a:	4815      	ldr	r0, [pc, #84]	; (8002080 <leer_sector_base+0x1cc>)
 800202c:	f003 fd80 	bl	8005b30 <puts>
            return true;
 8002030:	2301      	movs	r3, #1
 8002032:	e00b      	b.n	800204c <leer_sector_base+0x198>
        } else {
            printf("¡Advertencia! La llave no coincide con el valor esperado 0x89\r\n");
 8002034:	4813      	ldr	r0, [pc, #76]	; (8002084 <leer_sector_base+0x1d0>)
 8002036:	f003 fd7b 	bl	8005b30 <puts>
            return false;
 800203a:	2300      	movs	r3, #0
 800203c:	e006      	b.n	800204c <leer_sector_base+0x198>
        }
    } else {
        printf("Error al leer el sector base: %d\r\n", read_result);
 800203e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002042:	4619      	mov	r1, r3
 8002044:	4810      	ldr	r0, [pc, #64]	; (8002088 <leer_sector_base+0x1d4>)
 8002046:	f003 fced 	bl	8005a24 <iprintf>
        return false;
 800204a:	2300      	movs	r3, #0
    }
}
 800204c:	4618      	mov	r0, r3
 800204e:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8002052:	46bd      	mov	sp, r7
 8002054:	bdb0      	pop	{r4, r5, r7, pc}
 8002056:	bf00      	nop
 8002058:	08008048 	.word	0x08008048
 800205c:	0800806c 	.word	0x0800806c
 8002060:	08007f94 	.word	0x08007f94
 8002064:	08008084 	.word	0x08008084
 8002068:	08007fdc 	.word	0x08007fdc
 800206c:	080080b4 	.word	0x080080b4
 8002070:	44000000 	.word	0x44000000
 8002074:	42700000 	.word	0x42700000
 8002078:	447a0000 	.word	0x447a0000
 800207c:	080080d8 	.word	0x080080d8
 8002080:	08008110 	.word	0x08008110
 8002084:	08008130 	.word	0x08008130
 8002088:	08008170 	.word	0x08008170

0800208c <__io_putchar>:
#include "uart.h"

int __io_putchar(int ch);
int _write(int file,char *ptr, int len);

int __io_putchar(int ch) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	733b      	strb	r3, [r7, #12]
 uart_UART2_TX(&c[0], 1, 100);
 800209a:	f107 030c 	add.w	r3, r7, #12
 800209e:	2264      	movs	r2, #100	; 0x64
 80020a0:	2101      	movs	r1, #1
 80020a2:	4618      	mov	r0, r3
 80020a4:	f002 ffd0 	bl	8005048 <uart_UART2_TX>
 return ch;
 80020a8:	687b      	ldr	r3, [r7, #4]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <_write>:

int _write(int file,char *ptr, int len) {
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	e009      	b.n	80020d8 <_write+0x26>
  __io_putchar(*ptr++);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	60ba      	str	r2, [r7, #8]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ffdd 	bl	800208c <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	3301      	adds	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	429a      	cmp	r2, r3
 80020de:	dbf1      	blt.n	80020c4 <_write+0x12>
 }
 return len;
 80020e0:	687b      	ldr	r3, [r7, #4]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <__NVIC_ClearPendingIRQ>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	db0c      	blt.n	8002118 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	4907      	ldr	r1, [pc, #28]	; (8002124 <__NVIC_ClearPendingIRQ+0x38>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2001      	movs	r0, #1
 800210e:	fa00 f202 	lsl.w	r2, r0, r2
 8002112:	3360      	adds	r3, #96	; 0x60
 8002114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000e100 	.word	0xe000e100

08002128 <main>:
void write_sector_test(void);
bool configurar_sector_base(uint8_t frecuencia_khz, uint16_t sectores_por_fichero, uint16_t num_ficheros);


int main (void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
	//----------Setup------------------------------//
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800212e:	f000 fae0 	bl	80026f2 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8002132:	f000 f8a3 	bl	800227c <SystemClock_Config>
	/* Initialize all configured peripherals */
	//GPIO LED Config
	gpio_LED_config();
 8002136:	f002 fcf3 	bl	8004b20 <gpio_LED_config>
	//USART COnfig
	uart_UART2_GPIO_config();
 800213a:	f002 fec7 	bl	8004ecc <uart_UART2_GPIO_config>
	uart_UART2_config(systemClock);
 800213e:	4b45      	ldr	r3, [pc, #276]	; (8002254 <main+0x12c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f002 ff24 	bl	8004f90 <uart_UART2_config>
	//SPI CONFIG
	spi_GPIO_config();
 8002148:	f002 fd8e 	bl	8004c68 <spi_GPIO_config>
	MX_SPI1_Init();
 800214c:	f002 fdc6 	bl	8004cdc <MX_SPI1_Init>

	// Configurar el botón con interrupción
	exti_buttonConfig();  // Configuracion del boton (PA12->D2)
 8002150:	f002 fb5e 	bl	8004810 <exti_buttonConfig>

	//Mount SD Card
	bool sd_mounted = SD_disk_initialize(0);
 8002154:	2000      	movs	r0, #0
 8002156:	f7ff fa89 	bl	800166c <SD_disk_initialize>
 800215a:	4603      	mov	r3, r0
 800215c:	71bb      	strb	r3, [r7, #6]

	if (sd_mounted != 0)
 800215e:	79bb      	ldrb	r3, [r7, #6]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <main+0x44>
	{
		printf("Failed to mount SD card\r\n");
 8002164:	483c      	ldr	r0, [pc, #240]	; (8002258 <main+0x130>)
 8002166:	f003 fce3 	bl	8005b30 <puts>
 800216a:	e06d      	b.n	8002248 <main+0x120>
	}
	else
	{
		printf("Successfully Mounted SD card\r\n");
 800216c:	483b      	ldr	r0, [pc, #236]	; (800225c <main+0x134>)
 800216e:	f003 fcdf 	bl	8005b30 <puts>

		// Configurar el sector base
		uint8_t frecuencia_khz = 48;                 // 48 kHz
 8002172:	2330      	movs	r3, #48	; 0x30
 8002174:	717b      	strb	r3, [r7, #5]
		uint16_t sectores_por_fichero = 45000;       // 45000 sectores para 2 minutos a 48 kHz
 8002176:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 800217a:	807b      	strh	r3, [r7, #2]
		uint16_t num_ficheros = 0;                   // Se calculará automáticamente según el espacio disponible
 800217c:	2300      	movs	r3, #0
 800217e:	803b      	strh	r3, [r7, #0]

		if (configurar_sector_base(frecuencia_khz, sectores_por_fichero, num_ficheros)) {
 8002180:	883a      	ldrh	r2, [r7, #0]
 8002182:	8879      	ldrh	r1, [r7, #2]
 8002184:	797b      	ldrb	r3, [r7, #5]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fd88 	bl	8001c9c <configurar_sector_base>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d05a      	beq.n	8002248 <main+0x120>
			leer_sector_base();
 8002192:	f7ff fe8f 	bl	8001eb4 <leer_sector_base>

			// Inicializar el grabador de audio
			if (audio_recorder_init()) {
 8002196:	f7fe fd25 	bl	8000be4 <audio_recorder_init>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d053      	beq.n	8002248 <main+0x120>
				printf("Presione el boton para iniciar la grabacion\r\n");
 80021a0:	482f      	ldr	r0, [pc, #188]	; (8002260 <main+0x138>)
 80021a2:	f003 fcc5 	bl	8005b30 <puts>

				bool recording = false;
 80021a6:	2300      	movs	r3, #0
 80021a8:	71fb      	strb	r3, [r7, #7]

				while(1) {
					// Verificar si el botón fue presionado
					if (exti_flag) {
 80021aa:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <main+0x13c>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d02f      	beq.n	8002214 <main+0xec>
						exti_flag = false; // Resetear la bandera
 80021b4:	4b2b      	ldr	r3, [pc, #172]	; (8002264 <main+0x13c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]

						if (!recording && !memoriaLlena) {
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	f083 0301 	eor.w	r3, r3, #1
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00f      	beq.n	80021e6 <main+0xbe>
 80021c6:	4b28      	ldr	r3, [pc, #160]	; (8002268 <main+0x140>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f083 0301 	eor.w	r3, r3, #1
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <main+0xbe>
							// Comenzar grabación
							recording = true;
 80021d6:	2301      	movs	r3, #1
 80021d8:	71fb      	strb	r3, [r7, #7]
							printf("Grabacion iniciada...\n\rPresione el boton para detener\r\n");
 80021da:	4824      	ldr	r0, [pc, #144]	; (800226c <main+0x144>)
 80021dc:	f003 fca8 	bl	8005b30 <puts>
							audio_recorder_start();
 80021e0:	f7fe fd82 	bl	8000ce8 <audio_recorder_start>
 80021e4:	e016      	b.n	8002214 <main+0xec>
						} else if (recording) {
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <main+0xd4>
							// Detener grabación
							recording = false;
 80021ec:	2300      	movs	r3, #0
 80021ee:	71fb      	strb	r3, [r7, #7]
							printf("Grabacion detenida por usuario\r\n");
 80021f0:	481f      	ldr	r0, [pc, #124]	; (8002270 <main+0x148>)
 80021f2:	f003 fc9d 	bl	8005b30 <puts>
							audio_recorder_stop();
 80021f6:	f7fe feb7 	bl	8000f68 <audio_recorder_stop>
 80021fa:	e00b      	b.n	8002214 <main+0xec>
						} else if (memoriaLlena) {
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <main+0x140>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <main+0xec>
							printf("No se puede iniciar grabacion: memoria SD llena\r\n");
 8002206:	481b      	ldr	r0, [pc, #108]	; (8002274 <main+0x14c>)
 8002208:	f003 fc92 	bl	8005b30 <puts>
							HAL_Delay(500);
 800220c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002210:	f000 fae4 	bl	80027dc <HAL_Delay>
						}
					}

					// Verificar si la grabación se detuvo automáticamente
					if (recording && audio_recorder_get_state() == RECORDER_STOPPED) {
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <main+0x106>
 800221a:	f7ff f80b 	bl	8001234 <audio_recorder_get_state>
 800221e:	4603      	mov	r3, r0
 8002220:	2b03      	cmp	r3, #3
 8002222:	d104      	bne.n	800222e <main+0x106>
						recording = false;
 8002224:	2300      	movs	r3, #0
 8002226:	71fb      	strb	r3, [r7, #7]
						printf("Grabacion detenida automaticamente (limite alcanzado)\r\n");
 8002228:	4813      	ldr	r0, [pc, #76]	; (8002278 <main+0x150>)
 800222a:	f003 fc81 	bl	8005b30 <puts>
					}

					// Procesar grabación (ahora es seguro llamar esto repetidamente)
					if (recording) {
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <main+0x112>
						audio_recorder_process();
 8002234:	f7fe ff6a 	bl	800110c <audio_recorder_process>
 8002238:	e7b7      	b.n	80021aa <main+0x82>
					}
                    else {
						// Parpadeo lento cuando no está grabando
						gpio_LED_toggleGreen();
 800223a:	f002 fca1 	bl	8004b80 <gpio_LED_toggleGreen>
						HAL_Delay(500);
 800223e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002242:	f000 facb 	bl	80027dc <HAL_Delay>
					if (exti_flag) {
 8002246:	e7b0      	b.n	80021aa <main+0x82>
				}
			}
		}
	}

	return 0;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000008 	.word	0x20000008
 8002258:	08008220 	.word	0x08008220
 800225c:	0800823c 	.word	0x0800823c
 8002260:	0800825c 	.word	0x0800825c
 8002264:	20002224 	.word	0x20002224
 8002268:	20002211 	.word	0x20002211
 800226c:	0800828c 	.word	0x0800828c
 8002270:	080082c4 	.word	0x080082c4
 8002274:	080082e4 	.word	0x080082e4
 8002278:	08008318 	.word	0x08008318

0800227c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b096      	sub	sp, #88	; 0x58
 8002280:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	2244      	movs	r2, #68	; 0x44
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f002 ff58 	bl	8005140 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002290:	463b      	mov	r3, r7
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	60da      	str	r2, [r3, #12]
 800229c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800229e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022a2:	f000 fd1d 	bl	8002ce0 <HAL_PWREx_ControlVoltageScaling>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80022ac:	f000 f838 	bl	8002320 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80022b0:	2310      	movs	r3, #16
 80022b2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80022b4:	2301      	movs	r3, #1
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80022bc:	2360      	movs	r3, #96	; 0x60
 80022be:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022c0:	2302      	movs	r3, #2
 80022c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80022c4:	2301      	movs	r3, #1
 80022c6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80022c8:	2301      	movs	r3, #1
 80022ca:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 38;
 80022cc:	2326      	movs	r3, #38	; 0x26
 80022ce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80022d0:	2307      	movs	r3, #7
 80022d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022d4:	2302      	movs	r3, #2
 80022d6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022d8:	2302      	movs	r3, #2
 80022da:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fd53 	bl	8002d8c <HAL_RCC_OscConfig>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <SystemClock_Config+0x74>
	{
		Error_Handler();
 80022ec:	f000 f818 	bl	8002320 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022f0:	230f      	movs	r3, #15
 80022f2:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022f4:	2303      	movs	r3, #3
 80022f6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002304:	463b      	mov	r3, r7
 8002306:	2104      	movs	r1, #4
 8002308:	4618      	mov	r0, r3
 800230a:	f001 f953 	bl	80035b4 <HAL_RCC_ClockConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8002314:	f000 f804 	bl	8002320 <Error_Handler>
	}

}
 8002318:	bf00      	nop
 800231a:	3758      	adds	r7, #88	; 0x58
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <Error_Handler>:
 * @retval None
 */


void Error_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002324:	b672      	cpsid	i
}
 8002326:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002328:	e7fe      	b.n	8002328 <Error_Handler+0x8>
	...

0800232c <EXTI15_10_IRQHandler>:
	/* USER CODE END Error_Handler_Debug */
}

// Implementar el manejador de interrupción para el botón con anti-rebote
void EXTI15_10_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
    // Limpiar flags de interrupción pendientes
    NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8002332:	2028      	movs	r0, #40	; 0x28
 8002334:	f7ff feda 	bl	80020ec <__NVIC_ClearPendingIRQ>
    EXTI->PR1 |= (EXTI_PR1_PIF12);
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <EXTI15_10_IRQHandler+0x3c>)
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <EXTI15_10_IRQHandler+0x3c>)
 800233e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002342:	6153      	str	r3, [r2, #20]

    // Pequeño retardo para anti-rebote
    for(volatile uint32_t i = 0; i < 500000; i++) {
 8002344:	2300      	movs	r3, #0
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	e003      	b.n	8002352 <EXTI15_10_IRQHandler+0x26>
        __NOP(); // No Operation - previene optimización del bucle
 800234a:	bf00      	nop
    for(volatile uint32_t i = 0; i < 500000; i++) {
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3301      	adds	r3, #1
 8002350:	607b      	str	r3, [r7, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a05      	ldr	r2, [pc, #20]	; (800236c <EXTI15_10_IRQHandler+0x40>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d9f7      	bls.n	800234a <EXTI15_10_IRQHandler+0x1e>
    }

    // Activar la bandera para que el bucle principal la detecte
    exti_flag = true;
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <EXTI15_10_IRQHandler+0x44>)
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40010400 	.word	0x40010400
 800236c:	0007a11f 	.word	0x0007a11f
 8002370:	20002224 	.word	0x20002224

08002374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237a:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <HAL_MspInit+0x44>)
 800237c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237e:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <HAL_MspInit+0x44>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6613      	str	r3, [r2, #96]	; 0x60
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <HAL_MspInit+0x44>)
 8002388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_MspInit+0x44>)
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <HAL_MspInit+0x44>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239c:	6593      	str	r3, [r2, #88]	; 0x58
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_MspInit+0x44>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000

080023bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	; 0x28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a20      	ldr	r2, [pc, #128]	; (800245c <HAL_SPI_MspInit+0xa0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d139      	bne.n	8002452 <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <HAL_SPI_MspInit+0xa4>)
 80023e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e2:	4a1f      	ldr	r2, [pc, #124]	; (8002460 <HAL_SPI_MspInit+0xa4>)
 80023e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023e8:	6613      	str	r3, [r2, #96]	; 0x60
 80023ea:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <HAL_SPI_MspInit+0xa4>)
 80023ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <HAL_SPI_MspInit+0xa4>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	4a19      	ldr	r2, [pc, #100]	; (8002460 <HAL_SPI_MspInit+0xa4>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002402:	4b17      	ldr	r3, [pc, #92]	; (8002460 <HAL_SPI_MspInit+0xa4>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800240e:	23a0      	movs	r3, #160	; 0xa0
 8002410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241a:	2303      	movs	r3, #3
 800241c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800241e:	2305      	movs	r3, #5
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4619      	mov	r1, r3
 8002428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242c:	f000 fae0 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002430:	2340      	movs	r3, #64	; 0x40
 8002432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002438:	2301      	movs	r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243c:	2303      	movs	r3, #3
 800243e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002440:	2305      	movs	r3, #5
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4619      	mov	r1, r3
 800244a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800244e:	f000 facf 	bl	80029f0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002452:	bf00      	nop
 8002454:	3728      	adds	r7, #40	; 0x28
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40013000 	.word	0x40013000
 8002460:	40021000 	.word	0x40021000

08002464 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002468:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <SDTimer_Handler+0x40>)
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <SDTimer_Handler+0x1c>
    Timer1--;
 8002472:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <SDTimer_Handler+0x40>)
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <SDTimer_Handler+0x40>)
 800247e:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <SDTimer_Handler+0x44>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d006      	beq.n	8002498 <SDTimer_Handler+0x34>
    Timer2--;
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <SDTimer_Handler+0x44>)
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <SDTimer_Handler+0x44>)
 8002496:	801a      	strh	r2, [r3, #0]
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20002226 	.word	0x20002226
 80024a8:	20002228 	.word	0x20002228

080024ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024b0:	e7fe      	b.n	80024b0 <NMI_Handler+0x4>

080024b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b6:	e7fe      	b.n	80024b6 <HardFault_Handler+0x4>

080024b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024bc:	e7fe      	b.n	80024bc <MemManage_Handler+0x4>

080024be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c2:	e7fe      	b.n	80024c2 <BusFault_Handler+0x4>

080024c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <UsageFault_Handler+0x4>

080024ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
	 /* USER CODE BEGIN SysTick_IRQn 0 */

		  FatFsCnt++;
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <SysTick_Handler+0x30>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	3301      	adds	r3, #1
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <SysTick_Handler+0x30>)
 8002504:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <SysTick_Handler+0x30>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b09      	cmp	r3, #9
 800250e:	d904      	bls.n	800251a <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 8002510:	4b04      	ldr	r3, [pc, #16]	; (8002524 <SysTick_Handler+0x30>)
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 8002516:	f7ff ffa5 	bl	8002464 <SDTimer_Handler>
		  }

	  /* USER CODE END SysTick_IRQn 0 */
	  HAL_IncTick();
 800251a:	f000 f93f 	bl	800279c <HAL_IncTick>
	  /* USER CODE BEGIN SysTick_IRQn 1 */

	  /* USER CODE END SysTick_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20002225 	.word	0x20002225

08002528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return 1;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <_kill>:

int _kill(int pid, int sig)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002542:	f002 fdc5 	bl	80050d0 <__errno>
 8002546:	4603      	mov	r3, r0
 8002548:	2216      	movs	r2, #22
 800254a:	601a      	str	r2, [r3, #0]
  return -1;
 800254c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <_exit>:

void _exit (int status)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002560:	f04f 31ff 	mov.w	r1, #4294967295
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ffe7 	bl	8002538 <_kill>
  while (1) {}    /* Make sure we hang here */
 800256a:	e7fe      	b.n	800256a <_exit+0x12>

0800256c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	e00a      	b.n	8002594 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800257e:	f3af 8000 	nop.w
 8002582:	4601      	mov	r1, r0
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	60ba      	str	r2, [r7, #8]
 800258a:	b2ca      	uxtb	r2, r1
 800258c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3301      	adds	r3, #1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	dbf0      	blt.n	800257e <_read+0x12>
  }

  return len;
 800259c:	687b      	ldr	r3, [r7, #4]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ce:	605a      	str	r2, [r3, #4]
  return 0;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <_isatty>:

int _isatty(int file)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025e6:	2301      	movs	r3, #1
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002618:	4a14      	ldr	r2, [pc, #80]	; (800266c <_sbrk+0x5c>)
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <_sbrk+0x60>)
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <_sbrk+0x64>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <_sbrk+0x64>)
 800262e:	4a12      	ldr	r2, [pc, #72]	; (8002678 <_sbrk+0x68>)
 8002630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <_sbrk+0x64>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	429a      	cmp	r2, r3
 800263e:	d207      	bcs.n	8002650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002640:	f002 fd46 	bl	80050d0 <__errno>
 8002644:	4603      	mov	r3, r0
 8002646:	220c      	movs	r2, #12
 8002648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800264a:	f04f 33ff 	mov.w	r3, #4294967295
 800264e:	e009      	b.n	8002664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <_sbrk+0x64>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <_sbrk+0x64>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4413      	add	r3, r2
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <_sbrk+0x64>)
 8002660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002662:	68fb      	ldr	r3, [r7, #12]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20010000 	.word	0x20010000
 8002670:	00000400 	.word	0x00000400
 8002674:	2000222c 	.word	0x2000222c
 8002678:	200022a8 	.word	0x200022a8

0800267c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <SystemInit+0x20>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002686:	4a05      	ldr	r2, [pc, #20]	; (800269c <SystemInit+0x20>)
 8002688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800268c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026a4:	f7ff ffea 	bl	800267c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a8:	480c      	ldr	r0, [pc, #48]	; (80026dc <LoopForever+0x6>)
  ldr r1, =_edata
 80026aa:	490d      	ldr	r1, [pc, #52]	; (80026e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026ac:	4a0d      	ldr	r2, [pc, #52]	; (80026e4 <LoopForever+0xe>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b0:	e002      	b.n	80026b8 <LoopCopyDataInit>

080026b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b6:	3304      	adds	r3, #4

080026b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026bc:	d3f9      	bcc.n	80026b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026c0:	4c0a      	ldr	r4, [pc, #40]	; (80026ec <LoopForever+0x16>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c4:	e001      	b.n	80026ca <LoopFillZerobss>

080026c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c8:	3204      	adds	r2, #4

080026ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026cc:	d3fb      	bcc.n	80026c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ce:	f002 fd05 	bl	80050dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026d2:	f7ff fd29 	bl	8002128 <main>

080026d6 <LoopForever>:

LoopForever:
    b LoopForever
 80026d6:	e7fe      	b.n	80026d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80026dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80026e4:	08008774 	.word	0x08008774
  ldr r2, =_sbss
 80026e8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80026ec:	200022a8 	.word	0x200022a8

080026f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026f0:	e7fe      	b.n	80026f0 <ADC1_IRQHandler>

080026f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026fc:	2003      	movs	r0, #3
 80026fe:	f000 f943 	bl	8002988 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002702:	2000      	movs	r0, #0
 8002704:	f000 f80e 	bl	8002724 <HAL_InitTick>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	71fb      	strb	r3, [r7, #7]
 8002712:	e001      	b.n	8002718 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002714:	f7ff fe2e 	bl	8002374 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002718:	79fb      	ldrb	r3, [r7, #7]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002730:	4b17      	ldr	r3, [pc, #92]	; (8002790 <HAL_InitTick+0x6c>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d023      	beq.n	8002780 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002738:	4b16      	ldr	r3, [pc, #88]	; (8002794 <HAL_InitTick+0x70>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_InitTick+0x6c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002746:	fbb3 f3f1 	udiv	r3, r3, r1
 800274a:	fbb2 f3f3 	udiv	r3, r2, r3
 800274e:	4618      	mov	r0, r3
 8002750:	f000 f941 	bl	80029d6 <HAL_SYSTICK_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10f      	bne.n	800277a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b0f      	cmp	r3, #15
 800275e:	d809      	bhi.n	8002774 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002760:	2200      	movs	r2, #0
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	f000 f919 	bl	800299e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800276c:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <HAL_InitTick+0x74>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e007      	b.n	8002784 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e004      	b.n	8002784 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	e001      	b.n	8002784 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002784:	7bfb      	ldrb	r3, [r7, #15]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000014 	.word	0x20000014
 8002794:	2000000c 	.word	0x2000000c
 8002798:	20000010 	.word	0x20000010

0800279c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_IncTick+0x20>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_IncTick+0x24>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <HAL_IncTick+0x24>)
 80027ae:	6013      	str	r3, [r2, #0]
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000014 	.word	0x20000014
 80027c0:	20002230 	.word	0x20002230

080027c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return uwTick;
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <HAL_GetTick+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20002230 	.word	0x20002230

080027dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e4:	f7ff ffee 	bl	80027c4 <HAL_GetTick>
 80027e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d005      	beq.n	8002802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027f6:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <HAL_Delay+0x44>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4413      	add	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002802:	bf00      	nop
 8002804:	f7ff ffde 	bl	80027c4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	429a      	cmp	r2, r3
 8002812:	d8f7      	bhi.n	8002804 <HAL_Delay+0x28>
  {
  }
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000014 	.word	0x20000014

08002824 <__NVIC_SetPriorityGrouping>:
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <__NVIC_SetPriorityGrouping+0x44>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002840:	4013      	ands	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800284c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002856:	4a04      	ldr	r2, [pc, #16]	; (8002868 <__NVIC_SetPriorityGrouping+0x44>)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	60d3      	str	r3, [r2, #12]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <__NVIC_GetPriorityGrouping>:
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002870:	4b04      	ldr	r3, [pc, #16]	; (8002884 <__NVIC_GetPriorityGrouping+0x18>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	f003 0307 	and.w	r3, r3, #7
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	2b00      	cmp	r3, #0
 800289a:	db0a      	blt.n	80028b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	490c      	ldr	r1, [pc, #48]	; (80028d4 <__NVIC_SetPriority+0x4c>)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	0112      	lsls	r2, r2, #4
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	440b      	add	r3, r1
 80028ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b0:	e00a      	b.n	80028c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4908      	ldr	r1, [pc, #32]	; (80028d8 <__NVIC_SetPriority+0x50>)
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	3b04      	subs	r3, #4
 80028c0:	0112      	lsls	r2, r2, #4
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	440b      	add	r3, r1
 80028c6:	761a      	strb	r2, [r3, #24]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000e100 	.word	0xe000e100
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f1c3 0307 	rsb	r3, r3, #7
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	bf28      	it	cs
 80028fa:	2304      	movcs	r3, #4
 80028fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3304      	adds	r3, #4
 8002902:	2b06      	cmp	r3, #6
 8002904:	d902      	bls.n	800290c <NVIC_EncodePriority+0x30>
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3b03      	subs	r3, #3
 800290a:	e000      	b.n	800290e <NVIC_EncodePriority+0x32>
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	f04f 32ff 	mov.w	r2, #4294967295
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43da      	mvns	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	401a      	ands	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002924:	f04f 31ff 	mov.w	r1, #4294967295
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	43d9      	mvns	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	4313      	orrs	r3, r2
         );
}
 8002936:	4618      	mov	r0, r3
 8002938:	3724      	adds	r7, #36	; 0x24
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3b01      	subs	r3, #1
 8002950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002954:	d301      	bcc.n	800295a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002956:	2301      	movs	r3, #1
 8002958:	e00f      	b.n	800297a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295a:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <SysTick_Config+0x40>)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002962:	210f      	movs	r1, #15
 8002964:	f04f 30ff 	mov.w	r0, #4294967295
 8002968:	f7ff ff8e 	bl	8002888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <SysTick_Config+0x40>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002972:	4b04      	ldr	r3, [pc, #16]	; (8002984 <SysTick_Config+0x40>)
 8002974:	2207      	movs	r2, #7
 8002976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	e000e010 	.word	0xe000e010

08002988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff ff47 	bl	8002824 <__NVIC_SetPriorityGrouping>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b086      	sub	sp, #24
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029b0:	f7ff ff5c 	bl	800286c <__NVIC_GetPriorityGrouping>
 80029b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	6978      	ldr	r0, [r7, #20]
 80029bc:	f7ff ff8e 	bl	80028dc <NVIC_EncodePriority>
 80029c0:	4602      	mov	r2, r0
 80029c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff5d 	bl	8002888 <__NVIC_SetPriority>
}
 80029ce:	bf00      	nop
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff ffb0 	bl	8002944 <SysTick_Config>
 80029e4:	4603      	mov	r3, r0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029fe:	e148      	b.n	8002c92 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	2101      	movs	r1, #1
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 813a 	beq.w	8002c8c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d005      	beq.n	8002a30 <HAL_GPIO_Init+0x40>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d130      	bne.n	8002a92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a66:	2201      	movs	r2, #1
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	f003 0201 	and.w	r2, r3, #1
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d017      	beq.n	8002ace <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d123      	bne.n	8002b22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	08da      	lsrs	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3208      	adds	r2, #8
 8002ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	220f      	movs	r2, #15
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	08da      	lsrs	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3208      	adds	r2, #8
 8002b1c:	6939      	ldr	r1, [r7, #16]
 8002b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0203 	and.w	r2, r3, #3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 8094 	beq.w	8002c8c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b64:	4b52      	ldr	r3, [pc, #328]	; (8002cb0 <HAL_GPIO_Init+0x2c0>)
 8002b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b68:	4a51      	ldr	r2, [pc, #324]	; (8002cb0 <HAL_GPIO_Init+0x2c0>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	6613      	str	r3, [r2, #96]	; 0x60
 8002b70:	4b4f      	ldr	r3, [pc, #316]	; (8002cb0 <HAL_GPIO_Init+0x2c0>)
 8002b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b7c:	4a4d      	ldr	r2, [pc, #308]	; (8002cb4 <HAL_GPIO_Init+0x2c4>)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	089b      	lsrs	r3, r3, #2
 8002b82:	3302      	adds	r3, #2
 8002b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	220f      	movs	r2, #15
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ba6:	d00d      	beq.n	8002bc4 <HAL_GPIO_Init+0x1d4>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a43      	ldr	r2, [pc, #268]	; (8002cb8 <HAL_GPIO_Init+0x2c8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d007      	beq.n	8002bc0 <HAL_GPIO_Init+0x1d0>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a42      	ldr	r2, [pc, #264]	; (8002cbc <HAL_GPIO_Init+0x2cc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d101      	bne.n	8002bbc <HAL_GPIO_Init+0x1cc>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e004      	b.n	8002bc6 <HAL_GPIO_Init+0x1d6>
 8002bbc:	2307      	movs	r3, #7
 8002bbe:	e002      	b.n	8002bc6 <HAL_GPIO_Init+0x1d6>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_GPIO_Init+0x1d6>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	f002 0203 	and.w	r2, r2, #3
 8002bcc:	0092      	lsls	r2, r2, #2
 8002bce:	4093      	lsls	r3, r2
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bd6:	4937      	ldr	r1, [pc, #220]	; (8002cb4 <HAL_GPIO_Init+0x2c4>)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002be4:	4b36      	ldr	r3, [pc, #216]	; (8002cc0 <HAL_GPIO_Init+0x2d0>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c08:	4a2d      	ldr	r2, [pc, #180]	; (8002cc0 <HAL_GPIO_Init+0x2d0>)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c0e:	4b2c      	ldr	r3, [pc, #176]	; (8002cc0 <HAL_GPIO_Init+0x2d0>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c32:	4a23      	ldr	r2, [pc, #140]	; (8002cc0 <HAL_GPIO_Init+0x2d0>)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c38:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <HAL_GPIO_Init+0x2d0>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c5c:	4a18      	ldr	r2, [pc, #96]	; (8002cc0 <HAL_GPIO_Init+0x2d0>)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c62:	4b17      	ldr	r3, [pc, #92]	; (8002cc0 <HAL_GPIO_Init+0x2d0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c86:	4a0e      	ldr	r2, [pc, #56]	; (8002cc0 <HAL_GPIO_Init+0x2d0>)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f47f aeaf 	bne.w	8002a00 <HAL_GPIO_Init+0x10>
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	bf00      	nop
 8002ca6:	371c      	adds	r7, #28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40010000 	.word	0x40010000
 8002cb8:	48000400 	.word	0x48000400
 8002cbc:	48000800 	.word	0x48000800
 8002cc0:	40010400 	.word	0x40010400

08002cc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <HAL_PWREx_GetVoltageRange+0x18>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40007000 	.word	0x40007000

08002ce0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cee:	d130      	bne.n	8002d52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf0:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfc:	d038      	beq.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d06:	4a1e      	ldr	r2, [pc, #120]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2232      	movs	r2, #50	; 0x32
 8002d14:	fb02 f303 	mul.w	r3, r2, r3
 8002d18:	4a1b      	ldr	r2, [pc, #108]	; (8002d88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	0c9b      	lsrs	r3, r3, #18
 8002d20:	3301      	adds	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d24:	e002      	b.n	8002d2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d38:	d102      	bne.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1f2      	bne.n	8002d26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4c:	d110      	bne.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e00f      	b.n	8002d72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5e:	d007      	beq.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d68:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40007000 	.word	0x40007000
 8002d84:	2000000c 	.word	0x2000000c
 8002d88:	431bde83 	.word	0x431bde83

08002d8c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f000 bc02 	b.w	80035a4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da0:	4b96      	ldr	r3, [pc, #600]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 030c 	and.w	r3, r3, #12
 8002da8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002daa:	4b94      	ldr	r3, [pc, #592]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80e4 	beq.w	8002f8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d007      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x4c>
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2b0c      	cmp	r3, #12
 8002dcc:	f040 808b 	bne.w	8002ee6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	f040 8087 	bne.w	8002ee6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dd8:	4b88      	ldr	r3, [pc, #544]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_OscConfig+0x64>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e3d9      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1a      	ldr	r2, [r3, #32]
 8002df4:	4b81      	ldr	r3, [pc, #516]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d004      	beq.n	8002e0a <HAL_RCC_OscConfig+0x7e>
 8002e00:	4b7e      	ldr	r3, [pc, #504]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e08:	e005      	b.n	8002e16 <HAL_RCC_OscConfig+0x8a>
 8002e0a:	4b7c      	ldr	r3, [pc, #496]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d223      	bcs.n	8002e62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fd54 	bl	80038cc <RCC_SetFlashLatencyFromMSIRange>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e3ba      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e2e:	4b73      	ldr	r3, [pc, #460]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a72      	ldr	r2, [pc, #456]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e34:	f043 0308 	orr.w	r3, r3, #8
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	4b70      	ldr	r3, [pc, #448]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	496d      	ldr	r1, [pc, #436]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e4c:	4b6b      	ldr	r3, [pc, #428]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	4968      	ldr	r1, [pc, #416]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	604b      	str	r3, [r1, #4]
 8002e60:	e025      	b.n	8002eae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e62:	4b66      	ldr	r3, [pc, #408]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a65      	ldr	r2, [pc, #404]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e68:	f043 0308 	orr.w	r3, r3, #8
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4b63      	ldr	r3, [pc, #396]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	4960      	ldr	r1, [pc, #384]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e80:	4b5e      	ldr	r3, [pc, #376]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	495b      	ldr	r1, [pc, #364]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fd14 	bl	80038cc <RCC_SetFlashLatencyFromMSIRange>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e37a      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eae:	f000 fc81 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	4b51      	ldr	r3, [pc, #324]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	4950      	ldr	r1, [pc, #320]	; (8003000 <HAL_RCC_OscConfig+0x274>)
 8002ec0:	5ccb      	ldrb	r3, [r1, r3]
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	4a4e      	ldr	r2, [pc, #312]	; (8003004 <HAL_RCC_OscConfig+0x278>)
 8002ecc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ece:	4b4e      	ldr	r3, [pc, #312]	; (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fc26 	bl	8002724 <HAL_InitTick>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d052      	beq.n	8002f88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	e35e      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d032      	beq.n	8002f54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eee:	4b43      	ldr	r3, [pc, #268]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a42      	ldr	r2, [pc, #264]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002efa:	f7ff fc63 	bl	80027c4 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f02:	f7ff fc5f 	bl	80027c4 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e347      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f14:	4b39      	ldr	r3, [pc, #228]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f20:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a35      	ldr	r2, [pc, #212]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f26:	f043 0308 	orr.w	r3, r3, #8
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4b33      	ldr	r3, [pc, #204]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4930      	ldr	r1, [pc, #192]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f3e:	4b2f      	ldr	r3, [pc, #188]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	492b      	ldr	r1, [pc, #172]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	604b      	str	r3, [r1, #4]
 8002f52:	e01a      	b.n	8002f8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f54:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a28      	ldr	r2, [pc, #160]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f60:	f7ff fc30 	bl	80027c4 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f68:	f7ff fc2c 	bl	80027c4 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e314      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x1dc>
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d073      	beq.n	800307e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x21c>
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b0c      	cmp	r3, #12
 8002fa0:	d10e      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d10b      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d063      	beq.n	800307c <HAL_RCC_OscConfig+0x2f0>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d15f      	bne.n	800307c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e2f1      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc8:	d106      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x24c>
 8002fca:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a0b      	ldr	r2, [pc, #44]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	e025      	b.n	8003024 <HAL_RCC_OscConfig+0x298>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe0:	d114      	bne.n	800300c <HAL_RCC_OscConfig+0x280>
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a02      	ldr	r2, [pc, #8]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e013      	b.n	8003024 <HAL_RCC_OscConfig+0x298>
 8002ffc:	40021000 	.word	0x40021000
 8003000:	08008350 	.word	0x08008350
 8003004:	2000000c 	.word	0x2000000c
 8003008:	20000010 	.word	0x20000010
 800300c:	4ba0      	ldr	r3, [pc, #640]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a9f      	ldr	r2, [pc, #636]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b9d      	ldr	r3, [pc, #628]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a9c      	ldr	r2, [pc, #624]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800301e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d013      	beq.n	8003054 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7ff fbca 	bl	80027c4 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003034:	f7ff fbc6 	bl	80027c4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	; 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e2ae      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003046:	4b92      	ldr	r3, [pc, #584]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x2a8>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7ff fbb6 	bl	80027c4 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800305c:	f7ff fbb2 	bl	80027c4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	; 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e29a      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800306e:	4b88      	ldr	r3, [pc, #544]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x2d0>
 800307a:	e000      	b.n	800307e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d060      	beq.n	800314c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b04      	cmp	r3, #4
 800308e:	d005      	beq.n	800309c <HAL_RCC_OscConfig+0x310>
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d119      	bne.n	80030ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d116      	bne.n	80030ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800309c:	4b7c      	ldr	r3, [pc, #496]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_OscConfig+0x328>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e277      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b4:	4b76      	ldr	r3, [pc, #472]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	061b      	lsls	r3, r3, #24
 80030c2:	4973      	ldr	r1, [pc, #460]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c8:	e040      	b.n	800314c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d023      	beq.n	800311a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d2:	4b6f      	ldr	r3, [pc, #444]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a6e      	ldr	r2, [pc, #440]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030de:	f7ff fb71 	bl	80027c4 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e6:	f7ff fb6d 	bl	80027c4 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e255      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f8:	4b65      	ldr	r3, [pc, #404]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003104:	4b62      	ldr	r3, [pc, #392]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	061b      	lsls	r3, r3, #24
 8003112:	495f      	ldr	r1, [pc, #380]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
 8003118:	e018      	b.n	800314c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800311a:	4b5d      	ldr	r3, [pc, #372]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a5c      	ldr	r2, [pc, #368]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003126:	f7ff fb4d 	bl	80027c4 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800312e:	f7ff fb49 	bl	80027c4 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e231      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003140:	4b53      	ldr	r3, [pc, #332]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f0      	bne.n	800312e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d03c      	beq.n	80031d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01c      	beq.n	800319a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003160:	4b4b      	ldr	r3, [pc, #300]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003166:	4a4a      	ldr	r2, [pc, #296]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003170:	f7ff fb28 	bl	80027c4 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003178:	f7ff fb24 	bl	80027c4 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e20c      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800318a:	4b41      	ldr	r3, [pc, #260]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800318c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0ef      	beq.n	8003178 <HAL_RCC_OscConfig+0x3ec>
 8003198:	e01b      	b.n	80031d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319a:	4b3d      	ldr	r3, [pc, #244]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800319c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a0:	4a3b      	ldr	r2, [pc, #236]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80031a2:	f023 0301 	bic.w	r3, r3, #1
 80031a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031aa:	f7ff fb0b 	bl	80027c4 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b2:	f7ff fb07 	bl	80027c4 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e1ef      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c4:	4b32      	ldr	r3, [pc, #200]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80031c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1ef      	bne.n	80031b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80a6 	beq.w	800332c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e0:	2300      	movs	r3, #0
 80031e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031e4:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80031e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10d      	bne.n	800320c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f0:	4b27      	ldr	r3, [pc, #156]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	4a26      	ldr	r2, [pc, #152]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80031f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fa:	6593      	str	r3, [r2, #88]	; 0x58
 80031fc:	4b24      	ldr	r3, [pc, #144]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 80031fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003208:	2301      	movs	r3, #1
 800320a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320c:	4b21      	ldr	r3, [pc, #132]	; (8003294 <HAL_RCC_OscConfig+0x508>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d118      	bne.n	800324a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003218:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <HAL_RCC_OscConfig+0x508>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <HAL_RCC_OscConfig+0x508>)
 800321e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003222:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003224:	f7ff face 	bl	80027c4 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322c:	f7ff faca 	bl	80027c4 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e1b2      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800323e:	4b15      	ldr	r3, [pc, #84]	; (8003294 <HAL_RCC_OscConfig+0x508>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d108      	bne.n	8003264 <HAL_RCC_OscConfig+0x4d8>
 8003252:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	4a0d      	ldr	r2, [pc, #52]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003262:	e029      	b.n	80032b8 <HAL_RCC_OscConfig+0x52c>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b05      	cmp	r3, #5
 800326a:	d115      	bne.n	8003298 <HAL_RCC_OscConfig+0x50c>
 800326c:	4b08      	ldr	r3, [pc, #32]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	4a07      	ldr	r2, [pc, #28]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003274:	f043 0304 	orr.w	r3, r3, #4
 8003278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	4a03      	ldr	r2, [pc, #12]	; (8003290 <HAL_RCC_OscConfig+0x504>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800328c:	e014      	b.n	80032b8 <HAL_RCC_OscConfig+0x52c>
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000
 8003294:	40007000 	.word	0x40007000
 8003298:	4b9a      	ldr	r3, [pc, #616]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329e:	4a99      	ldr	r2, [pc, #612]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a8:	4b96      	ldr	r3, [pc, #600]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	4a95      	ldr	r2, [pc, #596]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 80032b0:	f023 0304 	bic.w	r3, r3, #4
 80032b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d016      	beq.n	80032ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c0:	f7ff fa80 	bl	80027c4 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c6:	e00a      	b.n	80032de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c8:	f7ff fa7c 	bl	80027c4 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e162      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032de:	4b89      	ldr	r3, [pc, #548]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ed      	beq.n	80032c8 <HAL_RCC_OscConfig+0x53c>
 80032ec:	e015      	b.n	800331a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ee:	f7ff fa69 	bl	80027c4 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7ff fa65 	bl	80027c4 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	; 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e14b      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800330c:	4b7d      	ldr	r3, [pc, #500]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1ed      	bne.n	80032f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800331a:	7ffb      	ldrb	r3, [r7, #31]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d105      	bne.n	800332c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003320:	4b78      	ldr	r3, [pc, #480]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	4a77      	ldr	r2, [pc, #476]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 8003326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800332a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d03c      	beq.n	80033b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01c      	beq.n	800337a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003340:	4b70      	ldr	r3, [pc, #448]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 8003342:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003346:	4a6f      	ldr	r2, [pc, #444]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003350:	f7ff fa38 	bl	80027c4 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003358:	f7ff fa34 	bl	80027c4 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e11c      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800336a:	4b66      	ldr	r3, [pc, #408]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 800336c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ef      	beq.n	8003358 <HAL_RCC_OscConfig+0x5cc>
 8003378:	e01b      	b.n	80033b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800337a:	4b62      	ldr	r3, [pc, #392]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 800337c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003380:	4a60      	ldr	r2, [pc, #384]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 8003382:	f023 0301 	bic.w	r3, r3, #1
 8003386:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338a:	f7ff fa1b 	bl	80027c4 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003392:	f7ff fa17 	bl	80027c4 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e0ff      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033a4:	4b57      	ldr	r3, [pc, #348]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 80033a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1ef      	bne.n	8003392 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80f3 	beq.w	80035a2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	f040 80c9 	bne.w	8003558 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033c6:	4b4f      	ldr	r3, [pc, #316]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f003 0203 	and.w	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d12c      	bne.n	8003434 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	3b01      	subs	r3, #1
 80033e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d123      	bne.n	8003434 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d11b      	bne.n	8003434 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d113      	bne.n	8003434 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	3b01      	subs	r3, #1
 800341a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d109      	bne.n	8003434 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	3b01      	subs	r3, #1
 800342e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d06b      	beq.n	800350c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d062      	beq.n	8003500 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800343a:	4b32      	ldr	r3, [pc, #200]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e0ac      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800344a:	4b2e      	ldr	r3, [pc, #184]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a2d      	ldr	r2, [pc, #180]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 8003450:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003454:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003456:	f7ff f9b5 	bl	80027c4 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345e:	f7ff f9b1 	bl	80027c4 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e099      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003470:	4b24      	ldr	r3, [pc, #144]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f0      	bne.n	800345e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800347c:	4b21      	ldr	r3, [pc, #132]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	4b21      	ldr	r3, [pc, #132]	; (8003508 <HAL_RCC_OscConfig+0x77c>)
 8003482:	4013      	ands	r3, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800348c:	3a01      	subs	r2, #1
 800348e:	0112      	lsls	r2, r2, #4
 8003490:	4311      	orrs	r1, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003496:	0212      	lsls	r2, r2, #8
 8003498:	4311      	orrs	r1, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800349e:	0852      	lsrs	r2, r2, #1
 80034a0:	3a01      	subs	r2, #1
 80034a2:	0552      	lsls	r2, r2, #21
 80034a4:	4311      	orrs	r1, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034aa:	0852      	lsrs	r2, r2, #1
 80034ac:	3a01      	subs	r2, #1
 80034ae:	0652      	lsls	r2, r2, #25
 80034b0:	4311      	orrs	r1, r2
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034b6:	06d2      	lsls	r2, r2, #27
 80034b8:	430a      	orrs	r2, r1
 80034ba:	4912      	ldr	r1, [pc, #72]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034c0:	4b10      	ldr	r3, [pc, #64]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0f      	ldr	r2, [pc, #60]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 80034c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034cc:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4a0c      	ldr	r2, [pc, #48]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 80034d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034d8:	f7ff f974 	bl	80027c4 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e0:	f7ff f970 	bl	80027c4 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e058      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f2:	4b04      	ldr	r3, [pc, #16]	; (8003504 <HAL_RCC_OscConfig+0x778>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034fe:	e050      	b.n	80035a2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e04f      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
 8003504:	40021000 	.word	0x40021000
 8003508:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350c:	4b27      	ldr	r3, [pc, #156]	; (80035ac <HAL_RCC_OscConfig+0x820>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d144      	bne.n	80035a2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003518:	4b24      	ldr	r3, [pc, #144]	; (80035ac <HAL_RCC_OscConfig+0x820>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a23      	ldr	r2, [pc, #140]	; (80035ac <HAL_RCC_OscConfig+0x820>)
 800351e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003522:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003524:	4b21      	ldr	r3, [pc, #132]	; (80035ac <HAL_RCC_OscConfig+0x820>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4a20      	ldr	r2, [pc, #128]	; (80035ac <HAL_RCC_OscConfig+0x820>)
 800352a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800352e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003530:	f7ff f948 	bl	80027c4 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003538:	f7ff f944 	bl	80027c4 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e02c      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800354a:	4b18      	ldr	r3, [pc, #96]	; (80035ac <HAL_RCC_OscConfig+0x820>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0x7ac>
 8003556:	e024      	b.n	80035a2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b0c      	cmp	r3, #12
 800355c:	d01f      	beq.n	800359e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355e:	4b13      	ldr	r3, [pc, #76]	; (80035ac <HAL_RCC_OscConfig+0x820>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a12      	ldr	r2, [pc, #72]	; (80035ac <HAL_RCC_OscConfig+0x820>)
 8003564:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7ff f92b 	bl	80027c4 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003572:	f7ff f927 	bl	80027c4 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e00f      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <HAL_RCC_OscConfig+0x820>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <HAL_RCC_OscConfig+0x820>)
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	4905      	ldr	r1, [pc, #20]	; (80035ac <HAL_RCC_OscConfig+0x820>)
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_RCC_OscConfig+0x824>)
 8003598:	4013      	ands	r3, r2
 800359a:	60cb      	str	r3, [r1, #12]
 800359c:	e001      	b.n	80035a2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3720      	adds	r7, #32
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000
 80035b0:	feeefffc 	.word	0xfeeefffc

080035b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0e7      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035c8:	4b75      	ldr	r3, [pc, #468]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d910      	bls.n	80035f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b72      	ldr	r3, [pc, #456]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 0207 	bic.w	r2, r3, #7
 80035de:	4970      	ldr	r1, [pc, #448]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b6e      	ldr	r3, [pc, #440]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0cf      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d010      	beq.n	8003626 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	4b66      	ldr	r3, [pc, #408]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003610:	429a      	cmp	r2, r3
 8003612:	d908      	bls.n	8003626 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003614:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4960      	ldr	r1, [pc, #384]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d04c      	beq.n	80036cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363a:	4b5a      	ldr	r3, [pc, #360]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d121      	bne.n	800368a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e0a6      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003652:	4b54      	ldr	r3, [pc, #336]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d115      	bne.n	800368a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e09a      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800366a:	4b4e      	ldr	r3, [pc, #312]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e08e      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800367a:	4b4a      	ldr	r3, [pc, #296]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e086      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800368a:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f023 0203 	bic.w	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4943      	ldr	r1, [pc, #268]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003698:	4313      	orrs	r3, r2
 800369a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369c:	f7ff f892 	bl	80027c4 <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a4:	f7ff f88e 	bl	80027c4 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e06e      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	4b3a      	ldr	r3, [pc, #232]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 020c 	and.w	r2, r3, #12
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d1eb      	bne.n	80036a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d010      	beq.n	80036fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d208      	bcs.n	80036fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e8:	4b2e      	ldr	r3, [pc, #184]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	492b      	ldr	r1, [pc, #172]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036fa:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d210      	bcs.n	800372a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003708:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f023 0207 	bic.w	r2, r3, #7
 8003710:	4923      	ldr	r1, [pc, #140]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d001      	beq.n	800372a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e036      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003736:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	4918      	ldr	r1, [pc, #96]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d009      	beq.n	8003768 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003754:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4910      	ldr	r1, [pc, #64]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003764:	4313      	orrs	r3, r2
 8003766:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003768:	f000 f824 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	490b      	ldr	r1, [pc, #44]	; (80037a8 <HAL_RCC_ClockConfig+0x1f4>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
 8003784:	4a09      	ldr	r2, [pc, #36]	; (80037ac <HAL_RCC_ClockConfig+0x1f8>)
 8003786:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x1fc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe ffc9 	bl	8002724 <HAL_InitTick>
 8003792:	4603      	mov	r3, r0
 8003794:	72fb      	strb	r3, [r7, #11]

  return status;
 8003796:	7afb      	ldrb	r3, [r7, #11]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40022000 	.word	0x40022000
 80037a4:	40021000 	.word	0x40021000
 80037a8:	08008350 	.word	0x08008350
 80037ac:	2000000c 	.word	0x2000000c
 80037b0:	20000010 	.word	0x20000010

080037b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b089      	sub	sp, #36	; 0x24
 80037b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	2300      	movs	r3, #0
 80037c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c2:	4b3e      	ldr	r3, [pc, #248]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037cc:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0x34>
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	d121      	bne.n	8003826 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d11e      	bne.n	8003826 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037e8:	4b34      	ldr	r3, [pc, #208]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037f4:	4b31      	ldr	r3, [pc, #196]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	e005      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003804:	4b2d      	ldr	r3, [pc, #180]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003810:	4a2b      	ldr	r2, [pc, #172]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003818:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10d      	bne.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003824:	e00a      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b04      	cmp	r3, #4
 800382a:	d102      	bne.n	8003832 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800382c:	4b25      	ldr	r3, [pc, #148]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	e004      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b08      	cmp	r3, #8
 8003836:	d101      	bne.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003838:	4b23      	ldr	r3, [pc, #140]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800383a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b0c      	cmp	r3, #12
 8003840:	d134      	bne.n	80038ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003842:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d003      	beq.n	800385a <HAL_RCC_GetSysClockFreq+0xa6>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b03      	cmp	r3, #3
 8003856:	d003      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0xac>
 8003858:	e005      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800385a:	4b1a      	ldr	r3, [pc, #104]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800385c:	617b      	str	r3, [r7, #20]
      break;
 800385e:	e005      	b.n	800386c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003860:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003862:	617b      	str	r3, [r7, #20]
      break;
 8003864:	e002      	b.n	800386c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	617b      	str	r3, [r7, #20]
      break;
 800386a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800386c:	4b13      	ldr	r3, [pc, #76]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	3301      	adds	r3, #1
 8003878:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	fb03 f202 	mul.w	r2, r3, r2
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	0e5b      	lsrs	r3, r3, #25
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	3301      	adds	r3, #1
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038ac:	69bb      	ldr	r3, [r7, #24]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3724      	adds	r7, #36	; 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000
 80038c0:	08008360 	.word	0x08008360
 80038c4:	00f42400 	.word	0x00f42400
 80038c8:	007a1200 	.word	0x007a1200

080038cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038d8:	4b2a      	ldr	r3, [pc, #168]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038e4:	f7ff f9ee 	bl	8002cc4 <HAL_PWREx_GetVoltageRange>
 80038e8:	6178      	str	r0, [r7, #20]
 80038ea:	e014      	b.n	8003916 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038ec:	4b25      	ldr	r3, [pc, #148]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	4a24      	ldr	r2, [pc, #144]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f6:	6593      	str	r3, [r2, #88]	; 0x58
 80038f8:	4b22      	ldr	r3, [pc, #136]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003904:	f7ff f9de 	bl	8002cc4 <HAL_PWREx_GetVoltageRange>
 8003908:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800390a:	4b1e      	ldr	r3, [pc, #120]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003914:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391c:	d10b      	bne.n	8003936 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b80      	cmp	r3, #128	; 0x80
 8003922:	d919      	bls.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2ba0      	cmp	r3, #160	; 0xa0
 8003928:	d902      	bls.n	8003930 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800392a:	2302      	movs	r3, #2
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	e013      	b.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003930:	2301      	movs	r3, #1
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	e010      	b.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b80      	cmp	r3, #128	; 0x80
 800393a:	d902      	bls.n	8003942 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800393c:	2303      	movs	r3, #3
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	e00a      	b.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b80      	cmp	r3, #128	; 0x80
 8003946:	d102      	bne.n	800394e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003948:	2302      	movs	r3, #2
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	e004      	b.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b70      	cmp	r3, #112	; 0x70
 8003952:	d101      	bne.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003954:	2301      	movs	r3, #1
 8003956:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f023 0207 	bic.w	r2, r3, #7
 8003960:	4909      	ldr	r1, [pc, #36]	; (8003988 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003968:	4b07      	ldr	r3, [pc, #28]	; (8003988 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	429a      	cmp	r2, r3
 8003974:	d001      	beq.n	800397a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40021000 	.word	0x40021000
 8003988:	40022000 	.word	0x40022000

0800398c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e095      	b.n	8003aca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d108      	bne.n	80039b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ae:	d009      	beq.n	80039c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	61da      	str	r2, [r3, #28]
 80039b6:	e005      	b.n	80039c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fe fcec 	bl	80023bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a04:	d902      	bls.n	8003a0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	e002      	b.n	8003a12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a1a:	d007      	beq.n	8003a2c <HAL_SPI_Init+0xa0>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a24:	d002      	beq.n	8003a2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6e:	ea42 0103 	orr.w	r1, r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	0c1b      	lsrs	r3, r3, #16
 8003a88:	f003 0204 	and.w	r2, r3, #4
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003aa8:	ea42 0103 	orr.w	r1, r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b088      	sub	sp, #32
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	603b      	str	r3, [r7, #0]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_SPI_Transmit+0x22>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e15f      	b.n	8003db4 <HAL_SPI_Transmit+0x2e2>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003afc:	f7fe fe62 	bl	80027c4 <HAL_GetTick>
 8003b00:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d002      	beq.n	8003b18 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
 8003b14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b16:	e148      	b.n	8003daa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_SPI_Transmit+0x52>
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b28:	e13f      	b.n	8003daa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	88fa      	ldrh	r2, [r7, #6]
 8003b42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	88fa      	ldrh	r2, [r7, #6]
 8003b48:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b74:	d10f      	bne.n	8003b96 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba0:	2b40      	cmp	r3, #64	; 0x40
 8003ba2:	d007      	beq.n	8003bb4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bbc:	d94f      	bls.n	8003c5e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_SPI_Transmit+0xfa>
 8003bc6:	8afb      	ldrh	r3, [r7, #22]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d142      	bne.n	8003c52 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	881a      	ldrh	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bdc:	1c9a      	adds	r2, r3, #2
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bf0:	e02f      	b.n	8003c52 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d112      	bne.n	8003c26 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	881a      	ldrh	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	1c9a      	adds	r2, r3, #2
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c24:	e015      	b.n	8003c52 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c26:	f7fe fdcd 	bl	80027c4 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d803      	bhi.n	8003c3e <HAL_SPI_Transmit+0x16c>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3c:	d102      	bne.n	8003c44 <HAL_SPI_Transmit+0x172>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d106      	bne.n	8003c52 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003c50:	e0ab      	b.n	8003daa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1ca      	bne.n	8003bf2 <HAL_SPI_Transmit+0x120>
 8003c5c:	e080      	b.n	8003d60 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_SPI_Transmit+0x19a>
 8003c66:	8afb      	ldrh	r3, [r7, #22]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d174      	bne.n	8003d56 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d912      	bls.n	8003c9c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	881a      	ldrh	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	1c9a      	adds	r2, r3, #2
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b02      	subs	r3, #2
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c9a:	e05c      	b.n	8003d56 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	7812      	ldrb	r2, [r2, #0]
 8003ca8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003cc2:	e048      	b.n	8003d56 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d12b      	bne.n	8003d2a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d912      	bls.n	8003d02 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	881a      	ldrh	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	1c9a      	adds	r2, r3, #2
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b02      	subs	r3, #2
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d00:	e029      	b.n	8003d56 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	7812      	ldrb	r2, [r2, #0]
 8003d0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d28:	e015      	b.n	8003d56 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d2a:	f7fe fd4b 	bl	80027c4 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d803      	bhi.n	8003d42 <HAL_SPI_Transmit+0x270>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d102      	bne.n	8003d48 <HAL_SPI_Transmit+0x276>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003d54:	e029      	b.n	8003daa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1b1      	bne.n	8003cc4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	6839      	ldr	r1, [r7, #0]
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 fb69 	bl	800443c <SPI_EndRxTxTransaction>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10a      	bne.n	8003d94 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d7e:	2300      	movs	r3, #0
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	77fb      	strb	r3, [r7, #31]
 8003da0:	e003      	b.n	8003daa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003db2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3720      	adds	r7, #32
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	; 0x28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_SPI_TransmitReceive+0x26>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e20a      	b.n	80041f8 <HAL_SPI_TransmitReceive+0x43c>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dea:	f7fe fceb 	bl	80027c4 <HAL_GetTick>
 8003dee:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003df6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003dfe:	887b      	ldrh	r3, [r7, #2]
 8003e00:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003e02:	887b      	ldrh	r3, [r7, #2]
 8003e04:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e06:	7efb      	ldrb	r3, [r7, #27]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d00e      	beq.n	8003e2a <HAL_SPI_TransmitReceive+0x6e>
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e12:	d106      	bne.n	8003e22 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d102      	bne.n	8003e22 <HAL_SPI_TransmitReceive+0x66>
 8003e1c:	7efb      	ldrb	r3, [r7, #27]
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d003      	beq.n	8003e2a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
 8003e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003e28:	e1e0      	b.n	80041ec <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_SPI_TransmitReceive+0x80>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_SPI_TransmitReceive+0x80>
 8003e36:	887b      	ldrh	r3, [r7, #2]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d103      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003e42:	e1d3      	b.n	80041ec <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d003      	beq.n	8003e58 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2205      	movs	r2, #5
 8003e54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	887a      	ldrh	r2, [r7, #2]
 8003e68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	887a      	ldrh	r2, [r7, #2]
 8003e70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	887a      	ldrh	r2, [r7, #2]
 8003e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	887a      	ldrh	r2, [r7, #2]
 8003e84:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e9a:	d802      	bhi.n	8003ea2 <HAL_SPI_TransmitReceive+0xe6>
 8003e9c:	8a3b      	ldrh	r3, [r7, #16]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d908      	bls.n	8003eb4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	e007      	b.n	8003ec4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ec2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ece:	2b40      	cmp	r3, #64	; 0x40
 8003ed0:	d007      	beq.n	8003ee2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003eea:	f240 8081 	bls.w	8003ff0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_SPI_TransmitReceive+0x140>
 8003ef6:	8a7b      	ldrh	r3, [r7, #18]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d16d      	bne.n	8003fd8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	881a      	ldrh	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	1c9a      	adds	r2, r3, #2
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f20:	e05a      	b.n	8003fd8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d11b      	bne.n	8003f68 <HAL_SPI_TransmitReceive+0x1ac>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d016      	beq.n	8003f68 <HAL_SPI_TransmitReceive+0x1ac>
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d113      	bne.n	8003f68 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	881a      	ldrh	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	1c9a      	adds	r2, r3, #2
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d11c      	bne.n	8003fb0 <HAL_SPI_TransmitReceive+0x1f4>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d016      	beq.n	8003fb0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	b292      	uxth	r2, r2
 8003f8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	1c9a      	adds	r2, r3, #2
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fac:	2301      	movs	r3, #1
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fb0:	f7fe fc08 	bl	80027c4 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d80b      	bhi.n	8003fd8 <HAL_SPI_TransmitReceive+0x21c>
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc6:	d007      	beq.n	8003fd8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003fd6:	e109      	b.n	80041ec <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d19f      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x166>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d199      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x166>
 8003fee:	e0e3      	b.n	80041b8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_SPI_TransmitReceive+0x244>
 8003ff8:	8a7b      	ldrh	r3, [r7, #18]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	f040 80cf 	bne.w	800419e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d912      	bls.n	8004030 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	881a      	ldrh	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	1c9a      	adds	r2, r3, #2
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b02      	subs	r3, #2
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800402e:	e0b6      	b.n	800419e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	7812      	ldrb	r2, [r2, #0]
 800403c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004056:	e0a2      	b.n	800419e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b02      	cmp	r3, #2
 8004064:	d134      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x314>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d02f      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0x314>
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	2b01      	cmp	r3, #1
 8004074:	d12c      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b01      	cmp	r3, #1
 800407e:	d912      	bls.n	80040a6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	881a      	ldrh	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	1c9a      	adds	r2, r3, #2
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b02      	subs	r3, #2
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040a4:	e012      	b.n	80040cc <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	330c      	adds	r3, #12
 80040b0:	7812      	ldrb	r2, [r2, #0]
 80040b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d148      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x3b4>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d042      	beq.n	8004170 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d923      	bls.n	800413e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	b292      	uxth	r2, r2
 8004102:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	1c9a      	adds	r2, r3, #2
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b02      	subs	r3, #2
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	d81f      	bhi.n	800416c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800413a:	605a      	str	r2, [r3, #4]
 800413c:	e016      	b.n	800416c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f103 020c 	add.w	r2, r3, #12
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	7812      	ldrb	r2, [r2, #0]
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800416c:	2301      	movs	r3, #1
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004170:	f7fe fb28 	bl	80027c4 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800417c:	429a      	cmp	r2, r3
 800417e:	d803      	bhi.n	8004188 <HAL_SPI_TransmitReceive+0x3cc>
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d102      	bne.n	800418e <HAL_SPI_TransmitReceive+0x3d2>
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	2b00      	cmp	r3, #0
 800418c:	d107      	bne.n	800419e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800419c:	e026      	b.n	80041ec <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f47f af57 	bne.w	8004058 <HAL_SPI_TransmitReceive+0x29c>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f47f af50 	bne.w	8004058 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f93d 	bl	800443c <SPI_EndRxTxTransaction>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e2:	e003      	b.n	80041ec <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80041f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3728      	adds	r7, #40	; 0x28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004210:	f7fe fad8 	bl	80027c4 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	4413      	add	r3, r2
 800421e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004220:	f7fe fad0 	bl	80027c4 <HAL_GetTick>
 8004224:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004226:	4b39      	ldr	r3, [pc, #228]	; (800430c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	015b      	lsls	r3, r3, #5
 800422c:	0d1b      	lsrs	r3, r3, #20
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	fb02 f303 	mul.w	r3, r2, r3
 8004234:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004236:	e054      	b.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d050      	beq.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004240:	f7fe fac0 	bl	80027c4 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	429a      	cmp	r2, r3
 800424e:	d902      	bls.n	8004256 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d13d      	bne.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004264:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800426e:	d111      	bne.n	8004294 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004278:	d004      	beq.n	8004284 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004282:	d107      	bne.n	8004294 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004292:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800429c:	d10f      	bne.n	80042be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e017      	b.n	8004302 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	3b01      	subs	r3, #1
 80042e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4013      	ands	r3, r2
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	bf0c      	ite	eq
 80042f2:	2301      	moveq	r3, #1
 80042f4:	2300      	movne	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d19b      	bne.n	8004238 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	2000000c 	.word	0x2000000c

08004310 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	; 0x28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004322:	f7fe fa4f 	bl	80027c4 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	4413      	add	r3, r2
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004332:	f7fe fa47 	bl	80027c4 <HAL_GetTick>
 8004336:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004340:	4b3d      	ldr	r3, [pc, #244]	; (8004438 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	00da      	lsls	r2, r3, #3
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	0d1b      	lsrs	r3, r3, #20
 8004350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004358:	e060      	b.n	800441c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004360:	d107      	bne.n	8004372 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d104      	bne.n	8004372 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004370:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004378:	d050      	beq.n	800441c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800437a:	f7fe fa23 	bl	80027c4 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004386:	429a      	cmp	r2, r3
 8004388:	d902      	bls.n	8004390 <SPI_WaitFifoStateUntilTimeout+0x80>
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	2b00      	cmp	r3, #0
 800438e:	d13d      	bne.n	800440c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800439e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a8:	d111      	bne.n	80043ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b2:	d004      	beq.n	80043be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043bc:	d107      	bne.n	80043ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d6:	d10f      	bne.n	80043f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e010      	b.n	800442e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	3b01      	subs	r3, #1
 800441a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4013      	ands	r3, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	d196      	bne.n	800435a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3728      	adds	r7, #40	; 0x28
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	2000000c 	.word	0x2000000c

0800443c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af02      	add	r7, sp, #8
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2200      	movs	r2, #0
 8004450:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f7ff ff5b 	bl	8004310 <SPI_WaitFifoStateUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d007      	beq.n	8004470 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004464:	f043 0220 	orr.w	r2, r3, #32
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e027      	b.n	80044c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2200      	movs	r2, #0
 8004478:	2180      	movs	r1, #128	; 0x80
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f7ff fec0 	bl	8004200 <SPI_WaitFlagStateUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d007      	beq.n	8004496 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448a:	f043 0220 	orr.w	r2, r3, #32
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e014      	b.n	80044c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2200      	movs	r2, #0
 800449e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f7ff ff34 	bl	8004310 <SPI_WaitFifoStateUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b2:	f043 0220 	orr.w	r2, r3, #32
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e000      	b.n	80044c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <__NVIC_EnableIRQ>:
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	db0b      	blt.n	80044f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	f003 021f 	and.w	r2, r3, #31
 80044e0:	4907      	ldr	r1, [pc, #28]	; (8004500 <__NVIC_EnableIRQ+0x38>)
 80044e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	2001      	movs	r0, #1
 80044ea:	fa00 f202 	lsl.w	r2, r0, r2
 80044ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	e000e100 	.word	0xe000e100

08004504 <__NVIC_SetPriority>:
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	6039      	str	r1, [r7, #0]
 800450e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004514:	2b00      	cmp	r3, #0
 8004516:	db0a      	blt.n	800452e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	b2da      	uxtb	r2, r3
 800451c:	490c      	ldr	r1, [pc, #48]	; (8004550 <__NVIC_SetPriority+0x4c>)
 800451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004522:	0112      	lsls	r2, r2, #4
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	440b      	add	r3, r1
 8004528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800452c:	e00a      	b.n	8004544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	b2da      	uxtb	r2, r3
 8004532:	4908      	ldr	r1, [pc, #32]	; (8004554 <__NVIC_SetPriority+0x50>)
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	3b04      	subs	r3, #4
 800453c:	0112      	lsls	r2, r2, #4
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	440b      	add	r3, r1
 8004542:	761a      	strb	r2, [r3, #24]
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	e000e100 	.word	0xe000e100
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <adc_MIC_config>:
/**
 * @Brief ADC MIC(with OPAMP output as input) configuration
 * PA3(A2)->ADC12_IN8 is the OPAMP output
 */
void adc_MIC_config(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
	//Enable ADC clock
	RCC->AHB2ENR |= (RCC_AHB2ENR_ADCEN);
 800455c:	4b58      	ldr	r3, [pc, #352]	; (80046c0 <adc_MIC_config+0x168>)
 800455e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004560:	4a57      	ldr	r2, [pc, #348]	; (80046c0 <adc_MIC_config+0x168>)
 8004562:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004566:	64d3      	str	r3, [r2, #76]	; 0x4c
	//Select HCLK/1 as ADC clock source
	ADC1_COMMON->CCR &=~(ADC_CCR_CKMODE);
 8004568:	4b56      	ldr	r3, [pc, #344]	; (80046c4 <adc_MIC_config+0x16c>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	4a55      	ldr	r2, [pc, #340]	; (80046c4 <adc_MIC_config+0x16c>)
 800456e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004572:	6093      	str	r3, [r2, #8]
	ADC1_COMMON->CCR |= (ADC_CCR_CKMODE_0);
 8004574:	4b53      	ldr	r3, [pc, #332]	; (80046c4 <adc_MIC_config+0x16c>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4a52      	ldr	r2, [pc, #328]	; (80046c4 <adc_MIC_config+0x16c>)
 800457a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457e:	6093      	str	r3, [r2, #8]
	//Exit the Deep-power-down mode
	ADC1->CR &=~ (ADC_CR_DEEPPWD);
 8004580:	4b51      	ldr	r3, [pc, #324]	; (80046c8 <adc_MIC_config+0x170>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	4a50      	ldr	r2, [pc, #320]	; (80046c8 <adc_MIC_config+0x170>)
 8004586:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800458a:	6093      	str	r3, [r2, #8]
	//Enable the ADC internal voltage regulator
	ADC1->CR |= (ADC_CR_ADVREGEN);
 800458c:	4b4e      	ldr	r3, [pc, #312]	; (80046c8 <adc_MIC_config+0x170>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	4a4d      	ldr	r2, [pc, #308]	; (80046c8 <adc_MIC_config+0x170>)
 8004592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004596:	6093      	str	r3, [r2, #8]
	//Wait for the startup time of the ADC voltage regulator
	adc_ADCVREG_STUP_delay();
 8004598:	f000 f8de 	bl	8004758 <adc_ADCVREG_STUP_delay>
	////ADC Calibration
	//Single-Ended Input mode calibration
	ADC1->CR &=~ (ADC_CR_ADCALDIF);
 800459c:	4b4a      	ldr	r3, [pc, #296]	; (80046c8 <adc_MIC_config+0x170>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	4a49      	ldr	r2, [pc, #292]	; (80046c8 <adc_MIC_config+0x170>)
 80045a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045a6:	6093      	str	r3, [r2, #8]
	//Calibration start
	ADC1->CR |= (ADC_CR_ADCAL);
 80045a8:	4b47      	ldr	r3, [pc, #284]	; (80046c8 <adc_MIC_config+0x170>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	4a46      	ldr	r2, [pc, #280]	; (80046c8 <adc_MIC_config+0x170>)
 80045ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045b2:	6093      	str	r3, [r2, #8]
	//Wait until calibration is stopped
	while (ADC1->CR & ADC_CR_ADCAL);
 80045b4:	bf00      	nop
 80045b6:	4b44      	ldr	r3, [pc, #272]	; (80046c8 <adc_MIC_config+0x170>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	dbfb      	blt.n	80045b6 <adc_MIC_config+0x5e>
	//Right Align Mode
	ADC1->CFGR &=~ (ADC_CFGR_ALIGN);
 80045be:	4b42      	ldr	r3, [pc, #264]	; (80046c8 <adc_MIC_config+0x170>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	4a41      	ldr	r2, [pc, #260]	; (80046c8 <adc_MIC_config+0x170>)
 80045c4:	f023 0320 	bic.w	r3, r3, #32
 80045c8:	60d3      	str	r3, [r2, #12]
	//Single Conversion Mode
	ADC1->CFGR &=~ (ADC_CFGR_CONT);
 80045ca:	4b3f      	ldr	r3, [pc, #252]	; (80046c8 <adc_MIC_config+0x170>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	4a3e      	ldr	r2, [pc, #248]	; (80046c8 <adc_MIC_config+0x170>)
 80045d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045d4:	60d3      	str	r3, [r2, #12]
	//-----Sample time to 24.5 ADC CLK Cycles-----//
	//Tconv= (24.5+12.5) ADC CLK Cycles = 37 ADC clock cycles = 513.88ns
	//Total Tconv= Tconv *4= 2.055us(with N=4 oversampling)
	//Oversampled max frequency=486.49kHz
	ADC1->SMPR1 &=~ (ADC_SMPR1_SMP8);
 80045d6:	4b3c      	ldr	r3, [pc, #240]	; (80046c8 <adc_MIC_config+0x170>)
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	4a3b      	ldr	r2, [pc, #236]	; (80046c8 <adc_MIC_config+0x170>)
 80045dc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80045e0:	6153      	str	r3, [r2, #20]
	ADC1->SMPR1 |= (0x3UL << ADC_SMPR1_SMP8_Pos);
 80045e2:	4b39      	ldr	r3, [pc, #228]	; (80046c8 <adc_MIC_config+0x170>)
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	4a38      	ldr	r2, [pc, #224]	; (80046c8 <adc_MIC_config+0x170>)
 80045e8:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80045ec:	6153      	str	r3, [r2, #20]
	//Single-channel mode
	ADC1->SQR1 &=~(ADC_SQR1_L);
 80045ee:	4b36      	ldr	r3, [pc, #216]	; (80046c8 <adc_MIC_config+0x170>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	4a35      	ldr	r2, [pc, #212]	; (80046c8 <adc_MIC_config+0x170>)
 80045f4:	f023 030f 	bic.w	r3, r3, #15
 80045f8:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1  &=~ (ADC_SQR1_SQ1);
 80045fa:	4b33      	ldr	r3, [pc, #204]	; (80046c8 <adc_MIC_config+0x170>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	4a32      	ldr	r2, [pc, #200]	; (80046c8 <adc_MIC_config+0x170>)
 8004600:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8004604:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1  |= (0x8UL << (6U));
 8004606:	4b30      	ldr	r3, [pc, #192]	; (80046c8 <adc_MIC_config+0x170>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	4a2f      	ldr	r2, [pc, #188]	; (80046c8 <adc_MIC_config+0x170>)
 800460c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004610:	6313      	str	r3, [r2, #48]	; 0x30
	//----------------Oversampling Code-----------------------------//
	//Enable Regular Oversampled Mode
	ADC1->CFGR2 |= (ADC_CFGR2_ROVSE);
 8004612:	4b2d      	ldr	r3, [pc, #180]	; (80046c8 <adc_MIC_config+0x170>)
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	4a2c      	ldr	r2, [pc, #176]	; (80046c8 <adc_MIC_config+0x170>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	6113      	str	r3, [r2, #16]
	//Oversampling Ratio to 4 (no bit shifting)
	ADC1->CFGR2 &=~ (ADC_CFGR2_OVSR);
 800461e:	4b2a      	ldr	r3, [pc, #168]	; (80046c8 <adc_MIC_config+0x170>)
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	4a29      	ldr	r2, [pc, #164]	; (80046c8 <adc_MIC_config+0x170>)
 8004624:	f023 031c 	bic.w	r3, r3, #28
 8004628:	6113      	str	r3, [r2, #16]
	ADC1->CFGR2 |= (ADC_CFGR2_OVSR_0);
 800462a:	4b27      	ldr	r3, [pc, #156]	; (80046c8 <adc_MIC_config+0x170>)
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	4a26      	ldr	r2, [pc, #152]	; (80046c8 <adc_MIC_config+0x170>)
 8004630:	f043 0304 	orr.w	r3, r3, #4
 8004634:	6113      	str	r3, [r2, #16]
	//-------------------End of Oversampling Code------------------//
	//TIM6 TRGO Trigger
	ADC1->CFGR &=~ (ADC_CFGR_EXTEN);
 8004636:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <adc_MIC_config+0x170>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	4a23      	ldr	r2, [pc, #140]	; (80046c8 <adc_MIC_config+0x170>)
 800463c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004640:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= (ADC_CFGR_EXTEN_0);
 8004642:	4b21      	ldr	r3, [pc, #132]	; (80046c8 <adc_MIC_config+0x170>)
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	4a20      	ldr	r2, [pc, #128]	; (80046c8 <adc_MIC_config+0x170>)
 8004648:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800464c:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR &=~ (ADC_CFGR_EXTSEL);
 800464e:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <adc_MIC_config+0x170>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <adc_MIC_config+0x170>)
 8004654:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 8004658:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= (0xDUL << ADC_CFGR_EXTSEL_Pos);//Event 13->TIM6_TRGO selected
 800465a:	4b1b      	ldr	r3, [pc, #108]	; (80046c8 <adc_MIC_config+0x170>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	4a1a      	ldr	r2, [pc, #104]	; (80046c8 <adc_MIC_config+0x170>)
 8004660:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 8004664:	60d3      	str	r3, [r2, #12]
	//DMA Circular Mode
	ADC1->CFGR |= (ADC_CFGR_DMACFG);
 8004666:	4b18      	ldr	r3, [pc, #96]	; (80046c8 <adc_MIC_config+0x170>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	4a17      	ldr	r2, [pc, #92]	; (80046c8 <adc_MIC_config+0x170>)
 800466c:	f043 0302 	orr.w	r3, r3, #2
 8004670:	60d3      	str	r3, [r2, #12]
	//Enable DMA-ADC registers
	ADC1->CFGR |= (ADC_CFGR_DMAEN);
 8004672:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <adc_MIC_config+0x170>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <adc_MIC_config+0x170>)
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	60d3      	str	r3, [r2, #12]
	//Clear the ADC ready flag(It is cleared by writing 1 to it.)
	ADC1->ISR |=(ADC_ISR_ADRDY);
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <adc_MIC_config+0x170>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a11      	ldr	r2, [pc, #68]	; (80046c8 <adc_MIC_config+0x170>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	6013      	str	r3, [r2, #0]
	//Enable ADC
	ADC1->CR |=(ADC_CR_ADEN);
 800468a:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <adc_MIC_config+0x170>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	4a0e      	ldr	r2, [pc, #56]	; (80046c8 <adc_MIC_config+0x170>)
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	6093      	str	r3, [r2, #8]
	//Wait until ADC is ready
	while (!(ADC1->CR & ADC_CR_ADEN));
 8004696:	bf00      	nop
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <adc_MIC_config+0x170>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f9      	beq.n	8004698 <adc_MIC_config+0x140>
	//Clear the ADC ready flag again
	ADC1->ISR |=(ADC_ISR_ADRDY);
 80046a4:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <adc_MIC_config+0x170>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a07      	ldr	r2, [pc, #28]	; (80046c8 <adc_MIC_config+0x170>)
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	6013      	str	r3, [r2, #0]
	//ADC begin
	ADC1->CR |=(ADC_CR_ADSTART);
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <adc_MIC_config+0x170>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4a04      	ldr	r2, [pc, #16]	; (80046c8 <adc_MIC_config+0x170>)
 80046b6:	f043 0304 	orr.w	r3, r3, #4
 80046ba:	6093      	str	r3, [r2, #8]
}
 80046bc:	bf00      	nop
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40021000 	.word	0x40021000
 80046c4:	50040300 	.word	0x50040300
 80046c8:	50040000 	.word	0x50040000

080046cc <adc_MIC_DMA_config>:

/**
 * @Brief ADC MIC DMA configuration
 */
void adc_MIC_DMA_config(uint16_t *buffer, uint16_t size) {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	460b      	mov	r3, r1
 80046d6:	807b      	strh	r3, [r7, #2]
    // Habilitar reloj para DMA1
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 80046d8:	4b1c      	ldr	r3, [pc, #112]	; (800474c <adc_MIC_DMA_config+0x80>)
 80046da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046dc:	4a1b      	ldr	r2, [pc, #108]	; (800474c <adc_MIC_DMA_config+0x80>)
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	6493      	str	r3, [r2, #72]	; 0x48
    
    // Desactivar DMA1 Channel 1
    DMA1_Channel1->CCR &= ~(DMA_CCR_EN);
 80046e4:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <adc_MIC_DMA_config+0x84>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a19      	ldr	r2, [pc, #100]	; (8004750 <adc_MIC_DMA_config+0x84>)
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	6013      	str	r3, [r2, #0]
    
    // Esperar a que DMA esté desactivado
    while(DMA1_Channel1->CCR & DMA_CCR_EN);
 80046f0:	bf00      	nop
 80046f2:	4b17      	ldr	r3, [pc, #92]	; (8004750 <adc_MIC_DMA_config+0x84>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f9      	bne.n	80046f2 <adc_MIC_DMA_config+0x26>
    
    // Configurar la dirección de periférico (registro de datos del ADC)
    DMA1_Channel1->CPAR = (uint32_t)&ADC1->DR;
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <adc_MIC_DMA_config+0x84>)
 8004700:	4a14      	ldr	r2, [pc, #80]	; (8004754 <adc_MIC_DMA_config+0x88>)
 8004702:	609a      	str	r2, [r3, #8]
    
    // Configurar la dirección de memoria (buffer)
    DMA1_Channel1->CMAR = (uint32_t)buffer;
 8004704:	4a12      	ldr	r2, [pc, #72]	; (8004750 <adc_MIC_DMA_config+0x84>)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60d3      	str	r3, [r2, #12]
    
    // Configurar cantidad de datos a transferir (la mitad porque ahora cada valor ocupa 4 bytes)
    DMA1_Channel1->CNDTR = size / 2;
 800470a:	887b      	ldrh	r3, [r7, #2]
 800470c:	085b      	lsrs	r3, r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <adc_MIC_DMA_config+0x84>)
 8004712:	605a      	str	r2, [r3, #4]
    
    // Configurar DMA con la nueva configuración
    DMA1_Channel1->CCR = 0;
 8004714:	4b0e      	ldr	r3, [pc, #56]	; (8004750 <adc_MIC_DMA_config+0x84>)
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
    DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0  |  // Periférico: Half-word (16 bits)
 800471a:	4b0d      	ldr	r3, [pc, #52]	; (8004750 <adc_MIC_DMA_config+0x84>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a0c      	ldr	r2, [pc, #48]	; (8004750 <adc_MIC_DMA_config+0x84>)
 8004720:	f443 5326 	orr.w	r3, r3, #10624	; 0x2980
 8004724:	f043 0326 	orr.w	r3, r3, #38	; 0x26
 8004728:	6013      	str	r3, [r2, #0]
                          DMA_CCR_PL_1     |  // Alta prioridad
                          DMA_CCR_HTIE     |  // Habilitar interrupción de media transferencia
                          DMA_CCR_TCIE;       // Habilitar interrupción de transferencia completa
    
    // Habilitar interrupción DMA en NVIC
    NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 800472a:	2100      	movs	r1, #0
 800472c:	200b      	movs	r0, #11
 800472e:	f7ff fee9 	bl	8004504 <__NVIC_SetPriority>
    NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004732:	200b      	movs	r0, #11
 8004734:	f7ff fec8 	bl	80044c8 <__NVIC_EnableIRQ>
    
    // Activar DMA
    DMA1_Channel1->CCR |= DMA_CCR_EN;
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <adc_MIC_DMA_config+0x84>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a04      	ldr	r2, [pc, #16]	; (8004750 <adc_MIC_DMA_config+0x84>)
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	6013      	str	r3, [r2, #0]
}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40021000 	.word	0x40021000
 8004750:	40020008 	.word	0x40020008
 8004754:	50040040 	.word	0x50040040

08004758 <adc_ADCVREG_STUP_delay>:
/*
 * @brief delay for ADC voltage regulator start-up time(20us)
 * A 80Mhz->CM=12.5ns->CM x 2000=25us>20us
 */
void adc_ADCVREG_STUP_delay(void)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
	volatile uint32_t i;
	for (i=0;i<2000;i++) {}
 800475e:	2300      	movs	r3, #0
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	e002      	b.n	800476a <adc_ADCVREG_STUP_delay+0x12>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3301      	adds	r3, #1
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004770:	d3f8      	bcc.n	8004764 <adc_ADCVREG_STUP_delay+0xc>
}
 8004772:	bf00      	nop
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <__NVIC_EnableIRQ>:
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800478a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478e:	2b00      	cmp	r3, #0
 8004790:	db0b      	blt.n	80047aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	f003 021f 	and.w	r2, r3, #31
 8004798:	4907      	ldr	r1, [pc, #28]	; (80047b8 <__NVIC_EnableIRQ+0x38>)
 800479a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	2001      	movs	r0, #1
 80047a2:	fa00 f202 	lsl.w	r2, r0, r2
 80047a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	e000e100 	.word	0xe000e100

080047bc <__NVIC_SetPriority>:
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	6039      	str	r1, [r7, #0]
 80047c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	db0a      	blt.n	80047e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	490c      	ldr	r1, [pc, #48]	; (8004808 <__NVIC_SetPriority+0x4c>)
 80047d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047da:	0112      	lsls	r2, r2, #4
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	440b      	add	r3, r1
 80047e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80047e4:	e00a      	b.n	80047fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	4908      	ldr	r1, [pc, #32]	; (800480c <__NVIC_SetPriority+0x50>)
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	3b04      	subs	r3, #4
 80047f4:	0112      	lsls	r2, r2, #4
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	440b      	add	r3, r1
 80047fa:	761a      	strb	r2, [r3, #24]
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	e000e100 	.word	0xe000e100
 800480c:	e000ed00 	.word	0xe000ed00

08004810 <exti_buttonConfig>:

/*
 * @brief Push Button EXTI configuration (PA12->D2)
 */
void exti_buttonConfig(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  //Enable GPIO port A clock
  RCC->AHB2ENR |=(RCC_AHB2ENR_GPIOAEN);
 8004814:	4b22      	ldr	r3, [pc, #136]	; (80048a0 <exti_buttonConfig+0x90>)
 8004816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004818:	4a21      	ldr	r2, [pc, #132]	; (80048a0 <exti_buttonConfig+0x90>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	64d3      	str	r3, [r2, #76]	; 0x4c
  //Enable mode Input with Internal Pull-Up
  GPIOA->MODER &= ~(GPIO_MODER_MODE12);
 8004820:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800482a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800482e:	6013      	str	r3, [r2, #0]
  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD12);
 8004830:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800483a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800483e:	60d3      	str	r3, [r2, #12]
  GPIOA->PUPDR |= (GPIO_PUPDR_PUPD12_0);
 8004840:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800484a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800484e:	60d3      	str	r3, [r2, #12]
  //System configuration controller clock enable
  RCC->APB2ENR |= (RCC_APB2ENR_SYSCFGEN);
 8004850:	4b13      	ldr	r3, [pc, #76]	; (80048a0 <exti_buttonConfig+0x90>)
 8004852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004854:	4a12      	ldr	r2, [pc, #72]	; (80048a0 <exti_buttonConfig+0x90>)
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	6613      	str	r3, [r2, #96]	; 0x60
  //PA12 maps EXTI12
  SYSCFG->EXTICR[3] &= ~(SYSCFG_EXTICR4_EXTI12);
 800485c:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <exti_buttonConfig+0x94>)
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	4a10      	ldr	r2, [pc, #64]	; (80048a4 <exti_buttonConfig+0x94>)
 8004862:	f023 0307 	bic.w	r3, r3, #7
 8004866:	6153      	str	r3, [r2, #20]
  //Unblock EXTI0 interrupt
  EXTI->IMR1 |= (EXTI_IMR1_IM12);
 8004868:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <exti_buttonConfig+0x98>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a0e      	ldr	r2, [pc, #56]	; (80048a8 <exti_buttonConfig+0x98>)
 800486e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004872:	6013      	str	r3, [r2, #0]
  //Enable Rising Edge Only
  EXTI->RTSR1 |= (EXTI_RTSR1_RT12);
 8004874:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <exti_buttonConfig+0x98>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	4a0b      	ldr	r2, [pc, #44]	; (80048a8 <exti_buttonConfig+0x98>)
 800487a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800487e:	6093      	str	r3, [r2, #8]
  EXTI->FTSR1 &= ~(EXTI_FTSR1_FT12);
 8004880:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <exti_buttonConfig+0x98>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4a08      	ldr	r2, [pc, #32]	; (80048a8 <exti_buttonConfig+0x98>)
 8004886:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800488a:	60d3      	str	r3, [r2, #12]
  //Minimum Priority Level
  NVIC_SetPriority(EXTI15_10_IRQn,15);
 800488c:	210f      	movs	r1, #15
 800488e:	2028      	movs	r0, #40	; 0x28
 8004890:	f7ff ff94 	bl	80047bc <__NVIC_SetPriority>
  //Enable interrupt
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004894:	2028      	movs	r0, #40	; 0x28
 8004896:	f7ff ff73 	bl	8004780 <__NVIC_EnableIRQ>


}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40010000 	.word	0x40010000
 80048a8:	40010400 	.word	0x40010400

080048ac <gpioPeriphClockControl>:
 */

#include <gpio.h>

// clock control api for GPIO
void gpioPeriphClockControl(GPIO_TypeDef *pGPIOx , uint8_t EnorDi) {
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d12b      	bne.n	8004916 <gpioPeriphClockControl+0x6a>

		if (pGPIOx == GPIOA) {
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80048c4:	d106      	bne.n	80048d4 <gpioPeriphClockControl+0x28>
			GPIOA_CLOCK_ENABLE();
 80048c6:	4b2c      	ldr	r3, [pc, #176]	; (8004978 <gpioPeriphClockControl+0xcc>)
 80048c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ca:	4a2b      	ldr	r2, [pc, #172]	; (8004978 <gpioPeriphClockControl+0xcc>)
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	64d3      	str	r3, [r2, #76]	; 0x4c
			GPIOC_CLOCK_DISABLE();
		}else if (pGPIOx == GPIOH){
			GPIOH_CLOCK_DISABLE();
		}
	}
}
 80048d2:	e04b      	b.n	800496c <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOB) {
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a29      	ldr	r2, [pc, #164]	; (800497c <gpioPeriphClockControl+0xd0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d106      	bne.n	80048ea <gpioPeriphClockControl+0x3e>
			GPIOB_CLOCK_ENABLE();
 80048dc:	4b26      	ldr	r3, [pc, #152]	; (8004978 <gpioPeriphClockControl+0xcc>)
 80048de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e0:	4a25      	ldr	r2, [pc, #148]	; (8004978 <gpioPeriphClockControl+0xcc>)
 80048e2:	f043 0302 	orr.w	r3, r3, #2
 80048e6:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80048e8:	e040      	b.n	800496c <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOC){
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a24      	ldr	r2, [pc, #144]	; (8004980 <gpioPeriphClockControl+0xd4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d106      	bne.n	8004900 <gpioPeriphClockControl+0x54>
			GPIOC_CLOCK_ENABLE();
 80048f2:	4b21      	ldr	r3, [pc, #132]	; (8004978 <gpioPeriphClockControl+0xcc>)
 80048f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f6:	4a20      	ldr	r2, [pc, #128]	; (8004978 <gpioPeriphClockControl+0xcc>)
 80048f8:	f043 0304 	orr.w	r3, r3, #4
 80048fc:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80048fe:	e035      	b.n	800496c <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOH){
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a20      	ldr	r2, [pc, #128]	; (8004984 <gpioPeriphClockControl+0xd8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d131      	bne.n	800496c <gpioPeriphClockControl+0xc0>
			GPIOH_CLOCK_ENABLE();
 8004908:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <gpioPeriphClockControl+0xcc>)
 800490a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490c:	4a1a      	ldr	r2, [pc, #104]	; (8004978 <gpioPeriphClockControl+0xcc>)
 800490e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004912:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8004914:	e02a      	b.n	800496c <gpioPeriphClockControl+0xc0>
		if (pGPIOx == GPIOA) {
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800491c:	d106      	bne.n	800492c <gpioPeriphClockControl+0x80>
			GPIOA_CLOCK_DISABLE();
 800491e:	4b16      	ldr	r3, [pc, #88]	; (8004978 <gpioPeriphClockControl+0xcc>)
 8004920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004922:	4a15      	ldr	r2, [pc, #84]	; (8004978 <gpioPeriphClockControl+0xcc>)
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800492a:	e01f      	b.n	800496c <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOB) {
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a13      	ldr	r2, [pc, #76]	; (800497c <gpioPeriphClockControl+0xd0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d106      	bne.n	8004942 <gpioPeriphClockControl+0x96>
			GPIOB_CLOCK_DISABLE();
 8004934:	4b10      	ldr	r3, [pc, #64]	; (8004978 <gpioPeriphClockControl+0xcc>)
 8004936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004938:	4a0f      	ldr	r2, [pc, #60]	; (8004978 <gpioPeriphClockControl+0xcc>)
 800493a:	f023 0302 	bic.w	r3, r3, #2
 800493e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8004940:	e014      	b.n	800496c <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOC){
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <gpioPeriphClockControl+0xd4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d106      	bne.n	8004958 <gpioPeriphClockControl+0xac>
			GPIOC_CLOCK_DISABLE();
 800494a:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <gpioPeriphClockControl+0xcc>)
 800494c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494e:	4a0a      	ldr	r2, [pc, #40]	; (8004978 <gpioPeriphClockControl+0xcc>)
 8004950:	f023 0304 	bic.w	r3, r3, #4
 8004954:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8004956:	e009      	b.n	800496c <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOH){
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <gpioPeriphClockControl+0xd8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d105      	bne.n	800496c <gpioPeriphClockControl+0xc0>
			GPIOH_CLOCK_DISABLE();
 8004960:	4b05      	ldr	r3, [pc, #20]	; (8004978 <gpioPeriphClockControl+0xcc>)
 8004962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004964:	4a04      	ldr	r2, [pc, #16]	; (8004978 <gpioPeriphClockControl+0xcc>)
 8004966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800496a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	40021000 	.word	0x40021000
 800497c:	48000400 	.word	0x48000400
 8004980:	48000800 	.word	0x48000800
 8004984:	48001c00 	.word	0x48001c00

08004988 <gpio_Init>:

// GPIO Initialization
void gpio_Init(GPIO_Handle_t* pNewGPIOPin)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0 ;
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]

	//enable the peripheral clock
	gpioPeriphClockControl(pNewGPIOPin->pGPIOx, ENABLE) ;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2101      	movs	r1, #1
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff ff86 	bl	80048ac <gpioPeriphClockControl>
	// configure the modes of a GPIO pin
	temp = (pNewGPIOPin->pinMode << (2 * pNewGPIOPin->pinNumber)) ;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	795b      	ldrb	r3, [r3, #5]
 80049a4:	461a      	mov	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	791b      	ldrb	r3, [r3, #4]
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	60fb      	str	r3, [r7, #12]
	pNewGPIOPin->pGPIOx->MODER &= ~(0x3 << (2 * pNewGPIOPin->pinNumber) );
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	791b      	ldrb	r3, [r3, #4]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	2103      	movs	r1, #3
 80049c0:	fa01 f303 	lsl.w	r3, r1, r3
 80049c4:	43db      	mvns	r3, r3
 80049c6:	4619      	mov	r1, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	400a      	ands	r2, r1
 80049ce:	601a      	str	r2, [r3, #0]
	pNewGPIOPin->pGPIOx->MODER |= temp ;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6819      	ldr	r1, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	430a      	orrs	r2, r1
 80049de:	601a      	str	r2, [r3, #0]

	temp = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	60fb      	str	r3, [r7, #12]

	// configure the speed
	temp = (pNewGPIOPin->pinSpeed << (2 * pNewGPIOPin->pinNumber) ) ;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	799b      	ldrb	r3, [r3, #6]
 80049e8:	461a      	mov	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	791b      	ldrb	r3, [r3, #4]
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	60fb      	str	r3, [r7, #12]
	pNewGPIOPin->pGPIOx->OSPEEDR  &= ~(0x3 << (2 * pNewGPIOPin->pinNumber)) ;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	791b      	ldrb	r3, [r3, #4]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	2103      	movs	r1, #3
 8004a04:	fa01 f303 	lsl.w	r3, r1, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	400a      	ands	r2, r1
 8004a12:	609a      	str	r2, [r3, #8]
	pNewGPIOPin->pGPIOx->OSPEEDR  |= temp ;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6899      	ldr	r1, [r3, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	609a      	str	r2, [r3, #8]

	temp = 0 ;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]

	// configure the pull up/down control
	temp = (pNewGPIOPin->pinPUPDControl << (2 * pNewGPIOPin->pinNumber) ) ;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	79db      	ldrb	r3, [r3, #7]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	791b      	ldrb	r3, [r3, #4]
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	60fb      	str	r3, [r7, #12]
	pNewGPIOPin->pGPIOx->PUPDR  &= ~(0x3 << (2 * pNewGPIOPin->pinNumber));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	791b      	ldrb	r3, [r3, #4]
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	2103      	movs	r1, #3
 8004a48:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	4619      	mov	r1, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	400a      	ands	r2, r1
 8004a56:	60da      	str	r2, [r3, #12]
	pNewGPIOPin->pGPIOx->PUPDR  |= temp ;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68d9      	ldr	r1, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	60da      	str	r2, [r3, #12]

	temp = 0 ;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]

	// configure the output type
	temp = (pNewGPIOPin->pinOutputType << ( pNewGPIOPin->pinNumber) ) ;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	7a1b      	ldrb	r3, [r3, #8]
 8004a70:	461a      	mov	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	791b      	ldrb	r3, [r3, #4]
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	60fb      	str	r3, [r7, #12]
	pNewGPIOPin->pGPIOx->OTYPER &= ~(0x1 << pNewGPIOPin->pinNumber) ;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	791b      	ldrb	r3, [r3, #4]
 8004a86:	4619      	mov	r1, r3
 8004a88:	2301      	movs	r3, #1
 8004a8a:	408b      	lsls	r3, r1
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	4619      	mov	r1, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	400a      	ands	r2, r1
 8004a96:	605a      	str	r2, [r3, #4]
	pNewGPIOPin->pGPIOx->OTYPER |= temp ;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6859      	ldr	r1, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]

	temp = 0 ;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]

	// configure the alternate functionality
	if (pNewGPIOPin->pinMode == PIN_MODE_ALTFN)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	795b      	ldrb	r3, [r3, #5]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d131      	bne.n	8004b18 <gpio_Init+0x190>
	{
		// configure the alternate function registers
		uint8_t temp1;
		uint8_t temp2;
		temp1 = pNewGPIOPin->pinNumber  / 8 ;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	791b      	ldrb	r3, [r3, #4]
 8004ab8:	08db      	lsrs	r3, r3, #3
 8004aba:	72fb      	strb	r3, [r7, #11]
		temp2 = pNewGPIOPin->pinNumber % 8 ;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	791b      	ldrb	r3, [r3, #4]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	72bb      	strb	r3, [r7, #10]
		pNewGPIOPin->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)) ;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	7afa      	ldrb	r2, [r7, #11]
 8004acc:	3208      	adds	r2, #8
 8004ace:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ad2:	7abb      	ldrb	r3, [r7, #10]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	220f      	movs	r2, #15
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	4618      	mov	r0, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	7afa      	ldrb	r2, [r7, #11]
 8004ae6:	4001      	ands	r1, r0
 8004ae8:	3208      	adds	r2, #8
 8004aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pNewGPIOPin->pGPIOx->AFR[temp1] |= (pNewGPIOPin->pinAltFunMode << (4 * temp2)) ;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	7afa      	ldrb	r2, [r7, #11]
 8004af4:	3208      	adds	r2, #8
 8004af6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	7a5b      	ldrb	r3, [r3, #9]
 8004afe:	461a      	mov	r2, r3
 8004b00:	7abb      	ldrb	r3, [r7, #10]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	4618      	mov	r0, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	7afa      	ldrb	r2, [r7, #11]
 8004b10:	4301      	orrs	r1, r0
 8004b12:	3208      	adds	r2, #8
 8004b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8004b18:	bf00      	nop
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <gpio_LED_config>:

/*
 * Brief LEDs GPIO Configuration PB3(On-board Led 3(Green))
 */
void gpio_LED_config(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  //Enable GPIO port B clock
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 8004b24:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <gpio_LED_config+0x58>)
 8004b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b28:	4a13      	ldr	r2, [pc, #76]	; (8004b78 <gpio_LED_config+0x58>)
 8004b2a:	f043 0302 	orr.w	r3, r3, #2
 8004b2e:	64d3      	str	r3, [r2, #76]	; 0x4c
  //Pin mode to output
  GPIOB->MODER &= ~(GPIO_MODER_MODE3);
 8004b30:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <gpio_LED_config+0x5c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a11      	ldr	r2, [pc, #68]	; (8004b7c <gpio_LED_config+0x5c>)
 8004b36:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004b3a:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= (GPIO_MODER_MODE3_0);
 8004b3c:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <gpio_LED_config+0x5c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a0e      	ldr	r2, [pc, #56]	; (8004b7c <gpio_LED_config+0x5c>)
 8004b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b46:	6013      	str	r3, [r2, #0]
  //Seting output as PushPull
  GPIOB->OTYPER &= ~(GPIO_OTYPER_ODR_3);
 8004b48:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <gpio_LED_config+0x5c>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	4a0b      	ldr	r2, [pc, #44]	; (8004b7c <gpio_LED_config+0x5c>)
 8004b4e:	f023 0308 	bic.w	r3, r3, #8
 8004b52:	6053      	str	r3, [r2, #4]
  //Setting as High Speed Output
  GPIOB->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR3);
 8004b54:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <gpio_LED_config+0x5c>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4a08      	ldr	r2, [pc, #32]	; (8004b7c <gpio_LED_config+0x5c>)
 8004b5a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004b5e:	6093      	str	r3, [r2, #8]
  GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR3_1);
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <gpio_LED_config+0x5c>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4a05      	ldr	r2, [pc, #20]	; (8004b7c <gpio_LED_config+0x5c>)
 8004b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6a:	6093      	str	r3, [r2, #8]
}
 8004b6c:	bf00      	nop
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	48000400 	.word	0x48000400

08004b80 <gpio_LED_toggleGreen>:
      GPIOB->ODR &= ~(GPIO_ODR_OD3);
    }
}

void gpio_LED_toggleGreen(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
    GPIOB->ODR ^= (GPIO_ODR_OD3);
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <gpio_LED_toggleGreen+0x1c>)
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <gpio_LED_toggleGreen+0x1c>)
 8004b8a:	f083 0308 	eor.w	r3, r3, #8
 8004b8e:	6153      	str	r3, [r2, #20]
}
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	48000400 	.word	0x48000400

08004ba0 <opamp_config>:
#include <opamp.h>
/**
 * @Brief OPAMP configuration
 */
void opamp_config(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
	//Enable GPIO port A clock
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8004ba4:	4b2e      	ldr	r3, [pc, #184]	; (8004c60 <opamp_config+0xc0>)
 8004ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba8:	4a2d      	ldr	r2, [pc, #180]	; (8004c60 <opamp_config+0xc0>)
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	64d3      	str	r3, [r2, #76]	; 0x4c
	//Pin mode as analog mode
	GPIOA->MODER |= (GPIO_MODER_MODE0);
 8004bb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004bba:	f043 0303 	orr.w	r3, r3, #3
 8004bbe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE3);
 8004bc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004bca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bce:	6013      	str	r3, [r2, #0]
	//Enable OPAMP clock
	RCC->APB1ENR1 |= (RCC_APB1ENR1_OPAMPEN);
 8004bd0:	4b23      	ldr	r3, [pc, #140]	; (8004c60 <opamp_config+0xc0>)
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd4:	4a22      	ldr	r2, [pc, #136]	; (8004c60 <opamp_config+0xc0>)
 8004bd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bda:	6593      	str	r3, [r2, #88]	; 0x58
	//Setting OPAMP voltage Range (VDDA>2.4V ->1, else 0);
	OPAMP->CSR |=(OPAMP1_CSR_OPARANGE);
 8004bdc:	4b21      	ldr	r3, [pc, #132]	; (8004c64 <opamp_config+0xc4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a20      	ldr	r2, [pc, #128]	; (8004c64 <opamp_config+0xc4>)
 8004be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004be6:	6013      	str	r3, [r2, #0]
	//Setting OPAMP low power mode
	OPAMP->CSR |=(OPAMP1_CSR_OPALPM);
 8004be8:	4b1e      	ldr	r3, [pc, #120]	; (8004c64 <opamp_config+0xc4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1d      	ldr	r2, [pc, #116]	; (8004c64 <opamp_config+0xc4>)
 8004bee:	f043 0302 	orr.w	r3, r3, #2
 8004bf2:	6013      	str	r3, [r2, #0]
	//Enable Programmable Gain Amplifier mode
	OPAMP->CSR &=~(OPAMP1_CSR_OPAMODE);
 8004bf4:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <opamp_config+0xc4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1a      	ldr	r2, [pc, #104]	; (8004c64 <opamp_config+0xc4>)
 8004bfa:	f023 030c 	bic.w	r3, r3, #12
 8004bfe:	6013      	str	r3, [r2, #0]
	OPAMP->CSR |=(OPAMP1_CSR_OPAMODE_1);
 8004c00:	4b18      	ldr	r3, [pc, #96]	; (8004c64 <opamp_config+0xc4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a17      	ldr	r2, [pc, #92]	; (8004c64 <opamp_config+0xc4>)
 8004c06:	f043 0308 	orr.w	r3, r3, #8
 8004c0a:	6013      	str	r3, [r2, #0]
	//Setting OP Gain of 4
	OPAMP->CSR &=~(OPAMP1_CSR_PGAGAIN);
 8004c0c:	4b15      	ldr	r3, [pc, #84]	; (8004c64 <opamp_config+0xc4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a14      	ldr	r2, [pc, #80]	; (8004c64 <opamp_config+0xc4>)
 8004c12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004c16:	6013      	str	r3, [r2, #0]
	OPAMP->CSR |=(OPAMP1_CSR_PGAGAIN_0);
 8004c18:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <opamp_config+0xc4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a11      	ldr	r2, [pc, #68]	; (8004c64 <opamp_config+0xc4>)
 8004c1e:	f043 0310 	orr.w	r3, r3, #16
 8004c22:	6013      	str	r3, [r2, #0]
	//Inverting input not externally connected
	OPAMP->CSR &=~(OPAMP1_CSR_VMSEL);
 8004c24:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <opamp_config+0xc4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a0e      	ldr	r2, [pc, #56]	; (8004c64 <opamp_config+0xc4>)
 8004c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2e:	6013      	str	r3, [r2, #0]
	OPAMP->CSR |=(OPAMP1_CSR_VMSEL_1);
 8004c30:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <opamp_config+0xc4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a0b      	ldr	r2, [pc, #44]	; (8004c64 <opamp_config+0xc4>)
 8004c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c3a:	6013      	str	r3, [r2, #0]
	//GPIO (PA0) connected to Non-Inverting Input
	OPAMP->CSR &=~(OPAMP1_CSR_VPSEL);
 8004c3c:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <opamp_config+0xc4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a08      	ldr	r2, [pc, #32]	; (8004c64 <opamp_config+0xc4>)
 8004c42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c46:	6013      	str	r3, [r2, #0]
	//OPAMP Switch ON
	OPAMP->CSR |=(OPAMP1_CSR_OPAEN);
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <opamp_config+0xc4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a05      	ldr	r2, [pc, #20]	; (8004c64 <opamp_config+0xc4>)
 8004c4e:	f043 0301 	orr.w	r3, r3, #1
 8004c52:	6013      	str	r3, [r2, #0]
}
 8004c54:	bf00      	nop
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40021000 	.word	0x40021000
 8004c64:	40007800 	.word	0x40007800

08004c68 <spi_GPIO_config>:
 * @Brief SPI1 GPIO pins configuration
 * (PA5(A4)->SP1_SCK,PA6(A5)->SP1_MISO,PA7(A6)->SP1_MOSI)
 * (PA4(A3)->CS)
 */
void spi_GPIO_config(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
	//SPI AF GPIO pins configuration
	GPIO_Handle_t spiPins;
	spiPins.pGPIOx=GPIOA;
 8004c6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c72:	607b      	str	r3, [r7, #4]
	spiPins.pinMode=PIN_MODE_ALTFN;
 8004c74:	2302      	movs	r3, #2
 8004c76:	727b      	strb	r3, [r7, #9]
	spiPins.pinOutputType=PIN_OP_TYPE_PP;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	733b      	strb	r3, [r7, #12]
	spiPins.pinPUPDControl=PIN_NO_PUPD;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	72fb      	strb	r3, [r7, #11]
	spiPins.pinSpeed=PIN_SPEED_HIGH;
 8004c80:	2303      	movs	r3, #3
 8004c82:	72bb      	strb	r3, [r7, #10]
	spiPins.pinAltFunMode=AF5;
 8004c84:	2305      	movs	r3, #5
 8004c86:	737b      	strb	r3, [r7, #13]
	spiPins.pinNumber=PIN_NO_7;//MOSI
 8004c88:	2307      	movs	r3, #7
 8004c8a:	723b      	strb	r3, [r7, #8]
	gpio_Init(&spiPins);
 8004c8c:	1d3b      	adds	r3, r7, #4
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff fe7a 	bl	8004988 <gpio_Init>
	spiPins.pinNumber=PIN_NO_6;//MISO
 8004c94:	2306      	movs	r3, #6
 8004c96:	723b      	strb	r3, [r7, #8]
	spiPins.pinPUPDControl=PIN_PULL_UP;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	72fb      	strb	r3, [r7, #11]
	gpio_Init(&spiPins);
 8004c9c:	1d3b      	adds	r3, r7, #4
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff fe72 	bl	8004988 <gpio_Init>
	spiPins.pinNumber=PIN_NO_5;//SCLK
 8004ca4:	2305      	movs	r3, #5
 8004ca6:	723b      	strb	r3, [r7, #8]
	spiPins.pinPUPDControl=PIN_NO_PUPD;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	72fb      	strb	r3, [r7, #11]
	gpio_Init(&spiPins);
 8004cac:	1d3b      	adds	r3, r7, #4
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fe6a 	bl	8004988 <gpio_Init>
	spiPins.pinNumber=PIN_NO_4;//CS
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	723b      	strb	r3, [r7, #8]
	spiPins.pinMode=PIN_MODE_OUTPUT;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	727b      	strb	r3, [r7, #9]
	gpio_Init(&spiPins);
 8004cbc:	1d3b      	adds	r3, r7, #4
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fe62 	bl	8004988 <gpio_Init>
	//Default value of CS is HIGH
	GPIOA->BSRR |= (GPIO_BSRR_BS4);
 8004cc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004cce:	f043 0310 	orr.w	r3, r3, #16
 8004cd2:	6193      	str	r3, [r2, #24]
}
 8004cd4:	bf00      	nop
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8004ce0:	4b1b      	ldr	r3, [pc, #108]	; (8004d50 <MX_SPI1_Init+0x74>)
 8004ce2:	4a1c      	ldr	r2, [pc, #112]	; (8004d54 <MX_SPI1_Init+0x78>)
 8004ce4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8004ce6:	4b1a      	ldr	r3, [pc, #104]	; (8004d50 <MX_SPI1_Init+0x74>)
 8004ce8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004cec:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004cee:	4b18      	ldr	r3, [pc, #96]	; (8004d50 <MX_SPI1_Init+0x74>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004cf4:	4b16      	ldr	r3, [pc, #88]	; (8004d50 <MX_SPI1_Init+0x74>)
 8004cf6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004cfa:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cfc:	4b14      	ldr	r3, [pc, #80]	; (8004d50 <MX_SPI1_Init+0x74>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d02:	4b13      	ldr	r3, [pc, #76]	; (8004d50 <MX_SPI1_Init+0x74>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8004d08:	4b11      	ldr	r3, [pc, #68]	; (8004d50 <MX_SPI1_Init+0x74>)
 8004d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d0e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004d10:	4b0f      	ldr	r3, [pc, #60]	; (8004d50 <MX_SPI1_Init+0x74>)
 8004d12:	2208      	movs	r2, #8
 8004d14:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d16:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <MX_SPI1_Init+0x74>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d1c:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <MX_SPI1_Init+0x74>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d22:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <MX_SPI1_Init+0x74>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8004d28:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <MX_SPI1_Init+0x74>)
 8004d2a:	2207      	movs	r2, #7
 8004d2c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004d2e:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <MX_SPI1_Init+0x74>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004d34:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <MX_SPI1_Init+0x74>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004d3a:	4805      	ldr	r0, [pc, #20]	; (8004d50 <MX_SPI1_Init+0x74>)
 8004d3c:	f7fe fe26 	bl	800398c <HAL_SPI_Init>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8004d46:	f7fd faeb 	bl	8002320 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8004d4a:	bf00      	nop
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20002234 	.word	0x20002234
 8004d54:	40013000 	.word	0x40013000

08004d58 <spi_cs_sd_write>:

/**
 * @Brief SD Chip Select Set/Reset
 */
void spi_cs_sd_write(bool state)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	71fb      	strb	r3, [r7, #7]
	if (state)
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <spi_cs_sd_write+0x22>
	{
		GPIOA->BSRR |= (GPIO_BSRR_BS4);
 8004d68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004d72:	f043 0310 	orr.w	r3, r3, #16
 8004d76:	6193      	str	r3, [r2, #24]
	}
	else
	{
		GPIOA->BSRR |= (GPIO_BSRR_BR4);
	}
}
 8004d78:	e007      	b.n	8004d8a <spi_cs_sd_write+0x32>
		GPIOA->BSRR |= (GPIO_BSRR_BR4);
 8004d7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004d84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d88:	6193      	str	r3, [r2, #24]
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <tim_TIM6_MIC_config>:
/**
 * @Brief TIM6 as ADC MIC
 * Generate a 48kHz Sample Rate
 */
void tim_TIM6_MIC_config(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
	//We are working with a SYSTEM Source of 16MHz
	//Enable TIM6 clock
	RCC->APB1ENR1 |=(RCC_APB1ENR1_TIM6EN);
 8004d9c:	4b13      	ldr	r3, [pc, #76]	; (8004dec <tim_TIM6_MIC_config+0x54>)
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da0:	4a12      	ldr	r2, [pc, #72]	; (8004dec <tim_TIM6_MIC_config+0x54>)
 8004da2:	f043 0310 	orr.w	r3, r3, #16
 8004da6:	6593      	str	r3, [r2, #88]	; 0x58
	//Periodic
	TIM6->CR1 &=~ (TIM_CR1_OPM);
 8004da8:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <tim_TIM6_MIC_config+0x58>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a10      	ldr	r2, [pc, #64]	; (8004df0 <tim_TIM6_MIC_config+0x58>)
 8004dae:	f023 0308 	bic.w	r3, r3, #8
 8004db2:	6013      	str	r3, [r2, #0]
	//Mode-->TRGO
	TIM6->CR2 &=~ (TIM_CR2_MMS);
 8004db4:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <tim_TIM6_MIC_config+0x58>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4a0d      	ldr	r2, [pc, #52]	; (8004df0 <tim_TIM6_MIC_config+0x58>)
 8004dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dbe:	6053      	str	r3, [r2, #4]
	TIM6->CR2 |= (TIM_CR2_MMS_1);
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <tim_TIM6_MIC_config+0x58>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	4a0a      	ldr	r2, [pc, #40]	; (8004df0 <tim_TIM6_MIC_config+0x58>)
 8004dc6:	f043 0320 	orr.w	r3, r3, #32
 8004dca:	6053      	str	r3, [r2, #4]
	//f=44.1kHz
	TIM6->PSC = 0;//Keep APB clock Frequency
 8004dcc:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <tim_TIM6_MIC_config+0x58>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	629a      	str	r2, [r3, #40]	; 0x28
	//Period
	TIM6->ARR=750-1;//72MHz/750= 96kHz
 8004dd2:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <tim_TIM6_MIC_config+0x58>)
 8004dd4:	f240 22ed 	movw	r2, #749	; 0x2ed
 8004dd8:	62da      	str	r2, [r3, #44]	; 0x2c
	//Update register on event
	TIM6->EGR=1;
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <tim_TIM6_MIC_config+0x58>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	615a      	str	r2, [r3, #20]
//	//Start timer
//	TIM6->CR1 |= (TIM_CR1_CEN);
}
 8004de0:	bf00      	nop
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40021000 	.word	0x40021000
 8004df0:	40001000 	.word	0x40001000

08004df4 <__NVIC_SetPriorityGrouping>:
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e04:	4b0c      	ldr	r3, [pc, #48]	; (8004e38 <__NVIC_SetPriorityGrouping+0x44>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e10:	4013      	ands	r3, r2
 8004e12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e26:	4a04      	ldr	r2, [pc, #16]	; (8004e38 <__NVIC_SetPriorityGrouping+0x44>)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	60d3      	str	r3, [r2, #12]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	e000ed00 	.word	0xe000ed00

08004e3c <__NVIC_EnableIRQ>:
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	db0b      	blt.n	8004e66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	f003 021f 	and.w	r2, r3, #31
 8004e54:	4907      	ldr	r1, [pc, #28]	; (8004e74 <__NVIC_EnableIRQ+0x38>)
 8004e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	e000e100 	.word	0xe000e100

08004e78 <__NVIC_SetPriority>:
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	6039      	str	r1, [r7, #0]
 8004e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	db0a      	blt.n	8004ea2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	490c      	ldr	r1, [pc, #48]	; (8004ec4 <__NVIC_SetPriority+0x4c>)
 8004e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e96:	0112      	lsls	r2, r2, #4
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ea0:	e00a      	b.n	8004eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	4908      	ldr	r1, [pc, #32]	; (8004ec8 <__NVIC_SetPriority+0x50>)
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	3b04      	subs	r3, #4
 8004eb0:	0112      	lsls	r2, r2, #4
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	761a      	strb	r2, [r3, #24]
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	e000e100 	.word	0xe000e100
 8004ec8:	e000ed00 	.word	0xe000ed00

08004ecc <uart_UART2_GPIO_config>:
}
/*
 * @Brief UART2 GPIO Config(PA2(Tx);PA15(Rx))
 */
void uart_UART2_GPIO_config(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  // Enable PortA Clock
  RCC->AHB2ENR  |= ( RCC_AHB2ENR_GPIOAEN );
 8004ed0:	4b2e      	ldr	r3, [pc, #184]	; (8004f8c <uart_UART2_GPIO_config+0xc0>)
 8004ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed4:	4a2d      	ldr	r2, [pc, #180]	; (8004f8c <uart_UART2_GPIO_config+0xc0>)
 8004ed6:	f043 0301 	orr.w	r3, r3, #1
 8004eda:	64d3      	str	r3, [r2, #76]	; 0x4c
  // Configure pins PA2, PA15 for USART2 .
  GPIOA->MODER    &= ~( ( 0x3 << ( 2 * 2 ) ) |
 8004edc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004ee6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004eea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004eee:	6013      	str	r3, [r2, #0]
      ( 0x3 << ( 15 * 2 ) ) );
  GPIOA->MODER    |=  ( ( 0x2 << ( 2 * 2 ) ) |
 8004ef0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004efe:	f043 0320 	orr.w	r3, r3, #32
 8004f02:	6013      	str	r3, [r2, #0]
      ( 0x2 << ( 15 * 2 ) ) );
  GPIOA->OTYPER   &= ~( ( 0x1 << 2 ) |
 8004f04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004f0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f12:	f023 0304 	bic.w	r3, r3, #4
 8004f16:	6053      	str	r3, [r2, #4]
      ( 0x1 << 15 ) );
  GPIOA->OSPEEDR  &= ~( ( 0x3 << ( 2 * 2 ) ) |
 8004f18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004f22:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004f26:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004f2a:	6093      	str	r3, [r2, #8]
      ( 0x3 << ( 15 * 2 ) ) );
  GPIOA->OSPEEDR  |=  ( ( 0x2 << ( 2 * 2 ) ) |
 8004f2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004f36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f3a:	f043 0320 	orr.w	r3, r3, #32
 8004f3e:	6093      	str	r3, [r2, #8]
      ( 0x2 << ( 15 * 2 ) ) );
  GPIOA->AFR[ 0 ] &= ~( ( 0xF << ( 2 * 4 ) ) );
 8004f40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004f4a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f4e:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[ 0 ] |=  ( ( 0x7 << ( 2 * 4 ) ) );
 8004f50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004f5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f5e:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[ 1 ] &= ~( ( 0xF << ( ( 15 - 8 ) * 4 ) ) );
 8004f60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004f6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f6e:	6253      	str	r3, [r2, #36]	; 0x24
  GPIOA->AFR[ 1 ] |=  ( ( 0x3 << ( ( 15 - 8 ) * 4 ) ) );
 8004f70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004f7a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8004f7e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8004f80:	bf00      	nop
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40021000 	.word	0x40021000

08004f90 <uart_UART2_config>:
/*
 * @Brief UART2 Peripheral Config
 */
void uart_UART2_config(uint32_t SYSTEM_CLK)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  //// Enable floating-point unit.
  //SCB->CPACR    |=  ( 0xFUL << (20U) );
  // Enable UART2 Clock
  RCC->APB1ENR1 |= ( RCC_APB1ENR1_USART2EN );
 8004f98:	4b28      	ldr	r3, [pc, #160]	; (800503c <uart_UART2_config+0xac>)
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9c:	4a27      	ldr	r2, [pc, #156]	; (800503c <uart_UART2_config+0xac>)
 8004f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fa2:	6593      	str	r3, [r2, #88]	; 0x58
  // Set word length to 8-bits
  USART2->CR1  &= ~(USART_CR1_M1);
 8004fa4:	4b26      	ldr	r3, [pc, #152]	; (8005040 <uart_UART2_config+0xb0>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a25      	ldr	r2, [pc, #148]	; (8005040 <uart_UART2_config+0xb0>)
 8004faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fae:	6013      	str	r3, [r2, #0]
  // Set baud rate to 9600 Hz
  USART2->BRR = SYSTEM_CLK/9600;
 8004fb0:	4a23      	ldr	r2, [pc, #140]	; (8005040 <uart_UART2_config+0xb0>)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4923      	ldr	r1, [pc, #140]	; (8005044 <uart_UART2_config+0xb4>)
 8004fb6:	fba1 1303 	umull	r1, r3, r1, r3
 8004fba:	0a9b      	lsrs	r3, r3, #10
 8004fbc:	60d3      	str	r3, [r2, #12]
  // Parity control disabled
  USART2->CR1  &= ~(USART_CR1_PCE);
 8004fbe:	4b20      	ldr	r3, [pc, #128]	; (8005040 <uart_UART2_config+0xb0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1f      	ldr	r2, [pc, #124]	; (8005040 <uart_UART2_config+0xb0>)
 8004fc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fc8:	6013      	str	r3, [r2, #0]
  // Stop bits to 1
  USART2->CR2  &= ~(USART_CR2_STOP);
 8004fca:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <uart_UART2_config+0xb0>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	4a1c      	ldr	r2, [pc, #112]	; (8005040 <uart_UART2_config+0xb0>)
 8004fd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004fd4:	6053      	str	r3, [r2, #4]
  // Disable HW flow control
  USART2->CR3  &= ~(USART_CR3_CTSE);
 8004fd6:	4b1a      	ldr	r3, [pc, #104]	; (8005040 <uart_UART2_config+0xb0>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	4a19      	ldr	r2, [pc, #100]	; (8005040 <uart_UART2_config+0xb0>)
 8004fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe0:	6093      	str	r3, [r2, #8]
  USART2->CR3  &= ~(USART_CR3_RTSE);
 8004fe2:	4b17      	ldr	r3, [pc, #92]	; (8005040 <uart_UART2_config+0xb0>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	4a16      	ldr	r2, [pc, #88]	; (8005040 <uart_UART2_config+0xb0>)
 8004fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fec:	6093      	str	r3, [r2, #8]
  // Clear flags
  USART2->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8004fee:	4b14      	ldr	r3, [pc, #80]	; (8005040 <uart_UART2_config+0xb0>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	4a13      	ldr	r2, [pc, #76]	; (8005040 <uart_UART2_config+0xb0>)
 8004ff4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004ff8:	6053      	str	r3, [r2, #4]
  USART2->CR3 &= ~(USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN );
 8004ffa:	4b11      	ldr	r3, [pc, #68]	; (8005040 <uart_UART2_config+0xb0>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	4a10      	ldr	r2, [pc, #64]	; (8005040 <uart_UART2_config+0xb0>)
 8005000:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005004:	6093      	str	r3, [r2, #8]
  // Enable UART2 peripheral
  USART2->CR1 |= ( USART_CR1_RE | USART_CR1_TE | USART_CR1_UE );
 8005006:	4b0e      	ldr	r3, [pc, #56]	; (8005040 <uart_UART2_config+0xb0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a0d      	ldr	r2, [pc, #52]	; (8005040 <uart_UART2_config+0xb0>)
 800500c:	f043 030d 	orr.w	r3, r3, #13
 8005010:	6013      	str	r3, [r2, #0]
  // Enable Rx ready to read interruption
  USART2->CR1 |= ( USART_CR1_RXNEIE );
 8005012:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <uart_UART2_config+0xb0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a0a      	ldr	r2, [pc, #40]	; (8005040 <uart_UART2_config+0xb0>)
 8005018:	f043 0320 	orr.w	r3, r3, #32
 800501c:	6013      	str	r3, [r2, #0]
  //All priority bits assigned to the preempt priority group
  NVIC_SetPriorityGrouping(0U);
 800501e:	2000      	movs	r0, #0
 8005020:	f7ff fee8 	bl	8004df4 <__NVIC_SetPriorityGrouping>
  //Priority of the interrupt (NVIC)
  NVIC_SetPriority(USART2_IRQn,1);
 8005024:	2101      	movs	r1, #1
 8005026:	2026      	movs	r0, #38	; 0x26
 8005028:	f7ff ff26 	bl	8004e78 <__NVIC_SetPriority>
  //Enable the interrupt
  NVIC_EnableIRQ(USART2_IRQn);
 800502c:	2026      	movs	r0, #38	; 0x26
 800502e:	f7ff ff05 	bl	8004e3c <__NVIC_EnableIRQ>

}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40021000 	.word	0x40021000
 8005040:	40004400 	.word	0x40004400
 8005044:	1b4e81b5 	.word	0x1b4e81b5

08005048 <uart_UART2_TX>:
/*
 * @Brief UART2 Transmit
 */
bool uart_UART2_TX(uint8_t *data,uint8_t len,uint32_t timeout)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	460b      	mov	r3, r1
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	72fb      	strb	r3, [r7, #11]
  //Write to DR as TXE flag is HIGH (Tx buffer Empty)
  uint8_t dataIdx = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	75fb      	strb	r3, [r7, #23]
  uint32_t startTick = HAL_GetTick();
 800505a:	f7fd fbb3 	bl	80027c4 <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]
  while(dataIdx<len)
 8005060:	e01a      	b.n	8005098 <uart_UART2_TX+0x50>
  {
    if(USART2->ISR & USART_ISR_TXE) //Tx buffer empty
 8005062:	4b1a      	ldr	r3, [pc, #104]	; (80050cc <uart_UART2_TX+0x84>)
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <uart_UART2_TX+0x3c>
    {
      USART2->TDR = data[dataIdx];
 800506e:	7dfb      	ldrb	r3, [r7, #23]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	781a      	ldrb	r2, [r3, #0]
 8005076:	4b15      	ldr	r3, [pc, #84]	; (80050cc <uart_UART2_TX+0x84>)
 8005078:	b292      	uxth	r2, r2
 800507a:	851a      	strh	r2, [r3, #40]	; 0x28
      dataIdx++;
 800507c:	7dfb      	ldrb	r3, [r7, #23]
 800507e:	3301      	adds	r3, #1
 8005080:	75fb      	strb	r3, [r7, #23]
 8005082:	e009      	b.n	8005098 <uart_UART2_TX+0x50>
    }
    else //Manage timeout
    {
      if((HAL_GetTick() - startTick)>= timeout) return false;
 8005084:	f7fd fb9e 	bl	80027c4 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	429a      	cmp	r2, r3
 8005092:	d801      	bhi.n	8005098 <uart_UART2_TX+0x50>
 8005094:	2300      	movs	r3, #0
 8005096:	e015      	b.n	80050c4 <uart_UART2_TX+0x7c>
  while(dataIdx<len)
 8005098:	7dfa      	ldrb	r2, [r7, #23]
 800509a:	7afb      	ldrb	r3, [r7, #11]
 800509c:	429a      	cmp	r2, r3
 800509e:	d3e0      	bcc.n	8005062 <uart_UART2_TX+0x1a>
    }
  }
  //Wait for busy flag
  while((USART2->ISR & USART_ISR_TC))
 80050a0:	e009      	b.n	80050b6 <uart_UART2_TX+0x6e>
  {
    if((HAL_GetTick() - startTick)>= timeout) return false;
 80050a2:	f7fd fb8f 	bl	80027c4 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d801      	bhi.n	80050b6 <uart_UART2_TX+0x6e>
 80050b2:	2300      	movs	r3, #0
 80050b4:	e006      	b.n	80050c4 <uart_UART2_TX+0x7c>
  while((USART2->ISR & USART_ISR_TC))
 80050b6:	4b05      	ldr	r3, [pc, #20]	; (80050cc <uart_UART2_TX+0x84>)
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1ef      	bne.n	80050a2 <uart_UART2_TX+0x5a>
  }
  return true;
 80050c2:	2301      	movs	r3, #1

}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40004400 	.word	0x40004400

080050d0 <__errno>:
 80050d0:	4b01      	ldr	r3, [pc, #4]	; (80050d8 <__errno+0x8>)
 80050d2:	6818      	ldr	r0, [r3, #0]
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20000018 	.word	0x20000018

080050dc <__libc_init_array>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	4d0d      	ldr	r5, [pc, #52]	; (8005114 <__libc_init_array+0x38>)
 80050e0:	4c0d      	ldr	r4, [pc, #52]	; (8005118 <__libc_init_array+0x3c>)
 80050e2:	1b64      	subs	r4, r4, r5
 80050e4:	10a4      	asrs	r4, r4, #2
 80050e6:	2600      	movs	r6, #0
 80050e8:	42a6      	cmp	r6, r4
 80050ea:	d109      	bne.n	8005100 <__libc_init_array+0x24>
 80050ec:	4d0b      	ldr	r5, [pc, #44]	; (800511c <__libc_init_array+0x40>)
 80050ee:	4c0c      	ldr	r4, [pc, #48]	; (8005120 <__libc_init_array+0x44>)
 80050f0:	f002 fdc2 	bl	8007c78 <_init>
 80050f4:	1b64      	subs	r4, r4, r5
 80050f6:	10a4      	asrs	r4, r4, #2
 80050f8:	2600      	movs	r6, #0
 80050fa:	42a6      	cmp	r6, r4
 80050fc:	d105      	bne.n	800510a <__libc_init_array+0x2e>
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
 8005100:	f855 3b04 	ldr.w	r3, [r5], #4
 8005104:	4798      	blx	r3
 8005106:	3601      	adds	r6, #1
 8005108:	e7ee      	b.n	80050e8 <__libc_init_array+0xc>
 800510a:	f855 3b04 	ldr.w	r3, [r5], #4
 800510e:	4798      	blx	r3
 8005110:	3601      	adds	r6, #1
 8005112:	e7f2      	b.n	80050fa <__libc_init_array+0x1e>
 8005114:	0800876c 	.word	0x0800876c
 8005118:	0800876c 	.word	0x0800876c
 800511c:	0800876c 	.word	0x0800876c
 8005120:	08008770 	.word	0x08008770

08005124 <memcpy>:
 8005124:	440a      	add	r2, r1
 8005126:	4291      	cmp	r1, r2
 8005128:	f100 33ff 	add.w	r3, r0, #4294967295
 800512c:	d100      	bne.n	8005130 <memcpy+0xc>
 800512e:	4770      	bx	lr
 8005130:	b510      	push	{r4, lr}
 8005132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800513a:	4291      	cmp	r1, r2
 800513c:	d1f9      	bne.n	8005132 <memcpy+0xe>
 800513e:	bd10      	pop	{r4, pc}

08005140 <memset>:
 8005140:	4402      	add	r2, r0
 8005142:	4603      	mov	r3, r0
 8005144:	4293      	cmp	r3, r2
 8005146:	d100      	bne.n	800514a <memset+0xa>
 8005148:	4770      	bx	lr
 800514a:	f803 1b01 	strb.w	r1, [r3], #1
 800514e:	e7f9      	b.n	8005144 <memset+0x4>

08005150 <__cvt>:
 8005150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005154:	ec55 4b10 	vmov	r4, r5, d0
 8005158:	2d00      	cmp	r5, #0
 800515a:	460e      	mov	r6, r1
 800515c:	4619      	mov	r1, r3
 800515e:	462b      	mov	r3, r5
 8005160:	bfbb      	ittet	lt
 8005162:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005166:	461d      	movlt	r5, r3
 8005168:	2300      	movge	r3, #0
 800516a:	232d      	movlt	r3, #45	; 0x2d
 800516c:	700b      	strb	r3, [r1, #0]
 800516e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005170:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005174:	4691      	mov	r9, r2
 8005176:	f023 0820 	bic.w	r8, r3, #32
 800517a:	bfbc      	itt	lt
 800517c:	4622      	movlt	r2, r4
 800517e:	4614      	movlt	r4, r2
 8005180:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005184:	d005      	beq.n	8005192 <__cvt+0x42>
 8005186:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800518a:	d100      	bne.n	800518e <__cvt+0x3e>
 800518c:	3601      	adds	r6, #1
 800518e:	2102      	movs	r1, #2
 8005190:	e000      	b.n	8005194 <__cvt+0x44>
 8005192:	2103      	movs	r1, #3
 8005194:	ab03      	add	r3, sp, #12
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	ab02      	add	r3, sp, #8
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	ec45 4b10 	vmov	d0, r4, r5
 80051a0:	4653      	mov	r3, sl
 80051a2:	4632      	mov	r2, r6
 80051a4:	f000 fe18 	bl	8005dd8 <_dtoa_r>
 80051a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051ac:	4607      	mov	r7, r0
 80051ae:	d102      	bne.n	80051b6 <__cvt+0x66>
 80051b0:	f019 0f01 	tst.w	r9, #1
 80051b4:	d022      	beq.n	80051fc <__cvt+0xac>
 80051b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051ba:	eb07 0906 	add.w	r9, r7, r6
 80051be:	d110      	bne.n	80051e2 <__cvt+0x92>
 80051c0:	783b      	ldrb	r3, [r7, #0]
 80051c2:	2b30      	cmp	r3, #48	; 0x30
 80051c4:	d10a      	bne.n	80051dc <__cvt+0x8c>
 80051c6:	2200      	movs	r2, #0
 80051c8:	2300      	movs	r3, #0
 80051ca:	4620      	mov	r0, r4
 80051cc:	4629      	mov	r1, r5
 80051ce:	f7fb fc7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80051d2:	b918      	cbnz	r0, 80051dc <__cvt+0x8c>
 80051d4:	f1c6 0601 	rsb	r6, r6, #1
 80051d8:	f8ca 6000 	str.w	r6, [sl]
 80051dc:	f8da 3000 	ldr.w	r3, [sl]
 80051e0:	4499      	add	r9, r3
 80051e2:	2200      	movs	r2, #0
 80051e4:	2300      	movs	r3, #0
 80051e6:	4620      	mov	r0, r4
 80051e8:	4629      	mov	r1, r5
 80051ea:	f7fb fc6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80051ee:	b108      	cbz	r0, 80051f4 <__cvt+0xa4>
 80051f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80051f4:	2230      	movs	r2, #48	; 0x30
 80051f6:	9b03      	ldr	r3, [sp, #12]
 80051f8:	454b      	cmp	r3, r9
 80051fa:	d307      	bcc.n	800520c <__cvt+0xbc>
 80051fc:	9b03      	ldr	r3, [sp, #12]
 80051fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005200:	1bdb      	subs	r3, r3, r7
 8005202:	4638      	mov	r0, r7
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	b004      	add	sp, #16
 8005208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520c:	1c59      	adds	r1, r3, #1
 800520e:	9103      	str	r1, [sp, #12]
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	e7f0      	b.n	80051f6 <__cvt+0xa6>

08005214 <__exponent>:
 8005214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005216:	4603      	mov	r3, r0
 8005218:	2900      	cmp	r1, #0
 800521a:	bfb8      	it	lt
 800521c:	4249      	neglt	r1, r1
 800521e:	f803 2b02 	strb.w	r2, [r3], #2
 8005222:	bfb4      	ite	lt
 8005224:	222d      	movlt	r2, #45	; 0x2d
 8005226:	222b      	movge	r2, #43	; 0x2b
 8005228:	2909      	cmp	r1, #9
 800522a:	7042      	strb	r2, [r0, #1]
 800522c:	dd2a      	ble.n	8005284 <__exponent+0x70>
 800522e:	f10d 0407 	add.w	r4, sp, #7
 8005232:	46a4      	mov	ip, r4
 8005234:	270a      	movs	r7, #10
 8005236:	46a6      	mov	lr, r4
 8005238:	460a      	mov	r2, r1
 800523a:	fb91 f6f7 	sdiv	r6, r1, r7
 800523e:	fb07 1516 	mls	r5, r7, r6, r1
 8005242:	3530      	adds	r5, #48	; 0x30
 8005244:	2a63      	cmp	r2, #99	; 0x63
 8005246:	f104 34ff 	add.w	r4, r4, #4294967295
 800524a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800524e:	4631      	mov	r1, r6
 8005250:	dcf1      	bgt.n	8005236 <__exponent+0x22>
 8005252:	3130      	adds	r1, #48	; 0x30
 8005254:	f1ae 0502 	sub.w	r5, lr, #2
 8005258:	f804 1c01 	strb.w	r1, [r4, #-1]
 800525c:	1c44      	adds	r4, r0, #1
 800525e:	4629      	mov	r1, r5
 8005260:	4561      	cmp	r1, ip
 8005262:	d30a      	bcc.n	800527a <__exponent+0x66>
 8005264:	f10d 0209 	add.w	r2, sp, #9
 8005268:	eba2 020e 	sub.w	r2, r2, lr
 800526c:	4565      	cmp	r5, ip
 800526e:	bf88      	it	hi
 8005270:	2200      	movhi	r2, #0
 8005272:	4413      	add	r3, r2
 8005274:	1a18      	subs	r0, r3, r0
 8005276:	b003      	add	sp, #12
 8005278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800527a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800527e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005282:	e7ed      	b.n	8005260 <__exponent+0x4c>
 8005284:	2330      	movs	r3, #48	; 0x30
 8005286:	3130      	adds	r1, #48	; 0x30
 8005288:	7083      	strb	r3, [r0, #2]
 800528a:	70c1      	strb	r1, [r0, #3]
 800528c:	1d03      	adds	r3, r0, #4
 800528e:	e7f1      	b.n	8005274 <__exponent+0x60>

08005290 <_printf_float>:
 8005290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005294:	ed2d 8b02 	vpush	{d8}
 8005298:	b08d      	sub	sp, #52	; 0x34
 800529a:	460c      	mov	r4, r1
 800529c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80052a0:	4616      	mov	r6, r2
 80052a2:	461f      	mov	r7, r3
 80052a4:	4605      	mov	r5, r0
 80052a6:	f001 fd3d 	bl	8006d24 <_localeconv_r>
 80052aa:	f8d0 a000 	ldr.w	sl, [r0]
 80052ae:	4650      	mov	r0, sl
 80052b0:	f7fa ff8e 	bl	80001d0 <strlen>
 80052b4:	2300      	movs	r3, #0
 80052b6:	930a      	str	r3, [sp, #40]	; 0x28
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	9305      	str	r3, [sp, #20]
 80052bc:	f8d8 3000 	ldr.w	r3, [r8]
 80052c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80052c4:	3307      	adds	r3, #7
 80052c6:	f023 0307 	bic.w	r3, r3, #7
 80052ca:	f103 0208 	add.w	r2, r3, #8
 80052ce:	f8c8 2000 	str.w	r2, [r8]
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80052da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80052de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80052e2:	9307      	str	r3, [sp, #28]
 80052e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80052e8:	ee08 0a10 	vmov	s16, r0
 80052ec:	4b9f      	ldr	r3, [pc, #636]	; (800556c <_printf_float+0x2dc>)
 80052ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052f2:	f04f 32ff 	mov.w	r2, #4294967295
 80052f6:	f7fb fc19 	bl	8000b2c <__aeabi_dcmpun>
 80052fa:	bb88      	cbnz	r0, 8005360 <_printf_float+0xd0>
 80052fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005300:	4b9a      	ldr	r3, [pc, #616]	; (800556c <_printf_float+0x2dc>)
 8005302:	f04f 32ff 	mov.w	r2, #4294967295
 8005306:	f7fb fbf3 	bl	8000af0 <__aeabi_dcmple>
 800530a:	bb48      	cbnz	r0, 8005360 <_printf_float+0xd0>
 800530c:	2200      	movs	r2, #0
 800530e:	2300      	movs	r3, #0
 8005310:	4640      	mov	r0, r8
 8005312:	4649      	mov	r1, r9
 8005314:	f7fb fbe2 	bl	8000adc <__aeabi_dcmplt>
 8005318:	b110      	cbz	r0, 8005320 <_printf_float+0x90>
 800531a:	232d      	movs	r3, #45	; 0x2d
 800531c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005320:	4b93      	ldr	r3, [pc, #588]	; (8005570 <_printf_float+0x2e0>)
 8005322:	4894      	ldr	r0, [pc, #592]	; (8005574 <_printf_float+0x2e4>)
 8005324:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005328:	bf94      	ite	ls
 800532a:	4698      	movls	r8, r3
 800532c:	4680      	movhi	r8, r0
 800532e:	2303      	movs	r3, #3
 8005330:	6123      	str	r3, [r4, #16]
 8005332:	9b05      	ldr	r3, [sp, #20]
 8005334:	f023 0204 	bic.w	r2, r3, #4
 8005338:	6022      	str	r2, [r4, #0]
 800533a:	f04f 0900 	mov.w	r9, #0
 800533e:	9700      	str	r7, [sp, #0]
 8005340:	4633      	mov	r3, r6
 8005342:	aa0b      	add	r2, sp, #44	; 0x2c
 8005344:	4621      	mov	r1, r4
 8005346:	4628      	mov	r0, r5
 8005348:	f000 f9d8 	bl	80056fc <_printf_common>
 800534c:	3001      	adds	r0, #1
 800534e:	f040 8090 	bne.w	8005472 <_printf_float+0x1e2>
 8005352:	f04f 30ff 	mov.w	r0, #4294967295
 8005356:	b00d      	add	sp, #52	; 0x34
 8005358:	ecbd 8b02 	vpop	{d8}
 800535c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005360:	4642      	mov	r2, r8
 8005362:	464b      	mov	r3, r9
 8005364:	4640      	mov	r0, r8
 8005366:	4649      	mov	r1, r9
 8005368:	f7fb fbe0 	bl	8000b2c <__aeabi_dcmpun>
 800536c:	b140      	cbz	r0, 8005380 <_printf_float+0xf0>
 800536e:	464b      	mov	r3, r9
 8005370:	2b00      	cmp	r3, #0
 8005372:	bfbc      	itt	lt
 8005374:	232d      	movlt	r3, #45	; 0x2d
 8005376:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800537a:	487f      	ldr	r0, [pc, #508]	; (8005578 <_printf_float+0x2e8>)
 800537c:	4b7f      	ldr	r3, [pc, #508]	; (800557c <_printf_float+0x2ec>)
 800537e:	e7d1      	b.n	8005324 <_printf_float+0x94>
 8005380:	6863      	ldr	r3, [r4, #4]
 8005382:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005386:	9206      	str	r2, [sp, #24]
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	d13f      	bne.n	800540c <_printf_float+0x17c>
 800538c:	2306      	movs	r3, #6
 800538e:	6063      	str	r3, [r4, #4]
 8005390:	9b05      	ldr	r3, [sp, #20]
 8005392:	6861      	ldr	r1, [r4, #4]
 8005394:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005398:	2300      	movs	r3, #0
 800539a:	9303      	str	r3, [sp, #12]
 800539c:	ab0a      	add	r3, sp, #40	; 0x28
 800539e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80053a2:	ab09      	add	r3, sp, #36	; 0x24
 80053a4:	ec49 8b10 	vmov	d0, r8, r9
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	6022      	str	r2, [r4, #0]
 80053ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053b0:	4628      	mov	r0, r5
 80053b2:	f7ff fecd 	bl	8005150 <__cvt>
 80053b6:	9b06      	ldr	r3, [sp, #24]
 80053b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053ba:	2b47      	cmp	r3, #71	; 0x47
 80053bc:	4680      	mov	r8, r0
 80053be:	d108      	bne.n	80053d2 <_printf_float+0x142>
 80053c0:	1cc8      	adds	r0, r1, #3
 80053c2:	db02      	blt.n	80053ca <_printf_float+0x13a>
 80053c4:	6863      	ldr	r3, [r4, #4]
 80053c6:	4299      	cmp	r1, r3
 80053c8:	dd41      	ble.n	800544e <_printf_float+0x1be>
 80053ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80053ce:	fa5f fb8b 	uxtb.w	fp, fp
 80053d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80053d6:	d820      	bhi.n	800541a <_printf_float+0x18a>
 80053d8:	3901      	subs	r1, #1
 80053da:	465a      	mov	r2, fp
 80053dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80053e0:	9109      	str	r1, [sp, #36]	; 0x24
 80053e2:	f7ff ff17 	bl	8005214 <__exponent>
 80053e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053e8:	1813      	adds	r3, r2, r0
 80053ea:	2a01      	cmp	r2, #1
 80053ec:	4681      	mov	r9, r0
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	dc02      	bgt.n	80053f8 <_printf_float+0x168>
 80053f2:	6822      	ldr	r2, [r4, #0]
 80053f4:	07d2      	lsls	r2, r2, #31
 80053f6:	d501      	bpl.n	80053fc <_printf_float+0x16c>
 80053f8:	3301      	adds	r3, #1
 80053fa:	6123      	str	r3, [r4, #16]
 80053fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005400:	2b00      	cmp	r3, #0
 8005402:	d09c      	beq.n	800533e <_printf_float+0xae>
 8005404:	232d      	movs	r3, #45	; 0x2d
 8005406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800540a:	e798      	b.n	800533e <_printf_float+0xae>
 800540c:	9a06      	ldr	r2, [sp, #24]
 800540e:	2a47      	cmp	r2, #71	; 0x47
 8005410:	d1be      	bne.n	8005390 <_printf_float+0x100>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1bc      	bne.n	8005390 <_printf_float+0x100>
 8005416:	2301      	movs	r3, #1
 8005418:	e7b9      	b.n	800538e <_printf_float+0xfe>
 800541a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800541e:	d118      	bne.n	8005452 <_printf_float+0x1c2>
 8005420:	2900      	cmp	r1, #0
 8005422:	6863      	ldr	r3, [r4, #4]
 8005424:	dd0b      	ble.n	800543e <_printf_float+0x1ae>
 8005426:	6121      	str	r1, [r4, #16]
 8005428:	b913      	cbnz	r3, 8005430 <_printf_float+0x1a0>
 800542a:	6822      	ldr	r2, [r4, #0]
 800542c:	07d0      	lsls	r0, r2, #31
 800542e:	d502      	bpl.n	8005436 <_printf_float+0x1a6>
 8005430:	3301      	adds	r3, #1
 8005432:	440b      	add	r3, r1
 8005434:	6123      	str	r3, [r4, #16]
 8005436:	65a1      	str	r1, [r4, #88]	; 0x58
 8005438:	f04f 0900 	mov.w	r9, #0
 800543c:	e7de      	b.n	80053fc <_printf_float+0x16c>
 800543e:	b913      	cbnz	r3, 8005446 <_printf_float+0x1b6>
 8005440:	6822      	ldr	r2, [r4, #0]
 8005442:	07d2      	lsls	r2, r2, #31
 8005444:	d501      	bpl.n	800544a <_printf_float+0x1ba>
 8005446:	3302      	adds	r3, #2
 8005448:	e7f4      	b.n	8005434 <_printf_float+0x1a4>
 800544a:	2301      	movs	r3, #1
 800544c:	e7f2      	b.n	8005434 <_printf_float+0x1a4>
 800544e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005454:	4299      	cmp	r1, r3
 8005456:	db05      	blt.n	8005464 <_printf_float+0x1d4>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	6121      	str	r1, [r4, #16]
 800545c:	07d8      	lsls	r0, r3, #31
 800545e:	d5ea      	bpl.n	8005436 <_printf_float+0x1a6>
 8005460:	1c4b      	adds	r3, r1, #1
 8005462:	e7e7      	b.n	8005434 <_printf_float+0x1a4>
 8005464:	2900      	cmp	r1, #0
 8005466:	bfd4      	ite	le
 8005468:	f1c1 0202 	rsble	r2, r1, #2
 800546c:	2201      	movgt	r2, #1
 800546e:	4413      	add	r3, r2
 8005470:	e7e0      	b.n	8005434 <_printf_float+0x1a4>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	055a      	lsls	r2, r3, #21
 8005476:	d407      	bmi.n	8005488 <_printf_float+0x1f8>
 8005478:	6923      	ldr	r3, [r4, #16]
 800547a:	4642      	mov	r2, r8
 800547c:	4631      	mov	r1, r6
 800547e:	4628      	mov	r0, r5
 8005480:	47b8      	blx	r7
 8005482:	3001      	adds	r0, #1
 8005484:	d12c      	bne.n	80054e0 <_printf_float+0x250>
 8005486:	e764      	b.n	8005352 <_printf_float+0xc2>
 8005488:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800548c:	f240 80e0 	bls.w	8005650 <_printf_float+0x3c0>
 8005490:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005494:	2200      	movs	r2, #0
 8005496:	2300      	movs	r3, #0
 8005498:	f7fb fb16 	bl	8000ac8 <__aeabi_dcmpeq>
 800549c:	2800      	cmp	r0, #0
 800549e:	d034      	beq.n	800550a <_printf_float+0x27a>
 80054a0:	4a37      	ldr	r2, [pc, #220]	; (8005580 <_printf_float+0x2f0>)
 80054a2:	2301      	movs	r3, #1
 80054a4:	4631      	mov	r1, r6
 80054a6:	4628      	mov	r0, r5
 80054a8:	47b8      	blx	r7
 80054aa:	3001      	adds	r0, #1
 80054ac:	f43f af51 	beq.w	8005352 <_printf_float+0xc2>
 80054b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054b4:	429a      	cmp	r2, r3
 80054b6:	db02      	blt.n	80054be <_printf_float+0x22e>
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	07d8      	lsls	r0, r3, #31
 80054bc:	d510      	bpl.n	80054e0 <_printf_float+0x250>
 80054be:	ee18 3a10 	vmov	r3, s16
 80054c2:	4652      	mov	r2, sl
 80054c4:	4631      	mov	r1, r6
 80054c6:	4628      	mov	r0, r5
 80054c8:	47b8      	blx	r7
 80054ca:	3001      	adds	r0, #1
 80054cc:	f43f af41 	beq.w	8005352 <_printf_float+0xc2>
 80054d0:	f04f 0800 	mov.w	r8, #0
 80054d4:	f104 091a 	add.w	r9, r4, #26
 80054d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054da:	3b01      	subs	r3, #1
 80054dc:	4543      	cmp	r3, r8
 80054de:	dc09      	bgt.n	80054f4 <_printf_float+0x264>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	079b      	lsls	r3, r3, #30
 80054e4:	f100 8105 	bmi.w	80056f2 <_printf_float+0x462>
 80054e8:	68e0      	ldr	r0, [r4, #12]
 80054ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ec:	4298      	cmp	r0, r3
 80054ee:	bfb8      	it	lt
 80054f0:	4618      	movlt	r0, r3
 80054f2:	e730      	b.n	8005356 <_printf_float+0xc6>
 80054f4:	2301      	movs	r3, #1
 80054f6:	464a      	mov	r2, r9
 80054f8:	4631      	mov	r1, r6
 80054fa:	4628      	mov	r0, r5
 80054fc:	47b8      	blx	r7
 80054fe:	3001      	adds	r0, #1
 8005500:	f43f af27 	beq.w	8005352 <_printf_float+0xc2>
 8005504:	f108 0801 	add.w	r8, r8, #1
 8005508:	e7e6      	b.n	80054d8 <_printf_float+0x248>
 800550a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550c:	2b00      	cmp	r3, #0
 800550e:	dc39      	bgt.n	8005584 <_printf_float+0x2f4>
 8005510:	4a1b      	ldr	r2, [pc, #108]	; (8005580 <_printf_float+0x2f0>)
 8005512:	2301      	movs	r3, #1
 8005514:	4631      	mov	r1, r6
 8005516:	4628      	mov	r0, r5
 8005518:	47b8      	blx	r7
 800551a:	3001      	adds	r0, #1
 800551c:	f43f af19 	beq.w	8005352 <_printf_float+0xc2>
 8005520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005524:	4313      	orrs	r3, r2
 8005526:	d102      	bne.n	800552e <_printf_float+0x29e>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	07d9      	lsls	r1, r3, #31
 800552c:	d5d8      	bpl.n	80054e0 <_printf_float+0x250>
 800552e:	ee18 3a10 	vmov	r3, s16
 8005532:	4652      	mov	r2, sl
 8005534:	4631      	mov	r1, r6
 8005536:	4628      	mov	r0, r5
 8005538:	47b8      	blx	r7
 800553a:	3001      	adds	r0, #1
 800553c:	f43f af09 	beq.w	8005352 <_printf_float+0xc2>
 8005540:	f04f 0900 	mov.w	r9, #0
 8005544:	f104 0a1a 	add.w	sl, r4, #26
 8005548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554a:	425b      	negs	r3, r3
 800554c:	454b      	cmp	r3, r9
 800554e:	dc01      	bgt.n	8005554 <_printf_float+0x2c4>
 8005550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005552:	e792      	b.n	800547a <_printf_float+0x1ea>
 8005554:	2301      	movs	r3, #1
 8005556:	4652      	mov	r2, sl
 8005558:	4631      	mov	r1, r6
 800555a:	4628      	mov	r0, r5
 800555c:	47b8      	blx	r7
 800555e:	3001      	adds	r0, #1
 8005560:	f43f aef7 	beq.w	8005352 <_printf_float+0xc2>
 8005564:	f109 0901 	add.w	r9, r9, #1
 8005568:	e7ee      	b.n	8005548 <_printf_float+0x2b8>
 800556a:	bf00      	nop
 800556c:	7fefffff 	.word	0x7fefffff
 8005570:	08008394 	.word	0x08008394
 8005574:	08008398 	.word	0x08008398
 8005578:	080083a0 	.word	0x080083a0
 800557c:	0800839c 	.word	0x0800839c
 8005580:	080083a4 	.word	0x080083a4
 8005584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005586:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005588:	429a      	cmp	r2, r3
 800558a:	bfa8      	it	ge
 800558c:	461a      	movge	r2, r3
 800558e:	2a00      	cmp	r2, #0
 8005590:	4691      	mov	r9, r2
 8005592:	dc37      	bgt.n	8005604 <_printf_float+0x374>
 8005594:	f04f 0b00 	mov.w	fp, #0
 8005598:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800559c:	f104 021a 	add.w	r2, r4, #26
 80055a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055a2:	9305      	str	r3, [sp, #20]
 80055a4:	eba3 0309 	sub.w	r3, r3, r9
 80055a8:	455b      	cmp	r3, fp
 80055aa:	dc33      	bgt.n	8005614 <_printf_float+0x384>
 80055ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055b0:	429a      	cmp	r2, r3
 80055b2:	db3b      	blt.n	800562c <_printf_float+0x39c>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	07da      	lsls	r2, r3, #31
 80055b8:	d438      	bmi.n	800562c <_printf_float+0x39c>
 80055ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055bc:	9a05      	ldr	r2, [sp, #20]
 80055be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055c0:	1a9a      	subs	r2, r3, r2
 80055c2:	eba3 0901 	sub.w	r9, r3, r1
 80055c6:	4591      	cmp	r9, r2
 80055c8:	bfa8      	it	ge
 80055ca:	4691      	movge	r9, r2
 80055cc:	f1b9 0f00 	cmp.w	r9, #0
 80055d0:	dc35      	bgt.n	800563e <_printf_float+0x3ae>
 80055d2:	f04f 0800 	mov.w	r8, #0
 80055d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055da:	f104 0a1a 	add.w	sl, r4, #26
 80055de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055e2:	1a9b      	subs	r3, r3, r2
 80055e4:	eba3 0309 	sub.w	r3, r3, r9
 80055e8:	4543      	cmp	r3, r8
 80055ea:	f77f af79 	ble.w	80054e0 <_printf_float+0x250>
 80055ee:	2301      	movs	r3, #1
 80055f0:	4652      	mov	r2, sl
 80055f2:	4631      	mov	r1, r6
 80055f4:	4628      	mov	r0, r5
 80055f6:	47b8      	blx	r7
 80055f8:	3001      	adds	r0, #1
 80055fa:	f43f aeaa 	beq.w	8005352 <_printf_float+0xc2>
 80055fe:	f108 0801 	add.w	r8, r8, #1
 8005602:	e7ec      	b.n	80055de <_printf_float+0x34e>
 8005604:	4613      	mov	r3, r2
 8005606:	4631      	mov	r1, r6
 8005608:	4642      	mov	r2, r8
 800560a:	4628      	mov	r0, r5
 800560c:	47b8      	blx	r7
 800560e:	3001      	adds	r0, #1
 8005610:	d1c0      	bne.n	8005594 <_printf_float+0x304>
 8005612:	e69e      	b.n	8005352 <_printf_float+0xc2>
 8005614:	2301      	movs	r3, #1
 8005616:	4631      	mov	r1, r6
 8005618:	4628      	mov	r0, r5
 800561a:	9205      	str	r2, [sp, #20]
 800561c:	47b8      	blx	r7
 800561e:	3001      	adds	r0, #1
 8005620:	f43f ae97 	beq.w	8005352 <_printf_float+0xc2>
 8005624:	9a05      	ldr	r2, [sp, #20]
 8005626:	f10b 0b01 	add.w	fp, fp, #1
 800562a:	e7b9      	b.n	80055a0 <_printf_float+0x310>
 800562c:	ee18 3a10 	vmov	r3, s16
 8005630:	4652      	mov	r2, sl
 8005632:	4631      	mov	r1, r6
 8005634:	4628      	mov	r0, r5
 8005636:	47b8      	blx	r7
 8005638:	3001      	adds	r0, #1
 800563a:	d1be      	bne.n	80055ba <_printf_float+0x32a>
 800563c:	e689      	b.n	8005352 <_printf_float+0xc2>
 800563e:	9a05      	ldr	r2, [sp, #20]
 8005640:	464b      	mov	r3, r9
 8005642:	4442      	add	r2, r8
 8005644:	4631      	mov	r1, r6
 8005646:	4628      	mov	r0, r5
 8005648:	47b8      	blx	r7
 800564a:	3001      	adds	r0, #1
 800564c:	d1c1      	bne.n	80055d2 <_printf_float+0x342>
 800564e:	e680      	b.n	8005352 <_printf_float+0xc2>
 8005650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005652:	2a01      	cmp	r2, #1
 8005654:	dc01      	bgt.n	800565a <_printf_float+0x3ca>
 8005656:	07db      	lsls	r3, r3, #31
 8005658:	d538      	bpl.n	80056cc <_printf_float+0x43c>
 800565a:	2301      	movs	r3, #1
 800565c:	4642      	mov	r2, r8
 800565e:	4631      	mov	r1, r6
 8005660:	4628      	mov	r0, r5
 8005662:	47b8      	blx	r7
 8005664:	3001      	adds	r0, #1
 8005666:	f43f ae74 	beq.w	8005352 <_printf_float+0xc2>
 800566a:	ee18 3a10 	vmov	r3, s16
 800566e:	4652      	mov	r2, sl
 8005670:	4631      	mov	r1, r6
 8005672:	4628      	mov	r0, r5
 8005674:	47b8      	blx	r7
 8005676:	3001      	adds	r0, #1
 8005678:	f43f ae6b 	beq.w	8005352 <_printf_float+0xc2>
 800567c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005680:	2200      	movs	r2, #0
 8005682:	2300      	movs	r3, #0
 8005684:	f7fb fa20 	bl	8000ac8 <__aeabi_dcmpeq>
 8005688:	b9d8      	cbnz	r0, 80056c2 <_printf_float+0x432>
 800568a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800568c:	f108 0201 	add.w	r2, r8, #1
 8005690:	3b01      	subs	r3, #1
 8005692:	4631      	mov	r1, r6
 8005694:	4628      	mov	r0, r5
 8005696:	47b8      	blx	r7
 8005698:	3001      	adds	r0, #1
 800569a:	d10e      	bne.n	80056ba <_printf_float+0x42a>
 800569c:	e659      	b.n	8005352 <_printf_float+0xc2>
 800569e:	2301      	movs	r3, #1
 80056a0:	4652      	mov	r2, sl
 80056a2:	4631      	mov	r1, r6
 80056a4:	4628      	mov	r0, r5
 80056a6:	47b8      	blx	r7
 80056a8:	3001      	adds	r0, #1
 80056aa:	f43f ae52 	beq.w	8005352 <_printf_float+0xc2>
 80056ae:	f108 0801 	add.w	r8, r8, #1
 80056b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b4:	3b01      	subs	r3, #1
 80056b6:	4543      	cmp	r3, r8
 80056b8:	dcf1      	bgt.n	800569e <_printf_float+0x40e>
 80056ba:	464b      	mov	r3, r9
 80056bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056c0:	e6dc      	b.n	800547c <_printf_float+0x1ec>
 80056c2:	f04f 0800 	mov.w	r8, #0
 80056c6:	f104 0a1a 	add.w	sl, r4, #26
 80056ca:	e7f2      	b.n	80056b2 <_printf_float+0x422>
 80056cc:	2301      	movs	r3, #1
 80056ce:	4642      	mov	r2, r8
 80056d0:	e7df      	b.n	8005692 <_printf_float+0x402>
 80056d2:	2301      	movs	r3, #1
 80056d4:	464a      	mov	r2, r9
 80056d6:	4631      	mov	r1, r6
 80056d8:	4628      	mov	r0, r5
 80056da:	47b8      	blx	r7
 80056dc:	3001      	adds	r0, #1
 80056de:	f43f ae38 	beq.w	8005352 <_printf_float+0xc2>
 80056e2:	f108 0801 	add.w	r8, r8, #1
 80056e6:	68e3      	ldr	r3, [r4, #12]
 80056e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056ea:	1a5b      	subs	r3, r3, r1
 80056ec:	4543      	cmp	r3, r8
 80056ee:	dcf0      	bgt.n	80056d2 <_printf_float+0x442>
 80056f0:	e6fa      	b.n	80054e8 <_printf_float+0x258>
 80056f2:	f04f 0800 	mov.w	r8, #0
 80056f6:	f104 0919 	add.w	r9, r4, #25
 80056fa:	e7f4      	b.n	80056e6 <_printf_float+0x456>

080056fc <_printf_common>:
 80056fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005700:	4616      	mov	r6, r2
 8005702:	4699      	mov	r9, r3
 8005704:	688a      	ldr	r2, [r1, #8]
 8005706:	690b      	ldr	r3, [r1, #16]
 8005708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800570c:	4293      	cmp	r3, r2
 800570e:	bfb8      	it	lt
 8005710:	4613      	movlt	r3, r2
 8005712:	6033      	str	r3, [r6, #0]
 8005714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005718:	4607      	mov	r7, r0
 800571a:	460c      	mov	r4, r1
 800571c:	b10a      	cbz	r2, 8005722 <_printf_common+0x26>
 800571e:	3301      	adds	r3, #1
 8005720:	6033      	str	r3, [r6, #0]
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	0699      	lsls	r1, r3, #26
 8005726:	bf42      	ittt	mi
 8005728:	6833      	ldrmi	r3, [r6, #0]
 800572a:	3302      	addmi	r3, #2
 800572c:	6033      	strmi	r3, [r6, #0]
 800572e:	6825      	ldr	r5, [r4, #0]
 8005730:	f015 0506 	ands.w	r5, r5, #6
 8005734:	d106      	bne.n	8005744 <_printf_common+0x48>
 8005736:	f104 0a19 	add.w	sl, r4, #25
 800573a:	68e3      	ldr	r3, [r4, #12]
 800573c:	6832      	ldr	r2, [r6, #0]
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	42ab      	cmp	r3, r5
 8005742:	dc26      	bgt.n	8005792 <_printf_common+0x96>
 8005744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005748:	1e13      	subs	r3, r2, #0
 800574a:	6822      	ldr	r2, [r4, #0]
 800574c:	bf18      	it	ne
 800574e:	2301      	movne	r3, #1
 8005750:	0692      	lsls	r2, r2, #26
 8005752:	d42b      	bmi.n	80057ac <_printf_common+0xb0>
 8005754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005758:	4649      	mov	r1, r9
 800575a:	4638      	mov	r0, r7
 800575c:	47c0      	blx	r8
 800575e:	3001      	adds	r0, #1
 8005760:	d01e      	beq.n	80057a0 <_printf_common+0xa4>
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	68e5      	ldr	r5, [r4, #12]
 8005766:	6832      	ldr	r2, [r6, #0]
 8005768:	f003 0306 	and.w	r3, r3, #6
 800576c:	2b04      	cmp	r3, #4
 800576e:	bf08      	it	eq
 8005770:	1aad      	subeq	r5, r5, r2
 8005772:	68a3      	ldr	r3, [r4, #8]
 8005774:	6922      	ldr	r2, [r4, #16]
 8005776:	bf0c      	ite	eq
 8005778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800577c:	2500      	movne	r5, #0
 800577e:	4293      	cmp	r3, r2
 8005780:	bfc4      	itt	gt
 8005782:	1a9b      	subgt	r3, r3, r2
 8005784:	18ed      	addgt	r5, r5, r3
 8005786:	2600      	movs	r6, #0
 8005788:	341a      	adds	r4, #26
 800578a:	42b5      	cmp	r5, r6
 800578c:	d11a      	bne.n	80057c4 <_printf_common+0xc8>
 800578e:	2000      	movs	r0, #0
 8005790:	e008      	b.n	80057a4 <_printf_common+0xa8>
 8005792:	2301      	movs	r3, #1
 8005794:	4652      	mov	r2, sl
 8005796:	4649      	mov	r1, r9
 8005798:	4638      	mov	r0, r7
 800579a:	47c0      	blx	r8
 800579c:	3001      	adds	r0, #1
 800579e:	d103      	bne.n	80057a8 <_printf_common+0xac>
 80057a0:	f04f 30ff 	mov.w	r0, #4294967295
 80057a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a8:	3501      	adds	r5, #1
 80057aa:	e7c6      	b.n	800573a <_printf_common+0x3e>
 80057ac:	18e1      	adds	r1, r4, r3
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	2030      	movs	r0, #48	; 0x30
 80057b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057b6:	4422      	add	r2, r4
 80057b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057c0:	3302      	adds	r3, #2
 80057c2:	e7c7      	b.n	8005754 <_printf_common+0x58>
 80057c4:	2301      	movs	r3, #1
 80057c6:	4622      	mov	r2, r4
 80057c8:	4649      	mov	r1, r9
 80057ca:	4638      	mov	r0, r7
 80057cc:	47c0      	blx	r8
 80057ce:	3001      	adds	r0, #1
 80057d0:	d0e6      	beq.n	80057a0 <_printf_common+0xa4>
 80057d2:	3601      	adds	r6, #1
 80057d4:	e7d9      	b.n	800578a <_printf_common+0x8e>
	...

080057d8 <_printf_i>:
 80057d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057dc:	7e0f      	ldrb	r7, [r1, #24]
 80057de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057e0:	2f78      	cmp	r7, #120	; 0x78
 80057e2:	4691      	mov	r9, r2
 80057e4:	4680      	mov	r8, r0
 80057e6:	460c      	mov	r4, r1
 80057e8:	469a      	mov	sl, r3
 80057ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057ee:	d807      	bhi.n	8005800 <_printf_i+0x28>
 80057f0:	2f62      	cmp	r7, #98	; 0x62
 80057f2:	d80a      	bhi.n	800580a <_printf_i+0x32>
 80057f4:	2f00      	cmp	r7, #0
 80057f6:	f000 80d8 	beq.w	80059aa <_printf_i+0x1d2>
 80057fa:	2f58      	cmp	r7, #88	; 0x58
 80057fc:	f000 80a3 	beq.w	8005946 <_printf_i+0x16e>
 8005800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005808:	e03a      	b.n	8005880 <_printf_i+0xa8>
 800580a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800580e:	2b15      	cmp	r3, #21
 8005810:	d8f6      	bhi.n	8005800 <_printf_i+0x28>
 8005812:	a101      	add	r1, pc, #4	; (adr r1, 8005818 <_printf_i+0x40>)
 8005814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005818:	08005871 	.word	0x08005871
 800581c:	08005885 	.word	0x08005885
 8005820:	08005801 	.word	0x08005801
 8005824:	08005801 	.word	0x08005801
 8005828:	08005801 	.word	0x08005801
 800582c:	08005801 	.word	0x08005801
 8005830:	08005885 	.word	0x08005885
 8005834:	08005801 	.word	0x08005801
 8005838:	08005801 	.word	0x08005801
 800583c:	08005801 	.word	0x08005801
 8005840:	08005801 	.word	0x08005801
 8005844:	08005991 	.word	0x08005991
 8005848:	080058b5 	.word	0x080058b5
 800584c:	08005973 	.word	0x08005973
 8005850:	08005801 	.word	0x08005801
 8005854:	08005801 	.word	0x08005801
 8005858:	080059b3 	.word	0x080059b3
 800585c:	08005801 	.word	0x08005801
 8005860:	080058b5 	.word	0x080058b5
 8005864:	08005801 	.word	0x08005801
 8005868:	08005801 	.word	0x08005801
 800586c:	0800597b 	.word	0x0800597b
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	1d1a      	adds	r2, r3, #4
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	602a      	str	r2, [r5, #0]
 8005878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800587c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005880:	2301      	movs	r3, #1
 8005882:	e0a3      	b.n	80059cc <_printf_i+0x1f4>
 8005884:	6820      	ldr	r0, [r4, #0]
 8005886:	6829      	ldr	r1, [r5, #0]
 8005888:	0606      	lsls	r6, r0, #24
 800588a:	f101 0304 	add.w	r3, r1, #4
 800588e:	d50a      	bpl.n	80058a6 <_printf_i+0xce>
 8005890:	680e      	ldr	r6, [r1, #0]
 8005892:	602b      	str	r3, [r5, #0]
 8005894:	2e00      	cmp	r6, #0
 8005896:	da03      	bge.n	80058a0 <_printf_i+0xc8>
 8005898:	232d      	movs	r3, #45	; 0x2d
 800589a:	4276      	negs	r6, r6
 800589c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a0:	485e      	ldr	r0, [pc, #376]	; (8005a1c <_printf_i+0x244>)
 80058a2:	230a      	movs	r3, #10
 80058a4:	e019      	b.n	80058da <_printf_i+0x102>
 80058a6:	680e      	ldr	r6, [r1, #0]
 80058a8:	602b      	str	r3, [r5, #0]
 80058aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058ae:	bf18      	it	ne
 80058b0:	b236      	sxthne	r6, r6
 80058b2:	e7ef      	b.n	8005894 <_printf_i+0xbc>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	6820      	ldr	r0, [r4, #0]
 80058b8:	1d19      	adds	r1, r3, #4
 80058ba:	6029      	str	r1, [r5, #0]
 80058bc:	0601      	lsls	r1, r0, #24
 80058be:	d501      	bpl.n	80058c4 <_printf_i+0xec>
 80058c0:	681e      	ldr	r6, [r3, #0]
 80058c2:	e002      	b.n	80058ca <_printf_i+0xf2>
 80058c4:	0646      	lsls	r6, r0, #25
 80058c6:	d5fb      	bpl.n	80058c0 <_printf_i+0xe8>
 80058c8:	881e      	ldrh	r6, [r3, #0]
 80058ca:	4854      	ldr	r0, [pc, #336]	; (8005a1c <_printf_i+0x244>)
 80058cc:	2f6f      	cmp	r7, #111	; 0x6f
 80058ce:	bf0c      	ite	eq
 80058d0:	2308      	moveq	r3, #8
 80058d2:	230a      	movne	r3, #10
 80058d4:	2100      	movs	r1, #0
 80058d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058da:	6865      	ldr	r5, [r4, #4]
 80058dc:	60a5      	str	r5, [r4, #8]
 80058de:	2d00      	cmp	r5, #0
 80058e0:	bfa2      	ittt	ge
 80058e2:	6821      	ldrge	r1, [r4, #0]
 80058e4:	f021 0104 	bicge.w	r1, r1, #4
 80058e8:	6021      	strge	r1, [r4, #0]
 80058ea:	b90e      	cbnz	r6, 80058f0 <_printf_i+0x118>
 80058ec:	2d00      	cmp	r5, #0
 80058ee:	d04d      	beq.n	800598c <_printf_i+0x1b4>
 80058f0:	4615      	mov	r5, r2
 80058f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80058f6:	fb03 6711 	mls	r7, r3, r1, r6
 80058fa:	5dc7      	ldrb	r7, [r0, r7]
 80058fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005900:	4637      	mov	r7, r6
 8005902:	42bb      	cmp	r3, r7
 8005904:	460e      	mov	r6, r1
 8005906:	d9f4      	bls.n	80058f2 <_printf_i+0x11a>
 8005908:	2b08      	cmp	r3, #8
 800590a:	d10b      	bne.n	8005924 <_printf_i+0x14c>
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	07de      	lsls	r6, r3, #31
 8005910:	d508      	bpl.n	8005924 <_printf_i+0x14c>
 8005912:	6923      	ldr	r3, [r4, #16]
 8005914:	6861      	ldr	r1, [r4, #4]
 8005916:	4299      	cmp	r1, r3
 8005918:	bfde      	ittt	le
 800591a:	2330      	movle	r3, #48	; 0x30
 800591c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005920:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005924:	1b52      	subs	r2, r2, r5
 8005926:	6122      	str	r2, [r4, #16]
 8005928:	f8cd a000 	str.w	sl, [sp]
 800592c:	464b      	mov	r3, r9
 800592e:	aa03      	add	r2, sp, #12
 8005930:	4621      	mov	r1, r4
 8005932:	4640      	mov	r0, r8
 8005934:	f7ff fee2 	bl	80056fc <_printf_common>
 8005938:	3001      	adds	r0, #1
 800593a:	d14c      	bne.n	80059d6 <_printf_i+0x1fe>
 800593c:	f04f 30ff 	mov.w	r0, #4294967295
 8005940:	b004      	add	sp, #16
 8005942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005946:	4835      	ldr	r0, [pc, #212]	; (8005a1c <_printf_i+0x244>)
 8005948:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800594c:	6829      	ldr	r1, [r5, #0]
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	f851 6b04 	ldr.w	r6, [r1], #4
 8005954:	6029      	str	r1, [r5, #0]
 8005956:	061d      	lsls	r5, r3, #24
 8005958:	d514      	bpl.n	8005984 <_printf_i+0x1ac>
 800595a:	07df      	lsls	r7, r3, #31
 800595c:	bf44      	itt	mi
 800595e:	f043 0320 	orrmi.w	r3, r3, #32
 8005962:	6023      	strmi	r3, [r4, #0]
 8005964:	b91e      	cbnz	r6, 800596e <_printf_i+0x196>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	f023 0320 	bic.w	r3, r3, #32
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	2310      	movs	r3, #16
 8005970:	e7b0      	b.n	80058d4 <_printf_i+0xfc>
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	f043 0320 	orr.w	r3, r3, #32
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	2378      	movs	r3, #120	; 0x78
 800597c:	4828      	ldr	r0, [pc, #160]	; (8005a20 <_printf_i+0x248>)
 800597e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005982:	e7e3      	b.n	800594c <_printf_i+0x174>
 8005984:	0659      	lsls	r1, r3, #25
 8005986:	bf48      	it	mi
 8005988:	b2b6      	uxthmi	r6, r6
 800598a:	e7e6      	b.n	800595a <_printf_i+0x182>
 800598c:	4615      	mov	r5, r2
 800598e:	e7bb      	b.n	8005908 <_printf_i+0x130>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	6826      	ldr	r6, [r4, #0]
 8005994:	6961      	ldr	r1, [r4, #20]
 8005996:	1d18      	adds	r0, r3, #4
 8005998:	6028      	str	r0, [r5, #0]
 800599a:	0635      	lsls	r5, r6, #24
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	d501      	bpl.n	80059a4 <_printf_i+0x1cc>
 80059a0:	6019      	str	r1, [r3, #0]
 80059a2:	e002      	b.n	80059aa <_printf_i+0x1d2>
 80059a4:	0670      	lsls	r0, r6, #25
 80059a6:	d5fb      	bpl.n	80059a0 <_printf_i+0x1c8>
 80059a8:	8019      	strh	r1, [r3, #0]
 80059aa:	2300      	movs	r3, #0
 80059ac:	6123      	str	r3, [r4, #16]
 80059ae:	4615      	mov	r5, r2
 80059b0:	e7ba      	b.n	8005928 <_printf_i+0x150>
 80059b2:	682b      	ldr	r3, [r5, #0]
 80059b4:	1d1a      	adds	r2, r3, #4
 80059b6:	602a      	str	r2, [r5, #0]
 80059b8:	681d      	ldr	r5, [r3, #0]
 80059ba:	6862      	ldr	r2, [r4, #4]
 80059bc:	2100      	movs	r1, #0
 80059be:	4628      	mov	r0, r5
 80059c0:	f7fa fc0e 	bl	80001e0 <memchr>
 80059c4:	b108      	cbz	r0, 80059ca <_printf_i+0x1f2>
 80059c6:	1b40      	subs	r0, r0, r5
 80059c8:	6060      	str	r0, [r4, #4]
 80059ca:	6863      	ldr	r3, [r4, #4]
 80059cc:	6123      	str	r3, [r4, #16]
 80059ce:	2300      	movs	r3, #0
 80059d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d4:	e7a8      	b.n	8005928 <_printf_i+0x150>
 80059d6:	6923      	ldr	r3, [r4, #16]
 80059d8:	462a      	mov	r2, r5
 80059da:	4649      	mov	r1, r9
 80059dc:	4640      	mov	r0, r8
 80059de:	47d0      	blx	sl
 80059e0:	3001      	adds	r0, #1
 80059e2:	d0ab      	beq.n	800593c <_printf_i+0x164>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	079b      	lsls	r3, r3, #30
 80059e8:	d413      	bmi.n	8005a12 <_printf_i+0x23a>
 80059ea:	68e0      	ldr	r0, [r4, #12]
 80059ec:	9b03      	ldr	r3, [sp, #12]
 80059ee:	4298      	cmp	r0, r3
 80059f0:	bfb8      	it	lt
 80059f2:	4618      	movlt	r0, r3
 80059f4:	e7a4      	b.n	8005940 <_printf_i+0x168>
 80059f6:	2301      	movs	r3, #1
 80059f8:	4632      	mov	r2, r6
 80059fa:	4649      	mov	r1, r9
 80059fc:	4640      	mov	r0, r8
 80059fe:	47d0      	blx	sl
 8005a00:	3001      	adds	r0, #1
 8005a02:	d09b      	beq.n	800593c <_printf_i+0x164>
 8005a04:	3501      	adds	r5, #1
 8005a06:	68e3      	ldr	r3, [r4, #12]
 8005a08:	9903      	ldr	r1, [sp, #12]
 8005a0a:	1a5b      	subs	r3, r3, r1
 8005a0c:	42ab      	cmp	r3, r5
 8005a0e:	dcf2      	bgt.n	80059f6 <_printf_i+0x21e>
 8005a10:	e7eb      	b.n	80059ea <_printf_i+0x212>
 8005a12:	2500      	movs	r5, #0
 8005a14:	f104 0619 	add.w	r6, r4, #25
 8005a18:	e7f5      	b.n	8005a06 <_printf_i+0x22e>
 8005a1a:	bf00      	nop
 8005a1c:	080083a6 	.word	0x080083a6
 8005a20:	080083b7 	.word	0x080083b7

08005a24 <iprintf>:
 8005a24:	b40f      	push	{r0, r1, r2, r3}
 8005a26:	4b0a      	ldr	r3, [pc, #40]	; (8005a50 <iprintf+0x2c>)
 8005a28:	b513      	push	{r0, r1, r4, lr}
 8005a2a:	681c      	ldr	r4, [r3, #0]
 8005a2c:	b124      	cbz	r4, 8005a38 <iprintf+0x14>
 8005a2e:	69a3      	ldr	r3, [r4, #24]
 8005a30:	b913      	cbnz	r3, 8005a38 <iprintf+0x14>
 8005a32:	4620      	mov	r0, r4
 8005a34:	f001 f8d8 	bl	8006be8 <__sinit>
 8005a38:	ab05      	add	r3, sp, #20
 8005a3a:	9a04      	ldr	r2, [sp, #16]
 8005a3c:	68a1      	ldr	r1, [r4, #8]
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	4620      	mov	r0, r4
 8005a42:	f001 fe87 	bl	8007754 <_vfiprintf_r>
 8005a46:	b002      	add	sp, #8
 8005a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a4c:	b004      	add	sp, #16
 8005a4e:	4770      	bx	lr
 8005a50:	20000018 	.word	0x20000018

08005a54 <_puts_r>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	460e      	mov	r6, r1
 8005a58:	4605      	mov	r5, r0
 8005a5a:	b118      	cbz	r0, 8005a64 <_puts_r+0x10>
 8005a5c:	6983      	ldr	r3, [r0, #24]
 8005a5e:	b90b      	cbnz	r3, 8005a64 <_puts_r+0x10>
 8005a60:	f001 f8c2 	bl	8006be8 <__sinit>
 8005a64:	69ab      	ldr	r3, [r5, #24]
 8005a66:	68ac      	ldr	r4, [r5, #8]
 8005a68:	b913      	cbnz	r3, 8005a70 <_puts_r+0x1c>
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f001 f8bc 	bl	8006be8 <__sinit>
 8005a70:	4b2c      	ldr	r3, [pc, #176]	; (8005b24 <_puts_r+0xd0>)
 8005a72:	429c      	cmp	r4, r3
 8005a74:	d120      	bne.n	8005ab8 <_puts_r+0x64>
 8005a76:	686c      	ldr	r4, [r5, #4]
 8005a78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a7a:	07db      	lsls	r3, r3, #31
 8005a7c:	d405      	bmi.n	8005a8a <_puts_r+0x36>
 8005a7e:	89a3      	ldrh	r3, [r4, #12]
 8005a80:	0598      	lsls	r0, r3, #22
 8005a82:	d402      	bmi.n	8005a8a <_puts_r+0x36>
 8005a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a86:	f001 f952 	bl	8006d2e <__retarget_lock_acquire_recursive>
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	0719      	lsls	r1, r3, #28
 8005a8e:	d51d      	bpl.n	8005acc <_puts_r+0x78>
 8005a90:	6923      	ldr	r3, [r4, #16]
 8005a92:	b1db      	cbz	r3, 8005acc <_puts_r+0x78>
 8005a94:	3e01      	subs	r6, #1
 8005a96:	68a3      	ldr	r3, [r4, #8]
 8005a98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	60a3      	str	r3, [r4, #8]
 8005aa0:	bb39      	cbnz	r1, 8005af2 <_puts_r+0x9e>
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	da38      	bge.n	8005b18 <_puts_r+0xc4>
 8005aa6:	4622      	mov	r2, r4
 8005aa8:	210a      	movs	r1, #10
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f000 f848 	bl	8005b40 <__swbuf_r>
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d011      	beq.n	8005ad8 <_puts_r+0x84>
 8005ab4:	250a      	movs	r5, #10
 8005ab6:	e011      	b.n	8005adc <_puts_r+0x88>
 8005ab8:	4b1b      	ldr	r3, [pc, #108]	; (8005b28 <_puts_r+0xd4>)
 8005aba:	429c      	cmp	r4, r3
 8005abc:	d101      	bne.n	8005ac2 <_puts_r+0x6e>
 8005abe:	68ac      	ldr	r4, [r5, #8]
 8005ac0:	e7da      	b.n	8005a78 <_puts_r+0x24>
 8005ac2:	4b1a      	ldr	r3, [pc, #104]	; (8005b2c <_puts_r+0xd8>)
 8005ac4:	429c      	cmp	r4, r3
 8005ac6:	bf08      	it	eq
 8005ac8:	68ec      	ldreq	r4, [r5, #12]
 8005aca:	e7d5      	b.n	8005a78 <_puts_r+0x24>
 8005acc:	4621      	mov	r1, r4
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f000 f888 	bl	8005be4 <__swsetup_r>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d0dd      	beq.n	8005a94 <_puts_r+0x40>
 8005ad8:	f04f 35ff 	mov.w	r5, #4294967295
 8005adc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ade:	07da      	lsls	r2, r3, #31
 8005ae0:	d405      	bmi.n	8005aee <_puts_r+0x9a>
 8005ae2:	89a3      	ldrh	r3, [r4, #12]
 8005ae4:	059b      	lsls	r3, r3, #22
 8005ae6:	d402      	bmi.n	8005aee <_puts_r+0x9a>
 8005ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aea:	f001 f921 	bl	8006d30 <__retarget_lock_release_recursive>
 8005aee:	4628      	mov	r0, r5
 8005af0:	bd70      	pop	{r4, r5, r6, pc}
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	da04      	bge.n	8005b00 <_puts_r+0xac>
 8005af6:	69a2      	ldr	r2, [r4, #24]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	dc06      	bgt.n	8005b0a <_puts_r+0xb6>
 8005afc:	290a      	cmp	r1, #10
 8005afe:	d004      	beq.n	8005b0a <_puts_r+0xb6>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	6022      	str	r2, [r4, #0]
 8005b06:	7019      	strb	r1, [r3, #0]
 8005b08:	e7c5      	b.n	8005a96 <_puts_r+0x42>
 8005b0a:	4622      	mov	r2, r4
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	f000 f817 	bl	8005b40 <__swbuf_r>
 8005b12:	3001      	adds	r0, #1
 8005b14:	d1bf      	bne.n	8005a96 <_puts_r+0x42>
 8005b16:	e7df      	b.n	8005ad8 <_puts_r+0x84>
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	250a      	movs	r5, #10
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	6022      	str	r2, [r4, #0]
 8005b20:	701d      	strb	r5, [r3, #0]
 8005b22:	e7db      	b.n	8005adc <_puts_r+0x88>
 8005b24:	08008478 	.word	0x08008478
 8005b28:	08008498 	.word	0x08008498
 8005b2c:	08008458 	.word	0x08008458

08005b30 <puts>:
 8005b30:	4b02      	ldr	r3, [pc, #8]	; (8005b3c <puts+0xc>)
 8005b32:	4601      	mov	r1, r0
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	f7ff bf8d 	b.w	8005a54 <_puts_r>
 8005b3a:	bf00      	nop
 8005b3c:	20000018 	.word	0x20000018

08005b40 <__swbuf_r>:
 8005b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b42:	460e      	mov	r6, r1
 8005b44:	4614      	mov	r4, r2
 8005b46:	4605      	mov	r5, r0
 8005b48:	b118      	cbz	r0, 8005b52 <__swbuf_r+0x12>
 8005b4a:	6983      	ldr	r3, [r0, #24]
 8005b4c:	b90b      	cbnz	r3, 8005b52 <__swbuf_r+0x12>
 8005b4e:	f001 f84b 	bl	8006be8 <__sinit>
 8005b52:	4b21      	ldr	r3, [pc, #132]	; (8005bd8 <__swbuf_r+0x98>)
 8005b54:	429c      	cmp	r4, r3
 8005b56:	d12b      	bne.n	8005bb0 <__swbuf_r+0x70>
 8005b58:	686c      	ldr	r4, [r5, #4]
 8005b5a:	69a3      	ldr	r3, [r4, #24]
 8005b5c:	60a3      	str	r3, [r4, #8]
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	071a      	lsls	r2, r3, #28
 8005b62:	d52f      	bpl.n	8005bc4 <__swbuf_r+0x84>
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	b36b      	cbz	r3, 8005bc4 <__swbuf_r+0x84>
 8005b68:	6923      	ldr	r3, [r4, #16]
 8005b6a:	6820      	ldr	r0, [r4, #0]
 8005b6c:	1ac0      	subs	r0, r0, r3
 8005b6e:	6963      	ldr	r3, [r4, #20]
 8005b70:	b2f6      	uxtb	r6, r6
 8005b72:	4283      	cmp	r3, r0
 8005b74:	4637      	mov	r7, r6
 8005b76:	dc04      	bgt.n	8005b82 <__swbuf_r+0x42>
 8005b78:	4621      	mov	r1, r4
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f000 ffa0 	bl	8006ac0 <_fflush_r>
 8005b80:	bb30      	cbnz	r0, 8005bd0 <__swbuf_r+0x90>
 8005b82:	68a3      	ldr	r3, [r4, #8]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	60a3      	str	r3, [r4, #8]
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	6022      	str	r2, [r4, #0]
 8005b8e:	701e      	strb	r6, [r3, #0]
 8005b90:	6963      	ldr	r3, [r4, #20]
 8005b92:	3001      	adds	r0, #1
 8005b94:	4283      	cmp	r3, r0
 8005b96:	d004      	beq.n	8005ba2 <__swbuf_r+0x62>
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	07db      	lsls	r3, r3, #31
 8005b9c:	d506      	bpl.n	8005bac <__swbuf_r+0x6c>
 8005b9e:	2e0a      	cmp	r6, #10
 8005ba0:	d104      	bne.n	8005bac <__swbuf_r+0x6c>
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	f000 ff8b 	bl	8006ac0 <_fflush_r>
 8005baa:	b988      	cbnz	r0, 8005bd0 <__swbuf_r+0x90>
 8005bac:	4638      	mov	r0, r7
 8005bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bb0:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <__swbuf_r+0x9c>)
 8005bb2:	429c      	cmp	r4, r3
 8005bb4:	d101      	bne.n	8005bba <__swbuf_r+0x7a>
 8005bb6:	68ac      	ldr	r4, [r5, #8]
 8005bb8:	e7cf      	b.n	8005b5a <__swbuf_r+0x1a>
 8005bba:	4b09      	ldr	r3, [pc, #36]	; (8005be0 <__swbuf_r+0xa0>)
 8005bbc:	429c      	cmp	r4, r3
 8005bbe:	bf08      	it	eq
 8005bc0:	68ec      	ldreq	r4, [r5, #12]
 8005bc2:	e7ca      	b.n	8005b5a <__swbuf_r+0x1a>
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f000 f80c 	bl	8005be4 <__swsetup_r>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d0cb      	beq.n	8005b68 <__swbuf_r+0x28>
 8005bd0:	f04f 37ff 	mov.w	r7, #4294967295
 8005bd4:	e7ea      	b.n	8005bac <__swbuf_r+0x6c>
 8005bd6:	bf00      	nop
 8005bd8:	08008478 	.word	0x08008478
 8005bdc:	08008498 	.word	0x08008498
 8005be0:	08008458 	.word	0x08008458

08005be4 <__swsetup_r>:
 8005be4:	4b32      	ldr	r3, [pc, #200]	; (8005cb0 <__swsetup_r+0xcc>)
 8005be6:	b570      	push	{r4, r5, r6, lr}
 8005be8:	681d      	ldr	r5, [r3, #0]
 8005bea:	4606      	mov	r6, r0
 8005bec:	460c      	mov	r4, r1
 8005bee:	b125      	cbz	r5, 8005bfa <__swsetup_r+0x16>
 8005bf0:	69ab      	ldr	r3, [r5, #24]
 8005bf2:	b913      	cbnz	r3, 8005bfa <__swsetup_r+0x16>
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	f000 fff7 	bl	8006be8 <__sinit>
 8005bfa:	4b2e      	ldr	r3, [pc, #184]	; (8005cb4 <__swsetup_r+0xd0>)
 8005bfc:	429c      	cmp	r4, r3
 8005bfe:	d10f      	bne.n	8005c20 <__swsetup_r+0x3c>
 8005c00:	686c      	ldr	r4, [r5, #4]
 8005c02:	89a3      	ldrh	r3, [r4, #12]
 8005c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c08:	0719      	lsls	r1, r3, #28
 8005c0a:	d42c      	bmi.n	8005c66 <__swsetup_r+0x82>
 8005c0c:	06dd      	lsls	r5, r3, #27
 8005c0e:	d411      	bmi.n	8005c34 <__swsetup_r+0x50>
 8005c10:	2309      	movs	r3, #9
 8005c12:	6033      	str	r3, [r6, #0]
 8005c14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c18:	81a3      	strh	r3, [r4, #12]
 8005c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1e:	e03e      	b.n	8005c9e <__swsetup_r+0xba>
 8005c20:	4b25      	ldr	r3, [pc, #148]	; (8005cb8 <__swsetup_r+0xd4>)
 8005c22:	429c      	cmp	r4, r3
 8005c24:	d101      	bne.n	8005c2a <__swsetup_r+0x46>
 8005c26:	68ac      	ldr	r4, [r5, #8]
 8005c28:	e7eb      	b.n	8005c02 <__swsetup_r+0x1e>
 8005c2a:	4b24      	ldr	r3, [pc, #144]	; (8005cbc <__swsetup_r+0xd8>)
 8005c2c:	429c      	cmp	r4, r3
 8005c2e:	bf08      	it	eq
 8005c30:	68ec      	ldreq	r4, [r5, #12]
 8005c32:	e7e6      	b.n	8005c02 <__swsetup_r+0x1e>
 8005c34:	0758      	lsls	r0, r3, #29
 8005c36:	d512      	bpl.n	8005c5e <__swsetup_r+0x7a>
 8005c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c3a:	b141      	cbz	r1, 8005c4e <__swsetup_r+0x6a>
 8005c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c40:	4299      	cmp	r1, r3
 8005c42:	d002      	beq.n	8005c4a <__swsetup_r+0x66>
 8005c44:	4630      	mov	r0, r6
 8005c46:	f001 fc7b 	bl	8007540 <_free_r>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	6363      	str	r3, [r4, #52]	; 0x34
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c54:	81a3      	strh	r3, [r4, #12]
 8005c56:	2300      	movs	r3, #0
 8005c58:	6063      	str	r3, [r4, #4]
 8005c5a:	6923      	ldr	r3, [r4, #16]
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	89a3      	ldrh	r3, [r4, #12]
 8005c60:	f043 0308 	orr.w	r3, r3, #8
 8005c64:	81a3      	strh	r3, [r4, #12]
 8005c66:	6923      	ldr	r3, [r4, #16]
 8005c68:	b94b      	cbnz	r3, 8005c7e <__swsetup_r+0x9a>
 8005c6a:	89a3      	ldrh	r3, [r4, #12]
 8005c6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c74:	d003      	beq.n	8005c7e <__swsetup_r+0x9a>
 8005c76:	4621      	mov	r1, r4
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f001 f87f 	bl	8006d7c <__smakebuf_r>
 8005c7e:	89a0      	ldrh	r0, [r4, #12]
 8005c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c84:	f010 0301 	ands.w	r3, r0, #1
 8005c88:	d00a      	beq.n	8005ca0 <__swsetup_r+0xbc>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60a3      	str	r3, [r4, #8]
 8005c8e:	6963      	ldr	r3, [r4, #20]
 8005c90:	425b      	negs	r3, r3
 8005c92:	61a3      	str	r3, [r4, #24]
 8005c94:	6923      	ldr	r3, [r4, #16]
 8005c96:	b943      	cbnz	r3, 8005caa <__swsetup_r+0xc6>
 8005c98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c9c:	d1ba      	bne.n	8005c14 <__swsetup_r+0x30>
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ca0:	0781      	lsls	r1, r0, #30
 8005ca2:	bf58      	it	pl
 8005ca4:	6963      	ldrpl	r3, [r4, #20]
 8005ca6:	60a3      	str	r3, [r4, #8]
 8005ca8:	e7f4      	b.n	8005c94 <__swsetup_r+0xb0>
 8005caa:	2000      	movs	r0, #0
 8005cac:	e7f7      	b.n	8005c9e <__swsetup_r+0xba>
 8005cae:	bf00      	nop
 8005cb0:	20000018 	.word	0x20000018
 8005cb4:	08008478 	.word	0x08008478
 8005cb8:	08008498 	.word	0x08008498
 8005cbc:	08008458 	.word	0x08008458

08005cc0 <quorem>:
 8005cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc4:	6903      	ldr	r3, [r0, #16]
 8005cc6:	690c      	ldr	r4, [r1, #16]
 8005cc8:	42a3      	cmp	r3, r4
 8005cca:	4607      	mov	r7, r0
 8005ccc:	f2c0 8081 	blt.w	8005dd2 <quorem+0x112>
 8005cd0:	3c01      	subs	r4, #1
 8005cd2:	f101 0814 	add.w	r8, r1, #20
 8005cd6:	f100 0514 	add.w	r5, r0, #20
 8005cda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cde:	9301      	str	r3, [sp, #4]
 8005ce0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ce4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	429a      	cmp	r2, r3
 8005cec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005cf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cf4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cf8:	d331      	bcc.n	8005d5e <quorem+0x9e>
 8005cfa:	f04f 0e00 	mov.w	lr, #0
 8005cfe:	4640      	mov	r0, r8
 8005d00:	46ac      	mov	ip, r5
 8005d02:	46f2      	mov	sl, lr
 8005d04:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d08:	b293      	uxth	r3, r2
 8005d0a:	fb06 e303 	mla	r3, r6, r3, lr
 8005d0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	ebaa 0303 	sub.w	r3, sl, r3
 8005d18:	f8dc a000 	ldr.w	sl, [ip]
 8005d1c:	0c12      	lsrs	r2, r2, #16
 8005d1e:	fa13 f38a 	uxtah	r3, r3, sl
 8005d22:	fb06 e202 	mla	r2, r6, r2, lr
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	9b00      	ldr	r3, [sp, #0]
 8005d2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d2e:	b292      	uxth	r2, r2
 8005d30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d38:	f8bd 3000 	ldrh.w	r3, [sp]
 8005d3c:	4581      	cmp	r9, r0
 8005d3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d42:	f84c 3b04 	str.w	r3, [ip], #4
 8005d46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d4a:	d2db      	bcs.n	8005d04 <quorem+0x44>
 8005d4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d50:	b92b      	cbnz	r3, 8005d5e <quorem+0x9e>
 8005d52:	9b01      	ldr	r3, [sp, #4]
 8005d54:	3b04      	subs	r3, #4
 8005d56:	429d      	cmp	r5, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	d32e      	bcc.n	8005dba <quorem+0xfa>
 8005d5c:	613c      	str	r4, [r7, #16]
 8005d5e:	4638      	mov	r0, r7
 8005d60:	f001 fad6 	bl	8007310 <__mcmp>
 8005d64:	2800      	cmp	r0, #0
 8005d66:	db24      	blt.n	8005db2 <quorem+0xf2>
 8005d68:	3601      	adds	r6, #1
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	f04f 0c00 	mov.w	ip, #0
 8005d70:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d74:	f8d0 e000 	ldr.w	lr, [r0]
 8005d78:	b293      	uxth	r3, r2
 8005d7a:	ebac 0303 	sub.w	r3, ip, r3
 8005d7e:	0c12      	lsrs	r2, r2, #16
 8005d80:	fa13 f38e 	uxtah	r3, r3, lr
 8005d84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d92:	45c1      	cmp	r9, r8
 8005d94:	f840 3b04 	str.w	r3, [r0], #4
 8005d98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d9c:	d2e8      	bcs.n	8005d70 <quorem+0xb0>
 8005d9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005da2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005da6:	b922      	cbnz	r2, 8005db2 <quorem+0xf2>
 8005da8:	3b04      	subs	r3, #4
 8005daa:	429d      	cmp	r5, r3
 8005dac:	461a      	mov	r2, r3
 8005dae:	d30a      	bcc.n	8005dc6 <quorem+0x106>
 8005db0:	613c      	str	r4, [r7, #16]
 8005db2:	4630      	mov	r0, r6
 8005db4:	b003      	add	sp, #12
 8005db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	3b04      	subs	r3, #4
 8005dbe:	2a00      	cmp	r2, #0
 8005dc0:	d1cc      	bne.n	8005d5c <quorem+0x9c>
 8005dc2:	3c01      	subs	r4, #1
 8005dc4:	e7c7      	b.n	8005d56 <quorem+0x96>
 8005dc6:	6812      	ldr	r2, [r2, #0]
 8005dc8:	3b04      	subs	r3, #4
 8005dca:	2a00      	cmp	r2, #0
 8005dcc:	d1f0      	bne.n	8005db0 <quorem+0xf0>
 8005dce:	3c01      	subs	r4, #1
 8005dd0:	e7eb      	b.n	8005daa <quorem+0xea>
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	e7ee      	b.n	8005db4 <quorem+0xf4>
	...

08005dd8 <_dtoa_r>:
 8005dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ddc:	ed2d 8b04 	vpush	{d8-d9}
 8005de0:	ec57 6b10 	vmov	r6, r7, d0
 8005de4:	b093      	sub	sp, #76	; 0x4c
 8005de6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005de8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005dec:	9106      	str	r1, [sp, #24]
 8005dee:	ee10 aa10 	vmov	sl, s0
 8005df2:	4604      	mov	r4, r0
 8005df4:	9209      	str	r2, [sp, #36]	; 0x24
 8005df6:	930c      	str	r3, [sp, #48]	; 0x30
 8005df8:	46bb      	mov	fp, r7
 8005dfa:	b975      	cbnz	r5, 8005e1a <_dtoa_r+0x42>
 8005dfc:	2010      	movs	r0, #16
 8005dfe:	f000 fffd 	bl	8006dfc <malloc>
 8005e02:	4602      	mov	r2, r0
 8005e04:	6260      	str	r0, [r4, #36]	; 0x24
 8005e06:	b920      	cbnz	r0, 8005e12 <_dtoa_r+0x3a>
 8005e08:	4ba7      	ldr	r3, [pc, #668]	; (80060a8 <_dtoa_r+0x2d0>)
 8005e0a:	21ea      	movs	r1, #234	; 0xea
 8005e0c:	48a7      	ldr	r0, [pc, #668]	; (80060ac <_dtoa_r+0x2d4>)
 8005e0e:	f001 fe37 	bl	8007a80 <__assert_func>
 8005e12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e16:	6005      	str	r5, [r0, #0]
 8005e18:	60c5      	str	r5, [r0, #12]
 8005e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e1c:	6819      	ldr	r1, [r3, #0]
 8005e1e:	b151      	cbz	r1, 8005e36 <_dtoa_r+0x5e>
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	604a      	str	r2, [r1, #4]
 8005e24:	2301      	movs	r3, #1
 8005e26:	4093      	lsls	r3, r2
 8005e28:	608b      	str	r3, [r1, #8]
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f001 f82e 	bl	8006e8c <_Bfree>
 8005e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	1e3b      	subs	r3, r7, #0
 8005e38:	bfaa      	itet	ge
 8005e3a:	2300      	movge	r3, #0
 8005e3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005e40:	f8c8 3000 	strge.w	r3, [r8]
 8005e44:	4b9a      	ldr	r3, [pc, #616]	; (80060b0 <_dtoa_r+0x2d8>)
 8005e46:	bfbc      	itt	lt
 8005e48:	2201      	movlt	r2, #1
 8005e4a:	f8c8 2000 	strlt.w	r2, [r8]
 8005e4e:	ea33 030b 	bics.w	r3, r3, fp
 8005e52:	d11b      	bne.n	8005e8c <_dtoa_r+0xb4>
 8005e54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e56:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e5a:	6013      	str	r3, [r2, #0]
 8005e5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e60:	4333      	orrs	r3, r6
 8005e62:	f000 8592 	beq.w	800698a <_dtoa_r+0xbb2>
 8005e66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e68:	b963      	cbnz	r3, 8005e84 <_dtoa_r+0xac>
 8005e6a:	4b92      	ldr	r3, [pc, #584]	; (80060b4 <_dtoa_r+0x2dc>)
 8005e6c:	e022      	b.n	8005eb4 <_dtoa_r+0xdc>
 8005e6e:	4b92      	ldr	r3, [pc, #584]	; (80060b8 <_dtoa_r+0x2e0>)
 8005e70:	9301      	str	r3, [sp, #4]
 8005e72:	3308      	adds	r3, #8
 8005e74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	9801      	ldr	r0, [sp, #4]
 8005e7a:	b013      	add	sp, #76	; 0x4c
 8005e7c:	ecbd 8b04 	vpop	{d8-d9}
 8005e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e84:	4b8b      	ldr	r3, [pc, #556]	; (80060b4 <_dtoa_r+0x2dc>)
 8005e86:	9301      	str	r3, [sp, #4]
 8005e88:	3303      	adds	r3, #3
 8005e8a:	e7f3      	b.n	8005e74 <_dtoa_r+0x9c>
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2300      	movs	r3, #0
 8005e90:	4650      	mov	r0, sl
 8005e92:	4659      	mov	r1, fp
 8005e94:	f7fa fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e98:	ec4b ab19 	vmov	d9, sl, fp
 8005e9c:	4680      	mov	r8, r0
 8005e9e:	b158      	cbz	r0, 8005eb8 <_dtoa_r+0xe0>
 8005ea0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 856b 	beq.w	8006984 <_dtoa_r+0xbac>
 8005eae:	4883      	ldr	r0, [pc, #524]	; (80060bc <_dtoa_r+0x2e4>)
 8005eb0:	6018      	str	r0, [r3, #0]
 8005eb2:	1e43      	subs	r3, r0, #1
 8005eb4:	9301      	str	r3, [sp, #4]
 8005eb6:	e7df      	b.n	8005e78 <_dtoa_r+0xa0>
 8005eb8:	ec4b ab10 	vmov	d0, sl, fp
 8005ebc:	aa10      	add	r2, sp, #64	; 0x40
 8005ebe:	a911      	add	r1, sp, #68	; 0x44
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f001 facb 	bl	800745c <__d2b>
 8005ec6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005eca:	ee08 0a10 	vmov	s16, r0
 8005ece:	2d00      	cmp	r5, #0
 8005ed0:	f000 8084 	beq.w	8005fdc <_dtoa_r+0x204>
 8005ed4:	ee19 3a90 	vmov	r3, s19
 8005ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005edc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005ee0:	4656      	mov	r6, sl
 8005ee2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005ee6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005eea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005eee:	4b74      	ldr	r3, [pc, #464]	; (80060c0 <_dtoa_r+0x2e8>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	4639      	mov	r1, r7
 8005ef6:	f7fa f9c7 	bl	8000288 <__aeabi_dsub>
 8005efa:	a365      	add	r3, pc, #404	; (adr r3, 8006090 <_dtoa_r+0x2b8>)
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f7fa fb7a 	bl	80005f8 <__aeabi_dmul>
 8005f04:	a364      	add	r3, pc, #400	; (adr r3, 8006098 <_dtoa_r+0x2c0>)
 8005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0a:	f7fa f9bf 	bl	800028c <__adddf3>
 8005f0e:	4606      	mov	r6, r0
 8005f10:	4628      	mov	r0, r5
 8005f12:	460f      	mov	r7, r1
 8005f14:	f7fa fb06 	bl	8000524 <__aeabi_i2d>
 8005f18:	a361      	add	r3, pc, #388	; (adr r3, 80060a0 <_dtoa_r+0x2c8>)
 8005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1e:	f7fa fb6b 	bl	80005f8 <__aeabi_dmul>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4630      	mov	r0, r6
 8005f28:	4639      	mov	r1, r7
 8005f2a:	f7fa f9af 	bl	800028c <__adddf3>
 8005f2e:	4606      	mov	r6, r0
 8005f30:	460f      	mov	r7, r1
 8005f32:	f7fa fe11 	bl	8000b58 <__aeabi_d2iz>
 8005f36:	2200      	movs	r2, #0
 8005f38:	9000      	str	r0, [sp, #0]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	4639      	mov	r1, r7
 8005f40:	f7fa fdcc 	bl	8000adc <__aeabi_dcmplt>
 8005f44:	b150      	cbz	r0, 8005f5c <_dtoa_r+0x184>
 8005f46:	9800      	ldr	r0, [sp, #0]
 8005f48:	f7fa faec 	bl	8000524 <__aeabi_i2d>
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	463b      	mov	r3, r7
 8005f50:	f7fa fdba 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f54:	b910      	cbnz	r0, 8005f5c <_dtoa_r+0x184>
 8005f56:	9b00      	ldr	r3, [sp, #0]
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	9b00      	ldr	r3, [sp, #0]
 8005f5e:	2b16      	cmp	r3, #22
 8005f60:	d85a      	bhi.n	8006018 <_dtoa_r+0x240>
 8005f62:	9a00      	ldr	r2, [sp, #0]
 8005f64:	4b57      	ldr	r3, [pc, #348]	; (80060c4 <_dtoa_r+0x2ec>)
 8005f66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	ec51 0b19 	vmov	r0, r1, d9
 8005f72:	f7fa fdb3 	bl	8000adc <__aeabi_dcmplt>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	d050      	beq.n	800601c <_dtoa_r+0x244>
 8005f7a:	9b00      	ldr	r3, [sp, #0]
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	2300      	movs	r3, #0
 8005f82:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f86:	1b5d      	subs	r5, r3, r5
 8005f88:	1e6b      	subs	r3, r5, #1
 8005f8a:	9305      	str	r3, [sp, #20]
 8005f8c:	bf45      	ittet	mi
 8005f8e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005f92:	9304      	strmi	r3, [sp, #16]
 8005f94:	2300      	movpl	r3, #0
 8005f96:	2300      	movmi	r3, #0
 8005f98:	bf4c      	ite	mi
 8005f9a:	9305      	strmi	r3, [sp, #20]
 8005f9c:	9304      	strpl	r3, [sp, #16]
 8005f9e:	9b00      	ldr	r3, [sp, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	db3d      	blt.n	8006020 <_dtoa_r+0x248>
 8005fa4:	9b05      	ldr	r3, [sp, #20]
 8005fa6:	9a00      	ldr	r2, [sp, #0]
 8005fa8:	920a      	str	r2, [sp, #40]	; 0x28
 8005faa:	4413      	add	r3, r2
 8005fac:	9305      	str	r3, [sp, #20]
 8005fae:	2300      	movs	r3, #0
 8005fb0:	9307      	str	r3, [sp, #28]
 8005fb2:	9b06      	ldr	r3, [sp, #24]
 8005fb4:	2b09      	cmp	r3, #9
 8005fb6:	f200 8089 	bhi.w	80060cc <_dtoa_r+0x2f4>
 8005fba:	2b05      	cmp	r3, #5
 8005fbc:	bfc4      	itt	gt
 8005fbe:	3b04      	subgt	r3, #4
 8005fc0:	9306      	strgt	r3, [sp, #24]
 8005fc2:	9b06      	ldr	r3, [sp, #24]
 8005fc4:	f1a3 0302 	sub.w	r3, r3, #2
 8005fc8:	bfcc      	ite	gt
 8005fca:	2500      	movgt	r5, #0
 8005fcc:	2501      	movle	r5, #1
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	f200 8087 	bhi.w	80060e2 <_dtoa_r+0x30a>
 8005fd4:	e8df f003 	tbb	[pc, r3]
 8005fd8:	59383a2d 	.word	0x59383a2d
 8005fdc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005fe0:	441d      	add	r5, r3
 8005fe2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	bfc1      	itttt	gt
 8005fea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005fee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005ff2:	fa0b f303 	lslgt.w	r3, fp, r3
 8005ff6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005ffa:	bfda      	itte	le
 8005ffc:	f1c3 0320 	rsble	r3, r3, #32
 8006000:	fa06 f003 	lslle.w	r0, r6, r3
 8006004:	4318      	orrgt	r0, r3
 8006006:	f7fa fa7d 	bl	8000504 <__aeabi_ui2d>
 800600a:	2301      	movs	r3, #1
 800600c:	4606      	mov	r6, r0
 800600e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006012:	3d01      	subs	r5, #1
 8006014:	930e      	str	r3, [sp, #56]	; 0x38
 8006016:	e76a      	b.n	8005eee <_dtoa_r+0x116>
 8006018:	2301      	movs	r3, #1
 800601a:	e7b2      	b.n	8005f82 <_dtoa_r+0x1aa>
 800601c:	900b      	str	r0, [sp, #44]	; 0x2c
 800601e:	e7b1      	b.n	8005f84 <_dtoa_r+0x1ac>
 8006020:	9b04      	ldr	r3, [sp, #16]
 8006022:	9a00      	ldr	r2, [sp, #0]
 8006024:	1a9b      	subs	r3, r3, r2
 8006026:	9304      	str	r3, [sp, #16]
 8006028:	4253      	negs	r3, r2
 800602a:	9307      	str	r3, [sp, #28]
 800602c:	2300      	movs	r3, #0
 800602e:	930a      	str	r3, [sp, #40]	; 0x28
 8006030:	e7bf      	b.n	8005fb2 <_dtoa_r+0x1da>
 8006032:	2300      	movs	r3, #0
 8006034:	9308      	str	r3, [sp, #32]
 8006036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006038:	2b00      	cmp	r3, #0
 800603a:	dc55      	bgt.n	80060e8 <_dtoa_r+0x310>
 800603c:	2301      	movs	r3, #1
 800603e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006042:	461a      	mov	r2, r3
 8006044:	9209      	str	r2, [sp, #36]	; 0x24
 8006046:	e00c      	b.n	8006062 <_dtoa_r+0x28a>
 8006048:	2301      	movs	r3, #1
 800604a:	e7f3      	b.n	8006034 <_dtoa_r+0x25c>
 800604c:	2300      	movs	r3, #0
 800604e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006050:	9308      	str	r3, [sp, #32]
 8006052:	9b00      	ldr	r3, [sp, #0]
 8006054:	4413      	add	r3, r2
 8006056:	9302      	str	r3, [sp, #8]
 8006058:	3301      	adds	r3, #1
 800605a:	2b01      	cmp	r3, #1
 800605c:	9303      	str	r3, [sp, #12]
 800605e:	bfb8      	it	lt
 8006060:	2301      	movlt	r3, #1
 8006062:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006064:	2200      	movs	r2, #0
 8006066:	6042      	str	r2, [r0, #4]
 8006068:	2204      	movs	r2, #4
 800606a:	f102 0614 	add.w	r6, r2, #20
 800606e:	429e      	cmp	r6, r3
 8006070:	6841      	ldr	r1, [r0, #4]
 8006072:	d93d      	bls.n	80060f0 <_dtoa_r+0x318>
 8006074:	4620      	mov	r0, r4
 8006076:	f000 fec9 	bl	8006e0c <_Balloc>
 800607a:	9001      	str	r0, [sp, #4]
 800607c:	2800      	cmp	r0, #0
 800607e:	d13b      	bne.n	80060f8 <_dtoa_r+0x320>
 8006080:	4b11      	ldr	r3, [pc, #68]	; (80060c8 <_dtoa_r+0x2f0>)
 8006082:	4602      	mov	r2, r0
 8006084:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006088:	e6c0      	b.n	8005e0c <_dtoa_r+0x34>
 800608a:	2301      	movs	r3, #1
 800608c:	e7df      	b.n	800604e <_dtoa_r+0x276>
 800608e:	bf00      	nop
 8006090:	636f4361 	.word	0x636f4361
 8006094:	3fd287a7 	.word	0x3fd287a7
 8006098:	8b60c8b3 	.word	0x8b60c8b3
 800609c:	3fc68a28 	.word	0x3fc68a28
 80060a0:	509f79fb 	.word	0x509f79fb
 80060a4:	3fd34413 	.word	0x3fd34413
 80060a8:	080083d5 	.word	0x080083d5
 80060ac:	080083ec 	.word	0x080083ec
 80060b0:	7ff00000 	.word	0x7ff00000
 80060b4:	080083d1 	.word	0x080083d1
 80060b8:	080083c8 	.word	0x080083c8
 80060bc:	080083a5 	.word	0x080083a5
 80060c0:	3ff80000 	.word	0x3ff80000
 80060c4:	08008540 	.word	0x08008540
 80060c8:	08008447 	.word	0x08008447
 80060cc:	2501      	movs	r5, #1
 80060ce:	2300      	movs	r3, #0
 80060d0:	9306      	str	r3, [sp, #24]
 80060d2:	9508      	str	r5, [sp, #32]
 80060d4:	f04f 33ff 	mov.w	r3, #4294967295
 80060d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060dc:	2200      	movs	r2, #0
 80060de:	2312      	movs	r3, #18
 80060e0:	e7b0      	b.n	8006044 <_dtoa_r+0x26c>
 80060e2:	2301      	movs	r3, #1
 80060e4:	9308      	str	r3, [sp, #32]
 80060e6:	e7f5      	b.n	80060d4 <_dtoa_r+0x2fc>
 80060e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060ee:	e7b8      	b.n	8006062 <_dtoa_r+0x28a>
 80060f0:	3101      	adds	r1, #1
 80060f2:	6041      	str	r1, [r0, #4]
 80060f4:	0052      	lsls	r2, r2, #1
 80060f6:	e7b8      	b.n	800606a <_dtoa_r+0x292>
 80060f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060fa:	9a01      	ldr	r2, [sp, #4]
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	9b03      	ldr	r3, [sp, #12]
 8006100:	2b0e      	cmp	r3, #14
 8006102:	f200 809d 	bhi.w	8006240 <_dtoa_r+0x468>
 8006106:	2d00      	cmp	r5, #0
 8006108:	f000 809a 	beq.w	8006240 <_dtoa_r+0x468>
 800610c:	9b00      	ldr	r3, [sp, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	dd32      	ble.n	8006178 <_dtoa_r+0x3a0>
 8006112:	4ab7      	ldr	r2, [pc, #732]	; (80063f0 <_dtoa_r+0x618>)
 8006114:	f003 030f 	and.w	r3, r3, #15
 8006118:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800611c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006120:	9b00      	ldr	r3, [sp, #0]
 8006122:	05d8      	lsls	r0, r3, #23
 8006124:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006128:	d516      	bpl.n	8006158 <_dtoa_r+0x380>
 800612a:	4bb2      	ldr	r3, [pc, #712]	; (80063f4 <_dtoa_r+0x61c>)
 800612c:	ec51 0b19 	vmov	r0, r1, d9
 8006130:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006134:	f7fa fb8a 	bl	800084c <__aeabi_ddiv>
 8006138:	f007 070f 	and.w	r7, r7, #15
 800613c:	4682      	mov	sl, r0
 800613e:	468b      	mov	fp, r1
 8006140:	2503      	movs	r5, #3
 8006142:	4eac      	ldr	r6, [pc, #688]	; (80063f4 <_dtoa_r+0x61c>)
 8006144:	b957      	cbnz	r7, 800615c <_dtoa_r+0x384>
 8006146:	4642      	mov	r2, r8
 8006148:	464b      	mov	r3, r9
 800614a:	4650      	mov	r0, sl
 800614c:	4659      	mov	r1, fp
 800614e:	f7fa fb7d 	bl	800084c <__aeabi_ddiv>
 8006152:	4682      	mov	sl, r0
 8006154:	468b      	mov	fp, r1
 8006156:	e028      	b.n	80061aa <_dtoa_r+0x3d2>
 8006158:	2502      	movs	r5, #2
 800615a:	e7f2      	b.n	8006142 <_dtoa_r+0x36a>
 800615c:	07f9      	lsls	r1, r7, #31
 800615e:	d508      	bpl.n	8006172 <_dtoa_r+0x39a>
 8006160:	4640      	mov	r0, r8
 8006162:	4649      	mov	r1, r9
 8006164:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006168:	f7fa fa46 	bl	80005f8 <__aeabi_dmul>
 800616c:	3501      	adds	r5, #1
 800616e:	4680      	mov	r8, r0
 8006170:	4689      	mov	r9, r1
 8006172:	107f      	asrs	r7, r7, #1
 8006174:	3608      	adds	r6, #8
 8006176:	e7e5      	b.n	8006144 <_dtoa_r+0x36c>
 8006178:	f000 809b 	beq.w	80062b2 <_dtoa_r+0x4da>
 800617c:	9b00      	ldr	r3, [sp, #0]
 800617e:	4f9d      	ldr	r7, [pc, #628]	; (80063f4 <_dtoa_r+0x61c>)
 8006180:	425e      	negs	r6, r3
 8006182:	4b9b      	ldr	r3, [pc, #620]	; (80063f0 <_dtoa_r+0x618>)
 8006184:	f006 020f 	and.w	r2, r6, #15
 8006188:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006190:	ec51 0b19 	vmov	r0, r1, d9
 8006194:	f7fa fa30 	bl	80005f8 <__aeabi_dmul>
 8006198:	1136      	asrs	r6, r6, #4
 800619a:	4682      	mov	sl, r0
 800619c:	468b      	mov	fp, r1
 800619e:	2300      	movs	r3, #0
 80061a0:	2502      	movs	r5, #2
 80061a2:	2e00      	cmp	r6, #0
 80061a4:	d17a      	bne.n	800629c <_dtoa_r+0x4c4>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1d3      	bne.n	8006152 <_dtoa_r+0x37a>
 80061aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 8082 	beq.w	80062b6 <_dtoa_r+0x4de>
 80061b2:	4b91      	ldr	r3, [pc, #580]	; (80063f8 <_dtoa_r+0x620>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	4650      	mov	r0, sl
 80061b8:	4659      	mov	r1, fp
 80061ba:	f7fa fc8f 	bl	8000adc <__aeabi_dcmplt>
 80061be:	2800      	cmp	r0, #0
 80061c0:	d079      	beq.n	80062b6 <_dtoa_r+0x4de>
 80061c2:	9b03      	ldr	r3, [sp, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d076      	beq.n	80062b6 <_dtoa_r+0x4de>
 80061c8:	9b02      	ldr	r3, [sp, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	dd36      	ble.n	800623c <_dtoa_r+0x464>
 80061ce:	9b00      	ldr	r3, [sp, #0]
 80061d0:	4650      	mov	r0, sl
 80061d2:	4659      	mov	r1, fp
 80061d4:	1e5f      	subs	r7, r3, #1
 80061d6:	2200      	movs	r2, #0
 80061d8:	4b88      	ldr	r3, [pc, #544]	; (80063fc <_dtoa_r+0x624>)
 80061da:	f7fa fa0d 	bl	80005f8 <__aeabi_dmul>
 80061de:	9e02      	ldr	r6, [sp, #8]
 80061e0:	4682      	mov	sl, r0
 80061e2:	468b      	mov	fp, r1
 80061e4:	3501      	adds	r5, #1
 80061e6:	4628      	mov	r0, r5
 80061e8:	f7fa f99c 	bl	8000524 <__aeabi_i2d>
 80061ec:	4652      	mov	r2, sl
 80061ee:	465b      	mov	r3, fp
 80061f0:	f7fa fa02 	bl	80005f8 <__aeabi_dmul>
 80061f4:	4b82      	ldr	r3, [pc, #520]	; (8006400 <_dtoa_r+0x628>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	f7fa f848 	bl	800028c <__adddf3>
 80061fc:	46d0      	mov	r8, sl
 80061fe:	46d9      	mov	r9, fp
 8006200:	4682      	mov	sl, r0
 8006202:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006206:	2e00      	cmp	r6, #0
 8006208:	d158      	bne.n	80062bc <_dtoa_r+0x4e4>
 800620a:	4b7e      	ldr	r3, [pc, #504]	; (8006404 <_dtoa_r+0x62c>)
 800620c:	2200      	movs	r2, #0
 800620e:	4640      	mov	r0, r8
 8006210:	4649      	mov	r1, r9
 8006212:	f7fa f839 	bl	8000288 <__aeabi_dsub>
 8006216:	4652      	mov	r2, sl
 8006218:	465b      	mov	r3, fp
 800621a:	4680      	mov	r8, r0
 800621c:	4689      	mov	r9, r1
 800621e:	f7fa fc7b 	bl	8000b18 <__aeabi_dcmpgt>
 8006222:	2800      	cmp	r0, #0
 8006224:	f040 8295 	bne.w	8006752 <_dtoa_r+0x97a>
 8006228:	4652      	mov	r2, sl
 800622a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800622e:	4640      	mov	r0, r8
 8006230:	4649      	mov	r1, r9
 8006232:	f7fa fc53 	bl	8000adc <__aeabi_dcmplt>
 8006236:	2800      	cmp	r0, #0
 8006238:	f040 8289 	bne.w	800674e <_dtoa_r+0x976>
 800623c:	ec5b ab19 	vmov	sl, fp, d9
 8006240:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006242:	2b00      	cmp	r3, #0
 8006244:	f2c0 8148 	blt.w	80064d8 <_dtoa_r+0x700>
 8006248:	9a00      	ldr	r2, [sp, #0]
 800624a:	2a0e      	cmp	r2, #14
 800624c:	f300 8144 	bgt.w	80064d8 <_dtoa_r+0x700>
 8006250:	4b67      	ldr	r3, [pc, #412]	; (80063f0 <_dtoa_r+0x618>)
 8006252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006256:	e9d3 8900 	ldrd	r8, r9, [r3]
 800625a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800625c:	2b00      	cmp	r3, #0
 800625e:	f280 80d5 	bge.w	800640c <_dtoa_r+0x634>
 8006262:	9b03      	ldr	r3, [sp, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f300 80d1 	bgt.w	800640c <_dtoa_r+0x634>
 800626a:	f040 826f 	bne.w	800674c <_dtoa_r+0x974>
 800626e:	4b65      	ldr	r3, [pc, #404]	; (8006404 <_dtoa_r+0x62c>)
 8006270:	2200      	movs	r2, #0
 8006272:	4640      	mov	r0, r8
 8006274:	4649      	mov	r1, r9
 8006276:	f7fa f9bf 	bl	80005f8 <__aeabi_dmul>
 800627a:	4652      	mov	r2, sl
 800627c:	465b      	mov	r3, fp
 800627e:	f7fa fc41 	bl	8000b04 <__aeabi_dcmpge>
 8006282:	9e03      	ldr	r6, [sp, #12]
 8006284:	4637      	mov	r7, r6
 8006286:	2800      	cmp	r0, #0
 8006288:	f040 8245 	bne.w	8006716 <_dtoa_r+0x93e>
 800628c:	9d01      	ldr	r5, [sp, #4]
 800628e:	2331      	movs	r3, #49	; 0x31
 8006290:	f805 3b01 	strb.w	r3, [r5], #1
 8006294:	9b00      	ldr	r3, [sp, #0]
 8006296:	3301      	adds	r3, #1
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	e240      	b.n	800671e <_dtoa_r+0x946>
 800629c:	07f2      	lsls	r2, r6, #31
 800629e:	d505      	bpl.n	80062ac <_dtoa_r+0x4d4>
 80062a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062a4:	f7fa f9a8 	bl	80005f8 <__aeabi_dmul>
 80062a8:	3501      	adds	r5, #1
 80062aa:	2301      	movs	r3, #1
 80062ac:	1076      	asrs	r6, r6, #1
 80062ae:	3708      	adds	r7, #8
 80062b0:	e777      	b.n	80061a2 <_dtoa_r+0x3ca>
 80062b2:	2502      	movs	r5, #2
 80062b4:	e779      	b.n	80061aa <_dtoa_r+0x3d2>
 80062b6:	9f00      	ldr	r7, [sp, #0]
 80062b8:	9e03      	ldr	r6, [sp, #12]
 80062ba:	e794      	b.n	80061e6 <_dtoa_r+0x40e>
 80062bc:	9901      	ldr	r1, [sp, #4]
 80062be:	4b4c      	ldr	r3, [pc, #304]	; (80063f0 <_dtoa_r+0x618>)
 80062c0:	4431      	add	r1, r6
 80062c2:	910d      	str	r1, [sp, #52]	; 0x34
 80062c4:	9908      	ldr	r1, [sp, #32]
 80062c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80062ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062ce:	2900      	cmp	r1, #0
 80062d0:	d043      	beq.n	800635a <_dtoa_r+0x582>
 80062d2:	494d      	ldr	r1, [pc, #308]	; (8006408 <_dtoa_r+0x630>)
 80062d4:	2000      	movs	r0, #0
 80062d6:	f7fa fab9 	bl	800084c <__aeabi_ddiv>
 80062da:	4652      	mov	r2, sl
 80062dc:	465b      	mov	r3, fp
 80062de:	f7f9 ffd3 	bl	8000288 <__aeabi_dsub>
 80062e2:	9d01      	ldr	r5, [sp, #4]
 80062e4:	4682      	mov	sl, r0
 80062e6:	468b      	mov	fp, r1
 80062e8:	4649      	mov	r1, r9
 80062ea:	4640      	mov	r0, r8
 80062ec:	f7fa fc34 	bl	8000b58 <__aeabi_d2iz>
 80062f0:	4606      	mov	r6, r0
 80062f2:	f7fa f917 	bl	8000524 <__aeabi_i2d>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	4640      	mov	r0, r8
 80062fc:	4649      	mov	r1, r9
 80062fe:	f7f9 ffc3 	bl	8000288 <__aeabi_dsub>
 8006302:	3630      	adds	r6, #48	; 0x30
 8006304:	f805 6b01 	strb.w	r6, [r5], #1
 8006308:	4652      	mov	r2, sl
 800630a:	465b      	mov	r3, fp
 800630c:	4680      	mov	r8, r0
 800630e:	4689      	mov	r9, r1
 8006310:	f7fa fbe4 	bl	8000adc <__aeabi_dcmplt>
 8006314:	2800      	cmp	r0, #0
 8006316:	d163      	bne.n	80063e0 <_dtoa_r+0x608>
 8006318:	4642      	mov	r2, r8
 800631a:	464b      	mov	r3, r9
 800631c:	4936      	ldr	r1, [pc, #216]	; (80063f8 <_dtoa_r+0x620>)
 800631e:	2000      	movs	r0, #0
 8006320:	f7f9 ffb2 	bl	8000288 <__aeabi_dsub>
 8006324:	4652      	mov	r2, sl
 8006326:	465b      	mov	r3, fp
 8006328:	f7fa fbd8 	bl	8000adc <__aeabi_dcmplt>
 800632c:	2800      	cmp	r0, #0
 800632e:	f040 80b5 	bne.w	800649c <_dtoa_r+0x6c4>
 8006332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006334:	429d      	cmp	r5, r3
 8006336:	d081      	beq.n	800623c <_dtoa_r+0x464>
 8006338:	4b30      	ldr	r3, [pc, #192]	; (80063fc <_dtoa_r+0x624>)
 800633a:	2200      	movs	r2, #0
 800633c:	4650      	mov	r0, sl
 800633e:	4659      	mov	r1, fp
 8006340:	f7fa f95a 	bl	80005f8 <__aeabi_dmul>
 8006344:	4b2d      	ldr	r3, [pc, #180]	; (80063fc <_dtoa_r+0x624>)
 8006346:	4682      	mov	sl, r0
 8006348:	468b      	mov	fp, r1
 800634a:	4640      	mov	r0, r8
 800634c:	4649      	mov	r1, r9
 800634e:	2200      	movs	r2, #0
 8006350:	f7fa f952 	bl	80005f8 <__aeabi_dmul>
 8006354:	4680      	mov	r8, r0
 8006356:	4689      	mov	r9, r1
 8006358:	e7c6      	b.n	80062e8 <_dtoa_r+0x510>
 800635a:	4650      	mov	r0, sl
 800635c:	4659      	mov	r1, fp
 800635e:	f7fa f94b 	bl	80005f8 <__aeabi_dmul>
 8006362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006364:	9d01      	ldr	r5, [sp, #4]
 8006366:	930f      	str	r3, [sp, #60]	; 0x3c
 8006368:	4682      	mov	sl, r0
 800636a:	468b      	mov	fp, r1
 800636c:	4649      	mov	r1, r9
 800636e:	4640      	mov	r0, r8
 8006370:	f7fa fbf2 	bl	8000b58 <__aeabi_d2iz>
 8006374:	4606      	mov	r6, r0
 8006376:	f7fa f8d5 	bl	8000524 <__aeabi_i2d>
 800637a:	3630      	adds	r6, #48	; 0x30
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4640      	mov	r0, r8
 8006382:	4649      	mov	r1, r9
 8006384:	f7f9 ff80 	bl	8000288 <__aeabi_dsub>
 8006388:	f805 6b01 	strb.w	r6, [r5], #1
 800638c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800638e:	429d      	cmp	r5, r3
 8006390:	4680      	mov	r8, r0
 8006392:	4689      	mov	r9, r1
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	d124      	bne.n	80063e4 <_dtoa_r+0x60c>
 800639a:	4b1b      	ldr	r3, [pc, #108]	; (8006408 <_dtoa_r+0x630>)
 800639c:	4650      	mov	r0, sl
 800639e:	4659      	mov	r1, fp
 80063a0:	f7f9 ff74 	bl	800028c <__adddf3>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4640      	mov	r0, r8
 80063aa:	4649      	mov	r1, r9
 80063ac:	f7fa fbb4 	bl	8000b18 <__aeabi_dcmpgt>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d173      	bne.n	800649c <_dtoa_r+0x6c4>
 80063b4:	4652      	mov	r2, sl
 80063b6:	465b      	mov	r3, fp
 80063b8:	4913      	ldr	r1, [pc, #76]	; (8006408 <_dtoa_r+0x630>)
 80063ba:	2000      	movs	r0, #0
 80063bc:	f7f9 ff64 	bl	8000288 <__aeabi_dsub>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4640      	mov	r0, r8
 80063c6:	4649      	mov	r1, r9
 80063c8:	f7fa fb88 	bl	8000adc <__aeabi_dcmplt>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	f43f af35 	beq.w	800623c <_dtoa_r+0x464>
 80063d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80063d4:	1e6b      	subs	r3, r5, #1
 80063d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80063d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063dc:	2b30      	cmp	r3, #48	; 0x30
 80063de:	d0f8      	beq.n	80063d2 <_dtoa_r+0x5fa>
 80063e0:	9700      	str	r7, [sp, #0]
 80063e2:	e049      	b.n	8006478 <_dtoa_r+0x6a0>
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <_dtoa_r+0x624>)
 80063e6:	f7fa f907 	bl	80005f8 <__aeabi_dmul>
 80063ea:	4680      	mov	r8, r0
 80063ec:	4689      	mov	r9, r1
 80063ee:	e7bd      	b.n	800636c <_dtoa_r+0x594>
 80063f0:	08008540 	.word	0x08008540
 80063f4:	08008518 	.word	0x08008518
 80063f8:	3ff00000 	.word	0x3ff00000
 80063fc:	40240000 	.word	0x40240000
 8006400:	401c0000 	.word	0x401c0000
 8006404:	40140000 	.word	0x40140000
 8006408:	3fe00000 	.word	0x3fe00000
 800640c:	9d01      	ldr	r5, [sp, #4]
 800640e:	4656      	mov	r6, sl
 8006410:	465f      	mov	r7, fp
 8006412:	4642      	mov	r2, r8
 8006414:	464b      	mov	r3, r9
 8006416:	4630      	mov	r0, r6
 8006418:	4639      	mov	r1, r7
 800641a:	f7fa fa17 	bl	800084c <__aeabi_ddiv>
 800641e:	f7fa fb9b 	bl	8000b58 <__aeabi_d2iz>
 8006422:	4682      	mov	sl, r0
 8006424:	f7fa f87e 	bl	8000524 <__aeabi_i2d>
 8006428:	4642      	mov	r2, r8
 800642a:	464b      	mov	r3, r9
 800642c:	f7fa f8e4 	bl	80005f8 <__aeabi_dmul>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	4630      	mov	r0, r6
 8006436:	4639      	mov	r1, r7
 8006438:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800643c:	f7f9 ff24 	bl	8000288 <__aeabi_dsub>
 8006440:	f805 6b01 	strb.w	r6, [r5], #1
 8006444:	9e01      	ldr	r6, [sp, #4]
 8006446:	9f03      	ldr	r7, [sp, #12]
 8006448:	1bae      	subs	r6, r5, r6
 800644a:	42b7      	cmp	r7, r6
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	d135      	bne.n	80064be <_dtoa_r+0x6e6>
 8006452:	f7f9 ff1b 	bl	800028c <__adddf3>
 8006456:	4642      	mov	r2, r8
 8006458:	464b      	mov	r3, r9
 800645a:	4606      	mov	r6, r0
 800645c:	460f      	mov	r7, r1
 800645e:	f7fa fb5b 	bl	8000b18 <__aeabi_dcmpgt>
 8006462:	b9d0      	cbnz	r0, 800649a <_dtoa_r+0x6c2>
 8006464:	4642      	mov	r2, r8
 8006466:	464b      	mov	r3, r9
 8006468:	4630      	mov	r0, r6
 800646a:	4639      	mov	r1, r7
 800646c:	f7fa fb2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006470:	b110      	cbz	r0, 8006478 <_dtoa_r+0x6a0>
 8006472:	f01a 0f01 	tst.w	sl, #1
 8006476:	d110      	bne.n	800649a <_dtoa_r+0x6c2>
 8006478:	4620      	mov	r0, r4
 800647a:	ee18 1a10 	vmov	r1, s16
 800647e:	f000 fd05 	bl	8006e8c <_Bfree>
 8006482:	2300      	movs	r3, #0
 8006484:	9800      	ldr	r0, [sp, #0]
 8006486:	702b      	strb	r3, [r5, #0]
 8006488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800648a:	3001      	adds	r0, #1
 800648c:	6018      	str	r0, [r3, #0]
 800648e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006490:	2b00      	cmp	r3, #0
 8006492:	f43f acf1 	beq.w	8005e78 <_dtoa_r+0xa0>
 8006496:	601d      	str	r5, [r3, #0]
 8006498:	e4ee      	b.n	8005e78 <_dtoa_r+0xa0>
 800649a:	9f00      	ldr	r7, [sp, #0]
 800649c:	462b      	mov	r3, r5
 800649e:	461d      	mov	r5, r3
 80064a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064a4:	2a39      	cmp	r2, #57	; 0x39
 80064a6:	d106      	bne.n	80064b6 <_dtoa_r+0x6de>
 80064a8:	9a01      	ldr	r2, [sp, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d1f7      	bne.n	800649e <_dtoa_r+0x6c6>
 80064ae:	9901      	ldr	r1, [sp, #4]
 80064b0:	2230      	movs	r2, #48	; 0x30
 80064b2:	3701      	adds	r7, #1
 80064b4:	700a      	strb	r2, [r1, #0]
 80064b6:	781a      	ldrb	r2, [r3, #0]
 80064b8:	3201      	adds	r2, #1
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	e790      	b.n	80063e0 <_dtoa_r+0x608>
 80064be:	4ba6      	ldr	r3, [pc, #664]	; (8006758 <_dtoa_r+0x980>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	f7fa f899 	bl	80005f8 <__aeabi_dmul>
 80064c6:	2200      	movs	r2, #0
 80064c8:	2300      	movs	r3, #0
 80064ca:	4606      	mov	r6, r0
 80064cc:	460f      	mov	r7, r1
 80064ce:	f7fa fafb 	bl	8000ac8 <__aeabi_dcmpeq>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d09d      	beq.n	8006412 <_dtoa_r+0x63a>
 80064d6:	e7cf      	b.n	8006478 <_dtoa_r+0x6a0>
 80064d8:	9a08      	ldr	r2, [sp, #32]
 80064da:	2a00      	cmp	r2, #0
 80064dc:	f000 80d7 	beq.w	800668e <_dtoa_r+0x8b6>
 80064e0:	9a06      	ldr	r2, [sp, #24]
 80064e2:	2a01      	cmp	r2, #1
 80064e4:	f300 80ba 	bgt.w	800665c <_dtoa_r+0x884>
 80064e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064ea:	2a00      	cmp	r2, #0
 80064ec:	f000 80b2 	beq.w	8006654 <_dtoa_r+0x87c>
 80064f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064f4:	9e07      	ldr	r6, [sp, #28]
 80064f6:	9d04      	ldr	r5, [sp, #16]
 80064f8:	9a04      	ldr	r2, [sp, #16]
 80064fa:	441a      	add	r2, r3
 80064fc:	9204      	str	r2, [sp, #16]
 80064fe:	9a05      	ldr	r2, [sp, #20]
 8006500:	2101      	movs	r1, #1
 8006502:	441a      	add	r2, r3
 8006504:	4620      	mov	r0, r4
 8006506:	9205      	str	r2, [sp, #20]
 8006508:	f000 fd78 	bl	8006ffc <__i2b>
 800650c:	4607      	mov	r7, r0
 800650e:	2d00      	cmp	r5, #0
 8006510:	dd0c      	ble.n	800652c <_dtoa_r+0x754>
 8006512:	9b05      	ldr	r3, [sp, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	dd09      	ble.n	800652c <_dtoa_r+0x754>
 8006518:	42ab      	cmp	r3, r5
 800651a:	9a04      	ldr	r2, [sp, #16]
 800651c:	bfa8      	it	ge
 800651e:	462b      	movge	r3, r5
 8006520:	1ad2      	subs	r2, r2, r3
 8006522:	9204      	str	r2, [sp, #16]
 8006524:	9a05      	ldr	r2, [sp, #20]
 8006526:	1aed      	subs	r5, r5, r3
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	9305      	str	r3, [sp, #20]
 800652c:	9b07      	ldr	r3, [sp, #28]
 800652e:	b31b      	cbz	r3, 8006578 <_dtoa_r+0x7a0>
 8006530:	9b08      	ldr	r3, [sp, #32]
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 80af 	beq.w	8006696 <_dtoa_r+0x8be>
 8006538:	2e00      	cmp	r6, #0
 800653a:	dd13      	ble.n	8006564 <_dtoa_r+0x78c>
 800653c:	4639      	mov	r1, r7
 800653e:	4632      	mov	r2, r6
 8006540:	4620      	mov	r0, r4
 8006542:	f000 fe1b 	bl	800717c <__pow5mult>
 8006546:	ee18 2a10 	vmov	r2, s16
 800654a:	4601      	mov	r1, r0
 800654c:	4607      	mov	r7, r0
 800654e:	4620      	mov	r0, r4
 8006550:	f000 fd6a 	bl	8007028 <__multiply>
 8006554:	ee18 1a10 	vmov	r1, s16
 8006558:	4680      	mov	r8, r0
 800655a:	4620      	mov	r0, r4
 800655c:	f000 fc96 	bl	8006e8c <_Bfree>
 8006560:	ee08 8a10 	vmov	s16, r8
 8006564:	9b07      	ldr	r3, [sp, #28]
 8006566:	1b9a      	subs	r2, r3, r6
 8006568:	d006      	beq.n	8006578 <_dtoa_r+0x7a0>
 800656a:	ee18 1a10 	vmov	r1, s16
 800656e:	4620      	mov	r0, r4
 8006570:	f000 fe04 	bl	800717c <__pow5mult>
 8006574:	ee08 0a10 	vmov	s16, r0
 8006578:	2101      	movs	r1, #1
 800657a:	4620      	mov	r0, r4
 800657c:	f000 fd3e 	bl	8006ffc <__i2b>
 8006580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006582:	2b00      	cmp	r3, #0
 8006584:	4606      	mov	r6, r0
 8006586:	f340 8088 	ble.w	800669a <_dtoa_r+0x8c2>
 800658a:	461a      	mov	r2, r3
 800658c:	4601      	mov	r1, r0
 800658e:	4620      	mov	r0, r4
 8006590:	f000 fdf4 	bl	800717c <__pow5mult>
 8006594:	9b06      	ldr	r3, [sp, #24]
 8006596:	2b01      	cmp	r3, #1
 8006598:	4606      	mov	r6, r0
 800659a:	f340 8081 	ble.w	80066a0 <_dtoa_r+0x8c8>
 800659e:	f04f 0800 	mov.w	r8, #0
 80065a2:	6933      	ldr	r3, [r6, #16]
 80065a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80065a8:	6918      	ldr	r0, [r3, #16]
 80065aa:	f000 fcd7 	bl	8006f5c <__hi0bits>
 80065ae:	f1c0 0020 	rsb	r0, r0, #32
 80065b2:	9b05      	ldr	r3, [sp, #20]
 80065b4:	4418      	add	r0, r3
 80065b6:	f010 001f 	ands.w	r0, r0, #31
 80065ba:	f000 8092 	beq.w	80066e2 <_dtoa_r+0x90a>
 80065be:	f1c0 0320 	rsb	r3, r0, #32
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	f340 808a 	ble.w	80066dc <_dtoa_r+0x904>
 80065c8:	f1c0 001c 	rsb	r0, r0, #28
 80065cc:	9b04      	ldr	r3, [sp, #16]
 80065ce:	4403      	add	r3, r0
 80065d0:	9304      	str	r3, [sp, #16]
 80065d2:	9b05      	ldr	r3, [sp, #20]
 80065d4:	4403      	add	r3, r0
 80065d6:	4405      	add	r5, r0
 80065d8:	9305      	str	r3, [sp, #20]
 80065da:	9b04      	ldr	r3, [sp, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	dd07      	ble.n	80065f0 <_dtoa_r+0x818>
 80065e0:	ee18 1a10 	vmov	r1, s16
 80065e4:	461a      	mov	r2, r3
 80065e6:	4620      	mov	r0, r4
 80065e8:	f000 fe22 	bl	8007230 <__lshift>
 80065ec:	ee08 0a10 	vmov	s16, r0
 80065f0:	9b05      	ldr	r3, [sp, #20]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	dd05      	ble.n	8006602 <_dtoa_r+0x82a>
 80065f6:	4631      	mov	r1, r6
 80065f8:	461a      	mov	r2, r3
 80065fa:	4620      	mov	r0, r4
 80065fc:	f000 fe18 	bl	8007230 <__lshift>
 8006600:	4606      	mov	r6, r0
 8006602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006604:	2b00      	cmp	r3, #0
 8006606:	d06e      	beq.n	80066e6 <_dtoa_r+0x90e>
 8006608:	ee18 0a10 	vmov	r0, s16
 800660c:	4631      	mov	r1, r6
 800660e:	f000 fe7f 	bl	8007310 <__mcmp>
 8006612:	2800      	cmp	r0, #0
 8006614:	da67      	bge.n	80066e6 <_dtoa_r+0x90e>
 8006616:	9b00      	ldr	r3, [sp, #0]
 8006618:	3b01      	subs	r3, #1
 800661a:	ee18 1a10 	vmov	r1, s16
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	220a      	movs	r2, #10
 8006622:	2300      	movs	r3, #0
 8006624:	4620      	mov	r0, r4
 8006626:	f000 fc53 	bl	8006ed0 <__multadd>
 800662a:	9b08      	ldr	r3, [sp, #32]
 800662c:	ee08 0a10 	vmov	s16, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 81b1 	beq.w	8006998 <_dtoa_r+0xbc0>
 8006636:	2300      	movs	r3, #0
 8006638:	4639      	mov	r1, r7
 800663a:	220a      	movs	r2, #10
 800663c:	4620      	mov	r0, r4
 800663e:	f000 fc47 	bl	8006ed0 <__multadd>
 8006642:	9b02      	ldr	r3, [sp, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	4607      	mov	r7, r0
 8006648:	f300 808e 	bgt.w	8006768 <_dtoa_r+0x990>
 800664c:	9b06      	ldr	r3, [sp, #24]
 800664e:	2b02      	cmp	r3, #2
 8006650:	dc51      	bgt.n	80066f6 <_dtoa_r+0x91e>
 8006652:	e089      	b.n	8006768 <_dtoa_r+0x990>
 8006654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006656:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800665a:	e74b      	b.n	80064f4 <_dtoa_r+0x71c>
 800665c:	9b03      	ldr	r3, [sp, #12]
 800665e:	1e5e      	subs	r6, r3, #1
 8006660:	9b07      	ldr	r3, [sp, #28]
 8006662:	42b3      	cmp	r3, r6
 8006664:	bfbf      	itttt	lt
 8006666:	9b07      	ldrlt	r3, [sp, #28]
 8006668:	9607      	strlt	r6, [sp, #28]
 800666a:	1af2      	sublt	r2, r6, r3
 800666c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800666e:	bfb6      	itet	lt
 8006670:	189b      	addlt	r3, r3, r2
 8006672:	1b9e      	subge	r6, r3, r6
 8006674:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006676:	9b03      	ldr	r3, [sp, #12]
 8006678:	bfb8      	it	lt
 800667a:	2600      	movlt	r6, #0
 800667c:	2b00      	cmp	r3, #0
 800667e:	bfb7      	itett	lt
 8006680:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006684:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006688:	1a9d      	sublt	r5, r3, r2
 800668a:	2300      	movlt	r3, #0
 800668c:	e734      	b.n	80064f8 <_dtoa_r+0x720>
 800668e:	9e07      	ldr	r6, [sp, #28]
 8006690:	9d04      	ldr	r5, [sp, #16]
 8006692:	9f08      	ldr	r7, [sp, #32]
 8006694:	e73b      	b.n	800650e <_dtoa_r+0x736>
 8006696:	9a07      	ldr	r2, [sp, #28]
 8006698:	e767      	b.n	800656a <_dtoa_r+0x792>
 800669a:	9b06      	ldr	r3, [sp, #24]
 800669c:	2b01      	cmp	r3, #1
 800669e:	dc18      	bgt.n	80066d2 <_dtoa_r+0x8fa>
 80066a0:	f1ba 0f00 	cmp.w	sl, #0
 80066a4:	d115      	bne.n	80066d2 <_dtoa_r+0x8fa>
 80066a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066aa:	b993      	cbnz	r3, 80066d2 <_dtoa_r+0x8fa>
 80066ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80066b0:	0d1b      	lsrs	r3, r3, #20
 80066b2:	051b      	lsls	r3, r3, #20
 80066b4:	b183      	cbz	r3, 80066d8 <_dtoa_r+0x900>
 80066b6:	9b04      	ldr	r3, [sp, #16]
 80066b8:	3301      	adds	r3, #1
 80066ba:	9304      	str	r3, [sp, #16]
 80066bc:	9b05      	ldr	r3, [sp, #20]
 80066be:	3301      	adds	r3, #1
 80066c0:	9305      	str	r3, [sp, #20]
 80066c2:	f04f 0801 	mov.w	r8, #1
 80066c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f47f af6a 	bne.w	80065a2 <_dtoa_r+0x7ca>
 80066ce:	2001      	movs	r0, #1
 80066d0:	e76f      	b.n	80065b2 <_dtoa_r+0x7da>
 80066d2:	f04f 0800 	mov.w	r8, #0
 80066d6:	e7f6      	b.n	80066c6 <_dtoa_r+0x8ee>
 80066d8:	4698      	mov	r8, r3
 80066da:	e7f4      	b.n	80066c6 <_dtoa_r+0x8ee>
 80066dc:	f43f af7d 	beq.w	80065da <_dtoa_r+0x802>
 80066e0:	4618      	mov	r0, r3
 80066e2:	301c      	adds	r0, #28
 80066e4:	e772      	b.n	80065cc <_dtoa_r+0x7f4>
 80066e6:	9b03      	ldr	r3, [sp, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	dc37      	bgt.n	800675c <_dtoa_r+0x984>
 80066ec:	9b06      	ldr	r3, [sp, #24]
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	dd34      	ble.n	800675c <_dtoa_r+0x984>
 80066f2:	9b03      	ldr	r3, [sp, #12]
 80066f4:	9302      	str	r3, [sp, #8]
 80066f6:	9b02      	ldr	r3, [sp, #8]
 80066f8:	b96b      	cbnz	r3, 8006716 <_dtoa_r+0x93e>
 80066fa:	4631      	mov	r1, r6
 80066fc:	2205      	movs	r2, #5
 80066fe:	4620      	mov	r0, r4
 8006700:	f000 fbe6 	bl	8006ed0 <__multadd>
 8006704:	4601      	mov	r1, r0
 8006706:	4606      	mov	r6, r0
 8006708:	ee18 0a10 	vmov	r0, s16
 800670c:	f000 fe00 	bl	8007310 <__mcmp>
 8006710:	2800      	cmp	r0, #0
 8006712:	f73f adbb 	bgt.w	800628c <_dtoa_r+0x4b4>
 8006716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006718:	9d01      	ldr	r5, [sp, #4]
 800671a:	43db      	mvns	r3, r3
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	f04f 0800 	mov.w	r8, #0
 8006722:	4631      	mov	r1, r6
 8006724:	4620      	mov	r0, r4
 8006726:	f000 fbb1 	bl	8006e8c <_Bfree>
 800672a:	2f00      	cmp	r7, #0
 800672c:	f43f aea4 	beq.w	8006478 <_dtoa_r+0x6a0>
 8006730:	f1b8 0f00 	cmp.w	r8, #0
 8006734:	d005      	beq.n	8006742 <_dtoa_r+0x96a>
 8006736:	45b8      	cmp	r8, r7
 8006738:	d003      	beq.n	8006742 <_dtoa_r+0x96a>
 800673a:	4641      	mov	r1, r8
 800673c:	4620      	mov	r0, r4
 800673e:	f000 fba5 	bl	8006e8c <_Bfree>
 8006742:	4639      	mov	r1, r7
 8006744:	4620      	mov	r0, r4
 8006746:	f000 fba1 	bl	8006e8c <_Bfree>
 800674a:	e695      	b.n	8006478 <_dtoa_r+0x6a0>
 800674c:	2600      	movs	r6, #0
 800674e:	4637      	mov	r7, r6
 8006750:	e7e1      	b.n	8006716 <_dtoa_r+0x93e>
 8006752:	9700      	str	r7, [sp, #0]
 8006754:	4637      	mov	r7, r6
 8006756:	e599      	b.n	800628c <_dtoa_r+0x4b4>
 8006758:	40240000 	.word	0x40240000
 800675c:	9b08      	ldr	r3, [sp, #32]
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 80ca 	beq.w	80068f8 <_dtoa_r+0xb20>
 8006764:	9b03      	ldr	r3, [sp, #12]
 8006766:	9302      	str	r3, [sp, #8]
 8006768:	2d00      	cmp	r5, #0
 800676a:	dd05      	ble.n	8006778 <_dtoa_r+0x9a0>
 800676c:	4639      	mov	r1, r7
 800676e:	462a      	mov	r2, r5
 8006770:	4620      	mov	r0, r4
 8006772:	f000 fd5d 	bl	8007230 <__lshift>
 8006776:	4607      	mov	r7, r0
 8006778:	f1b8 0f00 	cmp.w	r8, #0
 800677c:	d05b      	beq.n	8006836 <_dtoa_r+0xa5e>
 800677e:	6879      	ldr	r1, [r7, #4]
 8006780:	4620      	mov	r0, r4
 8006782:	f000 fb43 	bl	8006e0c <_Balloc>
 8006786:	4605      	mov	r5, r0
 8006788:	b928      	cbnz	r0, 8006796 <_dtoa_r+0x9be>
 800678a:	4b87      	ldr	r3, [pc, #540]	; (80069a8 <_dtoa_r+0xbd0>)
 800678c:	4602      	mov	r2, r0
 800678e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006792:	f7ff bb3b 	b.w	8005e0c <_dtoa_r+0x34>
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	3202      	adds	r2, #2
 800679a:	0092      	lsls	r2, r2, #2
 800679c:	f107 010c 	add.w	r1, r7, #12
 80067a0:	300c      	adds	r0, #12
 80067a2:	f7fe fcbf 	bl	8005124 <memcpy>
 80067a6:	2201      	movs	r2, #1
 80067a8:	4629      	mov	r1, r5
 80067aa:	4620      	mov	r0, r4
 80067ac:	f000 fd40 	bl	8007230 <__lshift>
 80067b0:	9b01      	ldr	r3, [sp, #4]
 80067b2:	f103 0901 	add.w	r9, r3, #1
 80067b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80067ba:	4413      	add	r3, r2
 80067bc:	9305      	str	r3, [sp, #20]
 80067be:	f00a 0301 	and.w	r3, sl, #1
 80067c2:	46b8      	mov	r8, r7
 80067c4:	9304      	str	r3, [sp, #16]
 80067c6:	4607      	mov	r7, r0
 80067c8:	4631      	mov	r1, r6
 80067ca:	ee18 0a10 	vmov	r0, s16
 80067ce:	f7ff fa77 	bl	8005cc0 <quorem>
 80067d2:	4641      	mov	r1, r8
 80067d4:	9002      	str	r0, [sp, #8]
 80067d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80067da:	ee18 0a10 	vmov	r0, s16
 80067de:	f000 fd97 	bl	8007310 <__mcmp>
 80067e2:	463a      	mov	r2, r7
 80067e4:	9003      	str	r0, [sp, #12]
 80067e6:	4631      	mov	r1, r6
 80067e8:	4620      	mov	r0, r4
 80067ea:	f000 fdad 	bl	8007348 <__mdiff>
 80067ee:	68c2      	ldr	r2, [r0, #12]
 80067f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80067f4:	4605      	mov	r5, r0
 80067f6:	bb02      	cbnz	r2, 800683a <_dtoa_r+0xa62>
 80067f8:	4601      	mov	r1, r0
 80067fa:	ee18 0a10 	vmov	r0, s16
 80067fe:	f000 fd87 	bl	8007310 <__mcmp>
 8006802:	4602      	mov	r2, r0
 8006804:	4629      	mov	r1, r5
 8006806:	4620      	mov	r0, r4
 8006808:	9207      	str	r2, [sp, #28]
 800680a:	f000 fb3f 	bl	8006e8c <_Bfree>
 800680e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006812:	ea43 0102 	orr.w	r1, r3, r2
 8006816:	9b04      	ldr	r3, [sp, #16]
 8006818:	430b      	orrs	r3, r1
 800681a:	464d      	mov	r5, r9
 800681c:	d10f      	bne.n	800683e <_dtoa_r+0xa66>
 800681e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006822:	d02a      	beq.n	800687a <_dtoa_r+0xaa2>
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	dd02      	ble.n	8006830 <_dtoa_r+0xa58>
 800682a:	9b02      	ldr	r3, [sp, #8]
 800682c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006830:	f88b a000 	strb.w	sl, [fp]
 8006834:	e775      	b.n	8006722 <_dtoa_r+0x94a>
 8006836:	4638      	mov	r0, r7
 8006838:	e7ba      	b.n	80067b0 <_dtoa_r+0x9d8>
 800683a:	2201      	movs	r2, #1
 800683c:	e7e2      	b.n	8006804 <_dtoa_r+0xa2c>
 800683e:	9b03      	ldr	r3, [sp, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	db04      	blt.n	800684e <_dtoa_r+0xa76>
 8006844:	9906      	ldr	r1, [sp, #24]
 8006846:	430b      	orrs	r3, r1
 8006848:	9904      	ldr	r1, [sp, #16]
 800684a:	430b      	orrs	r3, r1
 800684c:	d122      	bne.n	8006894 <_dtoa_r+0xabc>
 800684e:	2a00      	cmp	r2, #0
 8006850:	ddee      	ble.n	8006830 <_dtoa_r+0xa58>
 8006852:	ee18 1a10 	vmov	r1, s16
 8006856:	2201      	movs	r2, #1
 8006858:	4620      	mov	r0, r4
 800685a:	f000 fce9 	bl	8007230 <__lshift>
 800685e:	4631      	mov	r1, r6
 8006860:	ee08 0a10 	vmov	s16, r0
 8006864:	f000 fd54 	bl	8007310 <__mcmp>
 8006868:	2800      	cmp	r0, #0
 800686a:	dc03      	bgt.n	8006874 <_dtoa_r+0xa9c>
 800686c:	d1e0      	bne.n	8006830 <_dtoa_r+0xa58>
 800686e:	f01a 0f01 	tst.w	sl, #1
 8006872:	d0dd      	beq.n	8006830 <_dtoa_r+0xa58>
 8006874:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006878:	d1d7      	bne.n	800682a <_dtoa_r+0xa52>
 800687a:	2339      	movs	r3, #57	; 0x39
 800687c:	f88b 3000 	strb.w	r3, [fp]
 8006880:	462b      	mov	r3, r5
 8006882:	461d      	mov	r5, r3
 8006884:	3b01      	subs	r3, #1
 8006886:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800688a:	2a39      	cmp	r2, #57	; 0x39
 800688c:	d071      	beq.n	8006972 <_dtoa_r+0xb9a>
 800688e:	3201      	adds	r2, #1
 8006890:	701a      	strb	r2, [r3, #0]
 8006892:	e746      	b.n	8006722 <_dtoa_r+0x94a>
 8006894:	2a00      	cmp	r2, #0
 8006896:	dd07      	ble.n	80068a8 <_dtoa_r+0xad0>
 8006898:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800689c:	d0ed      	beq.n	800687a <_dtoa_r+0xaa2>
 800689e:	f10a 0301 	add.w	r3, sl, #1
 80068a2:	f88b 3000 	strb.w	r3, [fp]
 80068a6:	e73c      	b.n	8006722 <_dtoa_r+0x94a>
 80068a8:	9b05      	ldr	r3, [sp, #20]
 80068aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80068ae:	4599      	cmp	r9, r3
 80068b0:	d047      	beq.n	8006942 <_dtoa_r+0xb6a>
 80068b2:	ee18 1a10 	vmov	r1, s16
 80068b6:	2300      	movs	r3, #0
 80068b8:	220a      	movs	r2, #10
 80068ba:	4620      	mov	r0, r4
 80068bc:	f000 fb08 	bl	8006ed0 <__multadd>
 80068c0:	45b8      	cmp	r8, r7
 80068c2:	ee08 0a10 	vmov	s16, r0
 80068c6:	f04f 0300 	mov.w	r3, #0
 80068ca:	f04f 020a 	mov.w	r2, #10
 80068ce:	4641      	mov	r1, r8
 80068d0:	4620      	mov	r0, r4
 80068d2:	d106      	bne.n	80068e2 <_dtoa_r+0xb0a>
 80068d4:	f000 fafc 	bl	8006ed0 <__multadd>
 80068d8:	4680      	mov	r8, r0
 80068da:	4607      	mov	r7, r0
 80068dc:	f109 0901 	add.w	r9, r9, #1
 80068e0:	e772      	b.n	80067c8 <_dtoa_r+0x9f0>
 80068e2:	f000 faf5 	bl	8006ed0 <__multadd>
 80068e6:	4639      	mov	r1, r7
 80068e8:	4680      	mov	r8, r0
 80068ea:	2300      	movs	r3, #0
 80068ec:	220a      	movs	r2, #10
 80068ee:	4620      	mov	r0, r4
 80068f0:	f000 faee 	bl	8006ed0 <__multadd>
 80068f4:	4607      	mov	r7, r0
 80068f6:	e7f1      	b.n	80068dc <_dtoa_r+0xb04>
 80068f8:	9b03      	ldr	r3, [sp, #12]
 80068fa:	9302      	str	r3, [sp, #8]
 80068fc:	9d01      	ldr	r5, [sp, #4]
 80068fe:	ee18 0a10 	vmov	r0, s16
 8006902:	4631      	mov	r1, r6
 8006904:	f7ff f9dc 	bl	8005cc0 <quorem>
 8006908:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800690c:	9b01      	ldr	r3, [sp, #4]
 800690e:	f805 ab01 	strb.w	sl, [r5], #1
 8006912:	1aea      	subs	r2, r5, r3
 8006914:	9b02      	ldr	r3, [sp, #8]
 8006916:	4293      	cmp	r3, r2
 8006918:	dd09      	ble.n	800692e <_dtoa_r+0xb56>
 800691a:	ee18 1a10 	vmov	r1, s16
 800691e:	2300      	movs	r3, #0
 8006920:	220a      	movs	r2, #10
 8006922:	4620      	mov	r0, r4
 8006924:	f000 fad4 	bl	8006ed0 <__multadd>
 8006928:	ee08 0a10 	vmov	s16, r0
 800692c:	e7e7      	b.n	80068fe <_dtoa_r+0xb26>
 800692e:	9b02      	ldr	r3, [sp, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	bfc8      	it	gt
 8006934:	461d      	movgt	r5, r3
 8006936:	9b01      	ldr	r3, [sp, #4]
 8006938:	bfd8      	it	le
 800693a:	2501      	movle	r5, #1
 800693c:	441d      	add	r5, r3
 800693e:	f04f 0800 	mov.w	r8, #0
 8006942:	ee18 1a10 	vmov	r1, s16
 8006946:	2201      	movs	r2, #1
 8006948:	4620      	mov	r0, r4
 800694a:	f000 fc71 	bl	8007230 <__lshift>
 800694e:	4631      	mov	r1, r6
 8006950:	ee08 0a10 	vmov	s16, r0
 8006954:	f000 fcdc 	bl	8007310 <__mcmp>
 8006958:	2800      	cmp	r0, #0
 800695a:	dc91      	bgt.n	8006880 <_dtoa_r+0xaa8>
 800695c:	d102      	bne.n	8006964 <_dtoa_r+0xb8c>
 800695e:	f01a 0f01 	tst.w	sl, #1
 8006962:	d18d      	bne.n	8006880 <_dtoa_r+0xaa8>
 8006964:	462b      	mov	r3, r5
 8006966:	461d      	mov	r5, r3
 8006968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800696c:	2a30      	cmp	r2, #48	; 0x30
 800696e:	d0fa      	beq.n	8006966 <_dtoa_r+0xb8e>
 8006970:	e6d7      	b.n	8006722 <_dtoa_r+0x94a>
 8006972:	9a01      	ldr	r2, [sp, #4]
 8006974:	429a      	cmp	r2, r3
 8006976:	d184      	bne.n	8006882 <_dtoa_r+0xaaa>
 8006978:	9b00      	ldr	r3, [sp, #0]
 800697a:	3301      	adds	r3, #1
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	2331      	movs	r3, #49	; 0x31
 8006980:	7013      	strb	r3, [r2, #0]
 8006982:	e6ce      	b.n	8006722 <_dtoa_r+0x94a>
 8006984:	4b09      	ldr	r3, [pc, #36]	; (80069ac <_dtoa_r+0xbd4>)
 8006986:	f7ff ba95 	b.w	8005eb4 <_dtoa_r+0xdc>
 800698a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800698c:	2b00      	cmp	r3, #0
 800698e:	f47f aa6e 	bne.w	8005e6e <_dtoa_r+0x96>
 8006992:	4b07      	ldr	r3, [pc, #28]	; (80069b0 <_dtoa_r+0xbd8>)
 8006994:	f7ff ba8e 	b.w	8005eb4 <_dtoa_r+0xdc>
 8006998:	9b02      	ldr	r3, [sp, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	dcae      	bgt.n	80068fc <_dtoa_r+0xb24>
 800699e:	9b06      	ldr	r3, [sp, #24]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	f73f aea8 	bgt.w	80066f6 <_dtoa_r+0x91e>
 80069a6:	e7a9      	b.n	80068fc <_dtoa_r+0xb24>
 80069a8:	08008447 	.word	0x08008447
 80069ac:	080083a4 	.word	0x080083a4
 80069b0:	080083c8 	.word	0x080083c8

080069b4 <__sflush_r>:
 80069b4:	898a      	ldrh	r2, [r1, #12]
 80069b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ba:	4605      	mov	r5, r0
 80069bc:	0710      	lsls	r0, r2, #28
 80069be:	460c      	mov	r4, r1
 80069c0:	d458      	bmi.n	8006a74 <__sflush_r+0xc0>
 80069c2:	684b      	ldr	r3, [r1, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	dc05      	bgt.n	80069d4 <__sflush_r+0x20>
 80069c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	dc02      	bgt.n	80069d4 <__sflush_r+0x20>
 80069ce:	2000      	movs	r0, #0
 80069d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069d6:	2e00      	cmp	r6, #0
 80069d8:	d0f9      	beq.n	80069ce <__sflush_r+0x1a>
 80069da:	2300      	movs	r3, #0
 80069dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069e0:	682f      	ldr	r7, [r5, #0]
 80069e2:	602b      	str	r3, [r5, #0]
 80069e4:	d032      	beq.n	8006a4c <__sflush_r+0x98>
 80069e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069e8:	89a3      	ldrh	r3, [r4, #12]
 80069ea:	075a      	lsls	r2, r3, #29
 80069ec:	d505      	bpl.n	80069fa <__sflush_r+0x46>
 80069ee:	6863      	ldr	r3, [r4, #4]
 80069f0:	1ac0      	subs	r0, r0, r3
 80069f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069f4:	b10b      	cbz	r3, 80069fa <__sflush_r+0x46>
 80069f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069f8:	1ac0      	subs	r0, r0, r3
 80069fa:	2300      	movs	r3, #0
 80069fc:	4602      	mov	r2, r0
 80069fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a00:	6a21      	ldr	r1, [r4, #32]
 8006a02:	4628      	mov	r0, r5
 8006a04:	47b0      	blx	r6
 8006a06:	1c43      	adds	r3, r0, #1
 8006a08:	89a3      	ldrh	r3, [r4, #12]
 8006a0a:	d106      	bne.n	8006a1a <__sflush_r+0x66>
 8006a0c:	6829      	ldr	r1, [r5, #0]
 8006a0e:	291d      	cmp	r1, #29
 8006a10:	d82c      	bhi.n	8006a6c <__sflush_r+0xb8>
 8006a12:	4a2a      	ldr	r2, [pc, #168]	; (8006abc <__sflush_r+0x108>)
 8006a14:	40ca      	lsrs	r2, r1
 8006a16:	07d6      	lsls	r6, r2, #31
 8006a18:	d528      	bpl.n	8006a6c <__sflush_r+0xb8>
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	6062      	str	r2, [r4, #4]
 8006a1e:	04d9      	lsls	r1, r3, #19
 8006a20:	6922      	ldr	r2, [r4, #16]
 8006a22:	6022      	str	r2, [r4, #0]
 8006a24:	d504      	bpl.n	8006a30 <__sflush_r+0x7c>
 8006a26:	1c42      	adds	r2, r0, #1
 8006a28:	d101      	bne.n	8006a2e <__sflush_r+0x7a>
 8006a2a:	682b      	ldr	r3, [r5, #0]
 8006a2c:	b903      	cbnz	r3, 8006a30 <__sflush_r+0x7c>
 8006a2e:	6560      	str	r0, [r4, #84]	; 0x54
 8006a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a32:	602f      	str	r7, [r5, #0]
 8006a34:	2900      	cmp	r1, #0
 8006a36:	d0ca      	beq.n	80069ce <__sflush_r+0x1a>
 8006a38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a3c:	4299      	cmp	r1, r3
 8006a3e:	d002      	beq.n	8006a46 <__sflush_r+0x92>
 8006a40:	4628      	mov	r0, r5
 8006a42:	f000 fd7d 	bl	8007540 <_free_r>
 8006a46:	2000      	movs	r0, #0
 8006a48:	6360      	str	r0, [r4, #52]	; 0x34
 8006a4a:	e7c1      	b.n	80069d0 <__sflush_r+0x1c>
 8006a4c:	6a21      	ldr	r1, [r4, #32]
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4628      	mov	r0, r5
 8006a52:	47b0      	blx	r6
 8006a54:	1c41      	adds	r1, r0, #1
 8006a56:	d1c7      	bne.n	80069e8 <__sflush_r+0x34>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0c4      	beq.n	80069e8 <__sflush_r+0x34>
 8006a5e:	2b1d      	cmp	r3, #29
 8006a60:	d001      	beq.n	8006a66 <__sflush_r+0xb2>
 8006a62:	2b16      	cmp	r3, #22
 8006a64:	d101      	bne.n	8006a6a <__sflush_r+0xb6>
 8006a66:	602f      	str	r7, [r5, #0]
 8006a68:	e7b1      	b.n	80069ce <__sflush_r+0x1a>
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a70:	81a3      	strh	r3, [r4, #12]
 8006a72:	e7ad      	b.n	80069d0 <__sflush_r+0x1c>
 8006a74:	690f      	ldr	r7, [r1, #16]
 8006a76:	2f00      	cmp	r7, #0
 8006a78:	d0a9      	beq.n	80069ce <__sflush_r+0x1a>
 8006a7a:	0793      	lsls	r3, r2, #30
 8006a7c:	680e      	ldr	r6, [r1, #0]
 8006a7e:	bf08      	it	eq
 8006a80:	694b      	ldreq	r3, [r1, #20]
 8006a82:	600f      	str	r7, [r1, #0]
 8006a84:	bf18      	it	ne
 8006a86:	2300      	movne	r3, #0
 8006a88:	eba6 0807 	sub.w	r8, r6, r7
 8006a8c:	608b      	str	r3, [r1, #8]
 8006a8e:	f1b8 0f00 	cmp.w	r8, #0
 8006a92:	dd9c      	ble.n	80069ce <__sflush_r+0x1a>
 8006a94:	6a21      	ldr	r1, [r4, #32]
 8006a96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a98:	4643      	mov	r3, r8
 8006a9a:	463a      	mov	r2, r7
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	47b0      	blx	r6
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	dc06      	bgt.n	8006ab2 <__sflush_r+0xfe>
 8006aa4:	89a3      	ldrh	r3, [r4, #12]
 8006aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aaa:	81a3      	strh	r3, [r4, #12]
 8006aac:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab0:	e78e      	b.n	80069d0 <__sflush_r+0x1c>
 8006ab2:	4407      	add	r7, r0
 8006ab4:	eba8 0800 	sub.w	r8, r8, r0
 8006ab8:	e7e9      	b.n	8006a8e <__sflush_r+0xda>
 8006aba:	bf00      	nop
 8006abc:	20400001 	.word	0x20400001

08006ac0 <_fflush_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	690b      	ldr	r3, [r1, #16]
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	b913      	cbnz	r3, 8006ad0 <_fflush_r+0x10>
 8006aca:	2500      	movs	r5, #0
 8006acc:	4628      	mov	r0, r5
 8006ace:	bd38      	pop	{r3, r4, r5, pc}
 8006ad0:	b118      	cbz	r0, 8006ada <_fflush_r+0x1a>
 8006ad2:	6983      	ldr	r3, [r0, #24]
 8006ad4:	b90b      	cbnz	r3, 8006ada <_fflush_r+0x1a>
 8006ad6:	f000 f887 	bl	8006be8 <__sinit>
 8006ada:	4b14      	ldr	r3, [pc, #80]	; (8006b2c <_fflush_r+0x6c>)
 8006adc:	429c      	cmp	r4, r3
 8006ade:	d11b      	bne.n	8006b18 <_fflush_r+0x58>
 8006ae0:	686c      	ldr	r4, [r5, #4]
 8006ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0ef      	beq.n	8006aca <_fflush_r+0xa>
 8006aea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006aec:	07d0      	lsls	r0, r2, #31
 8006aee:	d404      	bmi.n	8006afa <_fflush_r+0x3a>
 8006af0:	0599      	lsls	r1, r3, #22
 8006af2:	d402      	bmi.n	8006afa <_fflush_r+0x3a>
 8006af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006af6:	f000 f91a 	bl	8006d2e <__retarget_lock_acquire_recursive>
 8006afa:	4628      	mov	r0, r5
 8006afc:	4621      	mov	r1, r4
 8006afe:	f7ff ff59 	bl	80069b4 <__sflush_r>
 8006b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b04:	07da      	lsls	r2, r3, #31
 8006b06:	4605      	mov	r5, r0
 8006b08:	d4e0      	bmi.n	8006acc <_fflush_r+0xc>
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	059b      	lsls	r3, r3, #22
 8006b0e:	d4dd      	bmi.n	8006acc <_fflush_r+0xc>
 8006b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b12:	f000 f90d 	bl	8006d30 <__retarget_lock_release_recursive>
 8006b16:	e7d9      	b.n	8006acc <_fflush_r+0xc>
 8006b18:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <_fflush_r+0x70>)
 8006b1a:	429c      	cmp	r4, r3
 8006b1c:	d101      	bne.n	8006b22 <_fflush_r+0x62>
 8006b1e:	68ac      	ldr	r4, [r5, #8]
 8006b20:	e7df      	b.n	8006ae2 <_fflush_r+0x22>
 8006b22:	4b04      	ldr	r3, [pc, #16]	; (8006b34 <_fflush_r+0x74>)
 8006b24:	429c      	cmp	r4, r3
 8006b26:	bf08      	it	eq
 8006b28:	68ec      	ldreq	r4, [r5, #12]
 8006b2a:	e7da      	b.n	8006ae2 <_fflush_r+0x22>
 8006b2c:	08008478 	.word	0x08008478
 8006b30:	08008498 	.word	0x08008498
 8006b34:	08008458 	.word	0x08008458

08006b38 <std>:
 8006b38:	2300      	movs	r3, #0
 8006b3a:	b510      	push	{r4, lr}
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b46:	6083      	str	r3, [r0, #8]
 8006b48:	8181      	strh	r1, [r0, #12]
 8006b4a:	6643      	str	r3, [r0, #100]	; 0x64
 8006b4c:	81c2      	strh	r2, [r0, #14]
 8006b4e:	6183      	str	r3, [r0, #24]
 8006b50:	4619      	mov	r1, r3
 8006b52:	2208      	movs	r2, #8
 8006b54:	305c      	adds	r0, #92	; 0x5c
 8006b56:	f7fe faf3 	bl	8005140 <memset>
 8006b5a:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <std+0x38>)
 8006b5c:	6263      	str	r3, [r4, #36]	; 0x24
 8006b5e:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <std+0x3c>)
 8006b60:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b62:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <std+0x40>)
 8006b64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b66:	4b05      	ldr	r3, [pc, #20]	; (8006b7c <std+0x44>)
 8006b68:	6224      	str	r4, [r4, #32]
 8006b6a:	6323      	str	r3, [r4, #48]	; 0x30
 8006b6c:	bd10      	pop	{r4, pc}
 8006b6e:	bf00      	nop
 8006b70:	080079d5 	.word	0x080079d5
 8006b74:	080079f7 	.word	0x080079f7
 8006b78:	08007a2f 	.word	0x08007a2f
 8006b7c:	08007a53 	.word	0x08007a53

08006b80 <_cleanup_r>:
 8006b80:	4901      	ldr	r1, [pc, #4]	; (8006b88 <_cleanup_r+0x8>)
 8006b82:	f000 b8af 	b.w	8006ce4 <_fwalk_reent>
 8006b86:	bf00      	nop
 8006b88:	08006ac1 	.word	0x08006ac1

08006b8c <__sfmoreglue>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	2268      	movs	r2, #104	; 0x68
 8006b90:	1e4d      	subs	r5, r1, #1
 8006b92:	4355      	muls	r5, r2
 8006b94:	460e      	mov	r6, r1
 8006b96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b9a:	f000 fd3d 	bl	8007618 <_malloc_r>
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	b140      	cbz	r0, 8006bb4 <__sfmoreglue+0x28>
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	e9c0 1600 	strd	r1, r6, [r0]
 8006ba8:	300c      	adds	r0, #12
 8006baa:	60a0      	str	r0, [r4, #8]
 8006bac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006bb0:	f7fe fac6 	bl	8005140 <memset>
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	bd70      	pop	{r4, r5, r6, pc}

08006bb8 <__sfp_lock_acquire>:
 8006bb8:	4801      	ldr	r0, [pc, #4]	; (8006bc0 <__sfp_lock_acquire+0x8>)
 8006bba:	f000 b8b8 	b.w	8006d2e <__retarget_lock_acquire_recursive>
 8006bbe:	bf00      	nop
 8006bc0:	20002299 	.word	0x20002299

08006bc4 <__sfp_lock_release>:
 8006bc4:	4801      	ldr	r0, [pc, #4]	; (8006bcc <__sfp_lock_release+0x8>)
 8006bc6:	f000 b8b3 	b.w	8006d30 <__retarget_lock_release_recursive>
 8006bca:	bf00      	nop
 8006bcc:	20002299 	.word	0x20002299

08006bd0 <__sinit_lock_acquire>:
 8006bd0:	4801      	ldr	r0, [pc, #4]	; (8006bd8 <__sinit_lock_acquire+0x8>)
 8006bd2:	f000 b8ac 	b.w	8006d2e <__retarget_lock_acquire_recursive>
 8006bd6:	bf00      	nop
 8006bd8:	2000229a 	.word	0x2000229a

08006bdc <__sinit_lock_release>:
 8006bdc:	4801      	ldr	r0, [pc, #4]	; (8006be4 <__sinit_lock_release+0x8>)
 8006bde:	f000 b8a7 	b.w	8006d30 <__retarget_lock_release_recursive>
 8006be2:	bf00      	nop
 8006be4:	2000229a 	.word	0x2000229a

08006be8 <__sinit>:
 8006be8:	b510      	push	{r4, lr}
 8006bea:	4604      	mov	r4, r0
 8006bec:	f7ff fff0 	bl	8006bd0 <__sinit_lock_acquire>
 8006bf0:	69a3      	ldr	r3, [r4, #24]
 8006bf2:	b11b      	cbz	r3, 8006bfc <__sinit+0x14>
 8006bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bf8:	f7ff bff0 	b.w	8006bdc <__sinit_lock_release>
 8006bfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c00:	6523      	str	r3, [r4, #80]	; 0x50
 8006c02:	4b13      	ldr	r3, [pc, #76]	; (8006c50 <__sinit+0x68>)
 8006c04:	4a13      	ldr	r2, [pc, #76]	; (8006c54 <__sinit+0x6c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c0a:	42a3      	cmp	r3, r4
 8006c0c:	bf04      	itt	eq
 8006c0e:	2301      	moveq	r3, #1
 8006c10:	61a3      	streq	r3, [r4, #24]
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 f820 	bl	8006c58 <__sfp>
 8006c18:	6060      	str	r0, [r4, #4]
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f000 f81c 	bl	8006c58 <__sfp>
 8006c20:	60a0      	str	r0, [r4, #8]
 8006c22:	4620      	mov	r0, r4
 8006c24:	f000 f818 	bl	8006c58 <__sfp>
 8006c28:	2200      	movs	r2, #0
 8006c2a:	60e0      	str	r0, [r4, #12]
 8006c2c:	2104      	movs	r1, #4
 8006c2e:	6860      	ldr	r0, [r4, #4]
 8006c30:	f7ff ff82 	bl	8006b38 <std>
 8006c34:	68a0      	ldr	r0, [r4, #8]
 8006c36:	2201      	movs	r2, #1
 8006c38:	2109      	movs	r1, #9
 8006c3a:	f7ff ff7d 	bl	8006b38 <std>
 8006c3e:	68e0      	ldr	r0, [r4, #12]
 8006c40:	2202      	movs	r2, #2
 8006c42:	2112      	movs	r1, #18
 8006c44:	f7ff ff78 	bl	8006b38 <std>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	61a3      	str	r3, [r4, #24]
 8006c4c:	e7d2      	b.n	8006bf4 <__sinit+0xc>
 8006c4e:	bf00      	nop
 8006c50:	08008390 	.word	0x08008390
 8006c54:	08006b81 	.word	0x08006b81

08006c58 <__sfp>:
 8006c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5a:	4607      	mov	r7, r0
 8006c5c:	f7ff ffac 	bl	8006bb8 <__sfp_lock_acquire>
 8006c60:	4b1e      	ldr	r3, [pc, #120]	; (8006cdc <__sfp+0x84>)
 8006c62:	681e      	ldr	r6, [r3, #0]
 8006c64:	69b3      	ldr	r3, [r6, #24]
 8006c66:	b913      	cbnz	r3, 8006c6e <__sfp+0x16>
 8006c68:	4630      	mov	r0, r6
 8006c6a:	f7ff ffbd 	bl	8006be8 <__sinit>
 8006c6e:	3648      	adds	r6, #72	; 0x48
 8006c70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	d503      	bpl.n	8006c80 <__sfp+0x28>
 8006c78:	6833      	ldr	r3, [r6, #0]
 8006c7a:	b30b      	cbz	r3, 8006cc0 <__sfp+0x68>
 8006c7c:	6836      	ldr	r6, [r6, #0]
 8006c7e:	e7f7      	b.n	8006c70 <__sfp+0x18>
 8006c80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c84:	b9d5      	cbnz	r5, 8006cbc <__sfp+0x64>
 8006c86:	4b16      	ldr	r3, [pc, #88]	; (8006ce0 <__sfp+0x88>)
 8006c88:	60e3      	str	r3, [r4, #12]
 8006c8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c8e:	6665      	str	r5, [r4, #100]	; 0x64
 8006c90:	f000 f84c 	bl	8006d2c <__retarget_lock_init_recursive>
 8006c94:	f7ff ff96 	bl	8006bc4 <__sfp_lock_release>
 8006c98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ca0:	6025      	str	r5, [r4, #0]
 8006ca2:	61a5      	str	r5, [r4, #24]
 8006ca4:	2208      	movs	r2, #8
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006cac:	f7fe fa48 	bl	8005140 <memset>
 8006cb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006cb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006cb8:	4620      	mov	r0, r4
 8006cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cbc:	3468      	adds	r4, #104	; 0x68
 8006cbe:	e7d9      	b.n	8006c74 <__sfp+0x1c>
 8006cc0:	2104      	movs	r1, #4
 8006cc2:	4638      	mov	r0, r7
 8006cc4:	f7ff ff62 	bl	8006b8c <__sfmoreglue>
 8006cc8:	4604      	mov	r4, r0
 8006cca:	6030      	str	r0, [r6, #0]
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	d1d5      	bne.n	8006c7c <__sfp+0x24>
 8006cd0:	f7ff ff78 	bl	8006bc4 <__sfp_lock_release>
 8006cd4:	230c      	movs	r3, #12
 8006cd6:	603b      	str	r3, [r7, #0]
 8006cd8:	e7ee      	b.n	8006cb8 <__sfp+0x60>
 8006cda:	bf00      	nop
 8006cdc:	08008390 	.word	0x08008390
 8006ce0:	ffff0001 	.word	0xffff0001

08006ce4 <_fwalk_reent>:
 8006ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce8:	4606      	mov	r6, r0
 8006cea:	4688      	mov	r8, r1
 8006cec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cf0:	2700      	movs	r7, #0
 8006cf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cf6:	f1b9 0901 	subs.w	r9, r9, #1
 8006cfa:	d505      	bpl.n	8006d08 <_fwalk_reent+0x24>
 8006cfc:	6824      	ldr	r4, [r4, #0]
 8006cfe:	2c00      	cmp	r4, #0
 8006d00:	d1f7      	bne.n	8006cf2 <_fwalk_reent+0xe>
 8006d02:	4638      	mov	r0, r7
 8006d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d08:	89ab      	ldrh	r3, [r5, #12]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d907      	bls.n	8006d1e <_fwalk_reent+0x3a>
 8006d0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d12:	3301      	adds	r3, #1
 8006d14:	d003      	beq.n	8006d1e <_fwalk_reent+0x3a>
 8006d16:	4629      	mov	r1, r5
 8006d18:	4630      	mov	r0, r6
 8006d1a:	47c0      	blx	r8
 8006d1c:	4307      	orrs	r7, r0
 8006d1e:	3568      	adds	r5, #104	; 0x68
 8006d20:	e7e9      	b.n	8006cf6 <_fwalk_reent+0x12>
	...

08006d24 <_localeconv_r>:
 8006d24:	4800      	ldr	r0, [pc, #0]	; (8006d28 <_localeconv_r+0x4>)
 8006d26:	4770      	bx	lr
 8006d28:	2000016c 	.word	0x2000016c

08006d2c <__retarget_lock_init_recursive>:
 8006d2c:	4770      	bx	lr

08006d2e <__retarget_lock_acquire_recursive>:
 8006d2e:	4770      	bx	lr

08006d30 <__retarget_lock_release_recursive>:
 8006d30:	4770      	bx	lr

08006d32 <__swhatbuf_r>:
 8006d32:	b570      	push	{r4, r5, r6, lr}
 8006d34:	460e      	mov	r6, r1
 8006d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3a:	2900      	cmp	r1, #0
 8006d3c:	b096      	sub	sp, #88	; 0x58
 8006d3e:	4614      	mov	r4, r2
 8006d40:	461d      	mov	r5, r3
 8006d42:	da08      	bge.n	8006d56 <__swhatbuf_r+0x24>
 8006d44:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	602a      	str	r2, [r5, #0]
 8006d4c:	061a      	lsls	r2, r3, #24
 8006d4e:	d410      	bmi.n	8006d72 <__swhatbuf_r+0x40>
 8006d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d54:	e00e      	b.n	8006d74 <__swhatbuf_r+0x42>
 8006d56:	466a      	mov	r2, sp
 8006d58:	f000 fed2 	bl	8007b00 <_fstat_r>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	dbf1      	blt.n	8006d44 <__swhatbuf_r+0x12>
 8006d60:	9a01      	ldr	r2, [sp, #4]
 8006d62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d6a:	425a      	negs	r2, r3
 8006d6c:	415a      	adcs	r2, r3
 8006d6e:	602a      	str	r2, [r5, #0]
 8006d70:	e7ee      	b.n	8006d50 <__swhatbuf_r+0x1e>
 8006d72:	2340      	movs	r3, #64	; 0x40
 8006d74:	2000      	movs	r0, #0
 8006d76:	6023      	str	r3, [r4, #0]
 8006d78:	b016      	add	sp, #88	; 0x58
 8006d7a:	bd70      	pop	{r4, r5, r6, pc}

08006d7c <__smakebuf_r>:
 8006d7c:	898b      	ldrh	r3, [r1, #12]
 8006d7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d80:	079d      	lsls	r5, r3, #30
 8006d82:	4606      	mov	r6, r0
 8006d84:	460c      	mov	r4, r1
 8006d86:	d507      	bpl.n	8006d98 <__smakebuf_r+0x1c>
 8006d88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	6123      	str	r3, [r4, #16]
 8006d90:	2301      	movs	r3, #1
 8006d92:	6163      	str	r3, [r4, #20]
 8006d94:	b002      	add	sp, #8
 8006d96:	bd70      	pop	{r4, r5, r6, pc}
 8006d98:	ab01      	add	r3, sp, #4
 8006d9a:	466a      	mov	r2, sp
 8006d9c:	f7ff ffc9 	bl	8006d32 <__swhatbuf_r>
 8006da0:	9900      	ldr	r1, [sp, #0]
 8006da2:	4605      	mov	r5, r0
 8006da4:	4630      	mov	r0, r6
 8006da6:	f000 fc37 	bl	8007618 <_malloc_r>
 8006daa:	b948      	cbnz	r0, 8006dc0 <__smakebuf_r+0x44>
 8006dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006db0:	059a      	lsls	r2, r3, #22
 8006db2:	d4ef      	bmi.n	8006d94 <__smakebuf_r+0x18>
 8006db4:	f023 0303 	bic.w	r3, r3, #3
 8006db8:	f043 0302 	orr.w	r3, r3, #2
 8006dbc:	81a3      	strh	r3, [r4, #12]
 8006dbe:	e7e3      	b.n	8006d88 <__smakebuf_r+0xc>
 8006dc0:	4b0d      	ldr	r3, [pc, #52]	; (8006df8 <__smakebuf_r+0x7c>)
 8006dc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	6020      	str	r0, [r4, #0]
 8006dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dcc:	81a3      	strh	r3, [r4, #12]
 8006dce:	9b00      	ldr	r3, [sp, #0]
 8006dd0:	6163      	str	r3, [r4, #20]
 8006dd2:	9b01      	ldr	r3, [sp, #4]
 8006dd4:	6120      	str	r0, [r4, #16]
 8006dd6:	b15b      	cbz	r3, 8006df0 <__smakebuf_r+0x74>
 8006dd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f000 fea1 	bl	8007b24 <_isatty_r>
 8006de2:	b128      	cbz	r0, 8006df0 <__smakebuf_r+0x74>
 8006de4:	89a3      	ldrh	r3, [r4, #12]
 8006de6:	f023 0303 	bic.w	r3, r3, #3
 8006dea:	f043 0301 	orr.w	r3, r3, #1
 8006dee:	81a3      	strh	r3, [r4, #12]
 8006df0:	89a0      	ldrh	r0, [r4, #12]
 8006df2:	4305      	orrs	r5, r0
 8006df4:	81a5      	strh	r5, [r4, #12]
 8006df6:	e7cd      	b.n	8006d94 <__smakebuf_r+0x18>
 8006df8:	08006b81 	.word	0x08006b81

08006dfc <malloc>:
 8006dfc:	4b02      	ldr	r3, [pc, #8]	; (8006e08 <malloc+0xc>)
 8006dfe:	4601      	mov	r1, r0
 8006e00:	6818      	ldr	r0, [r3, #0]
 8006e02:	f000 bc09 	b.w	8007618 <_malloc_r>
 8006e06:	bf00      	nop
 8006e08:	20000018 	.word	0x20000018

08006e0c <_Balloc>:
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e10:	4604      	mov	r4, r0
 8006e12:	460d      	mov	r5, r1
 8006e14:	b976      	cbnz	r6, 8006e34 <_Balloc+0x28>
 8006e16:	2010      	movs	r0, #16
 8006e18:	f7ff fff0 	bl	8006dfc <malloc>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	6260      	str	r0, [r4, #36]	; 0x24
 8006e20:	b920      	cbnz	r0, 8006e2c <_Balloc+0x20>
 8006e22:	4b18      	ldr	r3, [pc, #96]	; (8006e84 <_Balloc+0x78>)
 8006e24:	4818      	ldr	r0, [pc, #96]	; (8006e88 <_Balloc+0x7c>)
 8006e26:	2166      	movs	r1, #102	; 0x66
 8006e28:	f000 fe2a 	bl	8007a80 <__assert_func>
 8006e2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e30:	6006      	str	r6, [r0, #0]
 8006e32:	60c6      	str	r6, [r0, #12]
 8006e34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e36:	68f3      	ldr	r3, [r6, #12]
 8006e38:	b183      	cbz	r3, 8006e5c <_Balloc+0x50>
 8006e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e42:	b9b8      	cbnz	r0, 8006e74 <_Balloc+0x68>
 8006e44:	2101      	movs	r1, #1
 8006e46:	fa01 f605 	lsl.w	r6, r1, r5
 8006e4a:	1d72      	adds	r2, r6, #5
 8006e4c:	0092      	lsls	r2, r2, #2
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f000 fb60 	bl	8007514 <_calloc_r>
 8006e54:	b160      	cbz	r0, 8006e70 <_Balloc+0x64>
 8006e56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e5a:	e00e      	b.n	8006e7a <_Balloc+0x6e>
 8006e5c:	2221      	movs	r2, #33	; 0x21
 8006e5e:	2104      	movs	r1, #4
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 fb57 	bl	8007514 <_calloc_r>
 8006e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e68:	60f0      	str	r0, [r6, #12]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e4      	bne.n	8006e3a <_Balloc+0x2e>
 8006e70:	2000      	movs	r0, #0
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
 8006e74:	6802      	ldr	r2, [r0, #0]
 8006e76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e80:	e7f7      	b.n	8006e72 <_Balloc+0x66>
 8006e82:	bf00      	nop
 8006e84:	080083d5 	.word	0x080083d5
 8006e88:	080084b8 	.word	0x080084b8

08006e8c <_Bfree>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e90:	4605      	mov	r5, r0
 8006e92:	460c      	mov	r4, r1
 8006e94:	b976      	cbnz	r6, 8006eb4 <_Bfree+0x28>
 8006e96:	2010      	movs	r0, #16
 8006e98:	f7ff ffb0 	bl	8006dfc <malloc>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	6268      	str	r0, [r5, #36]	; 0x24
 8006ea0:	b920      	cbnz	r0, 8006eac <_Bfree+0x20>
 8006ea2:	4b09      	ldr	r3, [pc, #36]	; (8006ec8 <_Bfree+0x3c>)
 8006ea4:	4809      	ldr	r0, [pc, #36]	; (8006ecc <_Bfree+0x40>)
 8006ea6:	218a      	movs	r1, #138	; 0x8a
 8006ea8:	f000 fdea 	bl	8007a80 <__assert_func>
 8006eac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006eb0:	6006      	str	r6, [r0, #0]
 8006eb2:	60c6      	str	r6, [r0, #12]
 8006eb4:	b13c      	cbz	r4, 8006ec6 <_Bfree+0x3a>
 8006eb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006eb8:	6862      	ldr	r2, [r4, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ec0:	6021      	str	r1, [r4, #0]
 8006ec2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}
 8006ec8:	080083d5 	.word	0x080083d5
 8006ecc:	080084b8 	.word	0x080084b8

08006ed0 <__multadd>:
 8006ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed4:	690d      	ldr	r5, [r1, #16]
 8006ed6:	4607      	mov	r7, r0
 8006ed8:	460c      	mov	r4, r1
 8006eda:	461e      	mov	r6, r3
 8006edc:	f101 0c14 	add.w	ip, r1, #20
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	f8dc 3000 	ldr.w	r3, [ip]
 8006ee6:	b299      	uxth	r1, r3
 8006ee8:	fb02 6101 	mla	r1, r2, r1, r6
 8006eec:	0c1e      	lsrs	r6, r3, #16
 8006eee:	0c0b      	lsrs	r3, r1, #16
 8006ef0:	fb02 3306 	mla	r3, r2, r6, r3
 8006ef4:	b289      	uxth	r1, r1
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006efc:	4285      	cmp	r5, r0
 8006efe:	f84c 1b04 	str.w	r1, [ip], #4
 8006f02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f06:	dcec      	bgt.n	8006ee2 <__multadd+0x12>
 8006f08:	b30e      	cbz	r6, 8006f4e <__multadd+0x7e>
 8006f0a:	68a3      	ldr	r3, [r4, #8]
 8006f0c:	42ab      	cmp	r3, r5
 8006f0e:	dc19      	bgt.n	8006f44 <__multadd+0x74>
 8006f10:	6861      	ldr	r1, [r4, #4]
 8006f12:	4638      	mov	r0, r7
 8006f14:	3101      	adds	r1, #1
 8006f16:	f7ff ff79 	bl	8006e0c <_Balloc>
 8006f1a:	4680      	mov	r8, r0
 8006f1c:	b928      	cbnz	r0, 8006f2a <__multadd+0x5a>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <__multadd+0x84>)
 8006f22:	480d      	ldr	r0, [pc, #52]	; (8006f58 <__multadd+0x88>)
 8006f24:	21b5      	movs	r1, #181	; 0xb5
 8006f26:	f000 fdab 	bl	8007a80 <__assert_func>
 8006f2a:	6922      	ldr	r2, [r4, #16]
 8006f2c:	3202      	adds	r2, #2
 8006f2e:	f104 010c 	add.w	r1, r4, #12
 8006f32:	0092      	lsls	r2, r2, #2
 8006f34:	300c      	adds	r0, #12
 8006f36:	f7fe f8f5 	bl	8005124 <memcpy>
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	4638      	mov	r0, r7
 8006f3e:	f7ff ffa5 	bl	8006e8c <_Bfree>
 8006f42:	4644      	mov	r4, r8
 8006f44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f48:	3501      	adds	r5, #1
 8006f4a:	615e      	str	r6, [r3, #20]
 8006f4c:	6125      	str	r5, [r4, #16]
 8006f4e:	4620      	mov	r0, r4
 8006f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f54:	08008447 	.word	0x08008447
 8006f58:	080084b8 	.word	0x080084b8

08006f5c <__hi0bits>:
 8006f5c:	0c03      	lsrs	r3, r0, #16
 8006f5e:	041b      	lsls	r3, r3, #16
 8006f60:	b9d3      	cbnz	r3, 8006f98 <__hi0bits+0x3c>
 8006f62:	0400      	lsls	r0, r0, #16
 8006f64:	2310      	movs	r3, #16
 8006f66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f6a:	bf04      	itt	eq
 8006f6c:	0200      	lsleq	r0, r0, #8
 8006f6e:	3308      	addeq	r3, #8
 8006f70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f74:	bf04      	itt	eq
 8006f76:	0100      	lsleq	r0, r0, #4
 8006f78:	3304      	addeq	r3, #4
 8006f7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f7e:	bf04      	itt	eq
 8006f80:	0080      	lsleq	r0, r0, #2
 8006f82:	3302      	addeq	r3, #2
 8006f84:	2800      	cmp	r0, #0
 8006f86:	db05      	blt.n	8006f94 <__hi0bits+0x38>
 8006f88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f8c:	f103 0301 	add.w	r3, r3, #1
 8006f90:	bf08      	it	eq
 8006f92:	2320      	moveq	r3, #32
 8006f94:	4618      	mov	r0, r3
 8006f96:	4770      	bx	lr
 8006f98:	2300      	movs	r3, #0
 8006f9a:	e7e4      	b.n	8006f66 <__hi0bits+0xa>

08006f9c <__lo0bits>:
 8006f9c:	6803      	ldr	r3, [r0, #0]
 8006f9e:	f013 0207 	ands.w	r2, r3, #7
 8006fa2:	4601      	mov	r1, r0
 8006fa4:	d00b      	beq.n	8006fbe <__lo0bits+0x22>
 8006fa6:	07da      	lsls	r2, r3, #31
 8006fa8:	d423      	bmi.n	8006ff2 <__lo0bits+0x56>
 8006faa:	0798      	lsls	r0, r3, #30
 8006fac:	bf49      	itett	mi
 8006fae:	085b      	lsrmi	r3, r3, #1
 8006fb0:	089b      	lsrpl	r3, r3, #2
 8006fb2:	2001      	movmi	r0, #1
 8006fb4:	600b      	strmi	r3, [r1, #0]
 8006fb6:	bf5c      	itt	pl
 8006fb8:	600b      	strpl	r3, [r1, #0]
 8006fba:	2002      	movpl	r0, #2
 8006fbc:	4770      	bx	lr
 8006fbe:	b298      	uxth	r0, r3
 8006fc0:	b9a8      	cbnz	r0, 8006fee <__lo0bits+0x52>
 8006fc2:	0c1b      	lsrs	r3, r3, #16
 8006fc4:	2010      	movs	r0, #16
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	b90a      	cbnz	r2, 8006fce <__lo0bits+0x32>
 8006fca:	3008      	adds	r0, #8
 8006fcc:	0a1b      	lsrs	r3, r3, #8
 8006fce:	071a      	lsls	r2, r3, #28
 8006fd0:	bf04      	itt	eq
 8006fd2:	091b      	lsreq	r3, r3, #4
 8006fd4:	3004      	addeq	r0, #4
 8006fd6:	079a      	lsls	r2, r3, #30
 8006fd8:	bf04      	itt	eq
 8006fda:	089b      	lsreq	r3, r3, #2
 8006fdc:	3002      	addeq	r0, #2
 8006fde:	07da      	lsls	r2, r3, #31
 8006fe0:	d403      	bmi.n	8006fea <__lo0bits+0x4e>
 8006fe2:	085b      	lsrs	r3, r3, #1
 8006fe4:	f100 0001 	add.w	r0, r0, #1
 8006fe8:	d005      	beq.n	8006ff6 <__lo0bits+0x5a>
 8006fea:	600b      	str	r3, [r1, #0]
 8006fec:	4770      	bx	lr
 8006fee:	4610      	mov	r0, r2
 8006ff0:	e7e9      	b.n	8006fc6 <__lo0bits+0x2a>
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	4770      	bx	lr
 8006ff6:	2020      	movs	r0, #32
 8006ff8:	4770      	bx	lr
	...

08006ffc <__i2b>:
 8006ffc:	b510      	push	{r4, lr}
 8006ffe:	460c      	mov	r4, r1
 8007000:	2101      	movs	r1, #1
 8007002:	f7ff ff03 	bl	8006e0c <_Balloc>
 8007006:	4602      	mov	r2, r0
 8007008:	b928      	cbnz	r0, 8007016 <__i2b+0x1a>
 800700a:	4b05      	ldr	r3, [pc, #20]	; (8007020 <__i2b+0x24>)
 800700c:	4805      	ldr	r0, [pc, #20]	; (8007024 <__i2b+0x28>)
 800700e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007012:	f000 fd35 	bl	8007a80 <__assert_func>
 8007016:	2301      	movs	r3, #1
 8007018:	6144      	str	r4, [r0, #20]
 800701a:	6103      	str	r3, [r0, #16]
 800701c:	bd10      	pop	{r4, pc}
 800701e:	bf00      	nop
 8007020:	08008447 	.word	0x08008447
 8007024:	080084b8 	.word	0x080084b8

08007028 <__multiply>:
 8007028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702c:	4691      	mov	r9, r2
 800702e:	690a      	ldr	r2, [r1, #16]
 8007030:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007034:	429a      	cmp	r2, r3
 8007036:	bfb8      	it	lt
 8007038:	460b      	movlt	r3, r1
 800703a:	460c      	mov	r4, r1
 800703c:	bfbc      	itt	lt
 800703e:	464c      	movlt	r4, r9
 8007040:	4699      	movlt	r9, r3
 8007042:	6927      	ldr	r7, [r4, #16]
 8007044:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007048:	68a3      	ldr	r3, [r4, #8]
 800704a:	6861      	ldr	r1, [r4, #4]
 800704c:	eb07 060a 	add.w	r6, r7, sl
 8007050:	42b3      	cmp	r3, r6
 8007052:	b085      	sub	sp, #20
 8007054:	bfb8      	it	lt
 8007056:	3101      	addlt	r1, #1
 8007058:	f7ff fed8 	bl	8006e0c <_Balloc>
 800705c:	b930      	cbnz	r0, 800706c <__multiply+0x44>
 800705e:	4602      	mov	r2, r0
 8007060:	4b44      	ldr	r3, [pc, #272]	; (8007174 <__multiply+0x14c>)
 8007062:	4845      	ldr	r0, [pc, #276]	; (8007178 <__multiply+0x150>)
 8007064:	f240 115d 	movw	r1, #349	; 0x15d
 8007068:	f000 fd0a 	bl	8007a80 <__assert_func>
 800706c:	f100 0514 	add.w	r5, r0, #20
 8007070:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007074:	462b      	mov	r3, r5
 8007076:	2200      	movs	r2, #0
 8007078:	4543      	cmp	r3, r8
 800707a:	d321      	bcc.n	80070c0 <__multiply+0x98>
 800707c:	f104 0314 	add.w	r3, r4, #20
 8007080:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007084:	f109 0314 	add.w	r3, r9, #20
 8007088:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800708c:	9202      	str	r2, [sp, #8]
 800708e:	1b3a      	subs	r2, r7, r4
 8007090:	3a15      	subs	r2, #21
 8007092:	f022 0203 	bic.w	r2, r2, #3
 8007096:	3204      	adds	r2, #4
 8007098:	f104 0115 	add.w	r1, r4, #21
 800709c:	428f      	cmp	r7, r1
 800709e:	bf38      	it	cc
 80070a0:	2204      	movcc	r2, #4
 80070a2:	9201      	str	r2, [sp, #4]
 80070a4:	9a02      	ldr	r2, [sp, #8]
 80070a6:	9303      	str	r3, [sp, #12]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d80c      	bhi.n	80070c6 <__multiply+0x9e>
 80070ac:	2e00      	cmp	r6, #0
 80070ae:	dd03      	ble.n	80070b8 <__multiply+0x90>
 80070b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d05a      	beq.n	800716e <__multiply+0x146>
 80070b8:	6106      	str	r6, [r0, #16]
 80070ba:	b005      	add	sp, #20
 80070bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c0:	f843 2b04 	str.w	r2, [r3], #4
 80070c4:	e7d8      	b.n	8007078 <__multiply+0x50>
 80070c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80070ca:	f1ba 0f00 	cmp.w	sl, #0
 80070ce:	d024      	beq.n	800711a <__multiply+0xf2>
 80070d0:	f104 0e14 	add.w	lr, r4, #20
 80070d4:	46a9      	mov	r9, r5
 80070d6:	f04f 0c00 	mov.w	ip, #0
 80070da:	f85e 2b04 	ldr.w	r2, [lr], #4
 80070de:	f8d9 1000 	ldr.w	r1, [r9]
 80070e2:	fa1f fb82 	uxth.w	fp, r2
 80070e6:	b289      	uxth	r1, r1
 80070e8:	fb0a 110b 	mla	r1, sl, fp, r1
 80070ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80070f0:	f8d9 2000 	ldr.w	r2, [r9]
 80070f4:	4461      	add	r1, ip
 80070f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070fa:	fb0a c20b 	mla	r2, sl, fp, ip
 80070fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007102:	b289      	uxth	r1, r1
 8007104:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007108:	4577      	cmp	r7, lr
 800710a:	f849 1b04 	str.w	r1, [r9], #4
 800710e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007112:	d8e2      	bhi.n	80070da <__multiply+0xb2>
 8007114:	9a01      	ldr	r2, [sp, #4]
 8007116:	f845 c002 	str.w	ip, [r5, r2]
 800711a:	9a03      	ldr	r2, [sp, #12]
 800711c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007120:	3304      	adds	r3, #4
 8007122:	f1b9 0f00 	cmp.w	r9, #0
 8007126:	d020      	beq.n	800716a <__multiply+0x142>
 8007128:	6829      	ldr	r1, [r5, #0]
 800712a:	f104 0c14 	add.w	ip, r4, #20
 800712e:	46ae      	mov	lr, r5
 8007130:	f04f 0a00 	mov.w	sl, #0
 8007134:	f8bc b000 	ldrh.w	fp, [ip]
 8007138:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800713c:	fb09 220b 	mla	r2, r9, fp, r2
 8007140:	4492      	add	sl, r2
 8007142:	b289      	uxth	r1, r1
 8007144:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007148:	f84e 1b04 	str.w	r1, [lr], #4
 800714c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007150:	f8be 1000 	ldrh.w	r1, [lr]
 8007154:	0c12      	lsrs	r2, r2, #16
 8007156:	fb09 1102 	mla	r1, r9, r2, r1
 800715a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800715e:	4567      	cmp	r7, ip
 8007160:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007164:	d8e6      	bhi.n	8007134 <__multiply+0x10c>
 8007166:	9a01      	ldr	r2, [sp, #4]
 8007168:	50a9      	str	r1, [r5, r2]
 800716a:	3504      	adds	r5, #4
 800716c:	e79a      	b.n	80070a4 <__multiply+0x7c>
 800716e:	3e01      	subs	r6, #1
 8007170:	e79c      	b.n	80070ac <__multiply+0x84>
 8007172:	bf00      	nop
 8007174:	08008447 	.word	0x08008447
 8007178:	080084b8 	.word	0x080084b8

0800717c <__pow5mult>:
 800717c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007180:	4615      	mov	r5, r2
 8007182:	f012 0203 	ands.w	r2, r2, #3
 8007186:	4606      	mov	r6, r0
 8007188:	460f      	mov	r7, r1
 800718a:	d007      	beq.n	800719c <__pow5mult+0x20>
 800718c:	4c25      	ldr	r4, [pc, #148]	; (8007224 <__pow5mult+0xa8>)
 800718e:	3a01      	subs	r2, #1
 8007190:	2300      	movs	r3, #0
 8007192:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007196:	f7ff fe9b 	bl	8006ed0 <__multadd>
 800719a:	4607      	mov	r7, r0
 800719c:	10ad      	asrs	r5, r5, #2
 800719e:	d03d      	beq.n	800721c <__pow5mult+0xa0>
 80071a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071a2:	b97c      	cbnz	r4, 80071c4 <__pow5mult+0x48>
 80071a4:	2010      	movs	r0, #16
 80071a6:	f7ff fe29 	bl	8006dfc <malloc>
 80071aa:	4602      	mov	r2, r0
 80071ac:	6270      	str	r0, [r6, #36]	; 0x24
 80071ae:	b928      	cbnz	r0, 80071bc <__pow5mult+0x40>
 80071b0:	4b1d      	ldr	r3, [pc, #116]	; (8007228 <__pow5mult+0xac>)
 80071b2:	481e      	ldr	r0, [pc, #120]	; (800722c <__pow5mult+0xb0>)
 80071b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80071b8:	f000 fc62 	bl	8007a80 <__assert_func>
 80071bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071c0:	6004      	str	r4, [r0, #0]
 80071c2:	60c4      	str	r4, [r0, #12]
 80071c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80071c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071cc:	b94c      	cbnz	r4, 80071e2 <__pow5mult+0x66>
 80071ce:	f240 2171 	movw	r1, #625	; 0x271
 80071d2:	4630      	mov	r0, r6
 80071d4:	f7ff ff12 	bl	8006ffc <__i2b>
 80071d8:	2300      	movs	r3, #0
 80071da:	f8c8 0008 	str.w	r0, [r8, #8]
 80071de:	4604      	mov	r4, r0
 80071e0:	6003      	str	r3, [r0, #0]
 80071e2:	f04f 0900 	mov.w	r9, #0
 80071e6:	07eb      	lsls	r3, r5, #31
 80071e8:	d50a      	bpl.n	8007200 <__pow5mult+0x84>
 80071ea:	4639      	mov	r1, r7
 80071ec:	4622      	mov	r2, r4
 80071ee:	4630      	mov	r0, r6
 80071f0:	f7ff ff1a 	bl	8007028 <__multiply>
 80071f4:	4639      	mov	r1, r7
 80071f6:	4680      	mov	r8, r0
 80071f8:	4630      	mov	r0, r6
 80071fa:	f7ff fe47 	bl	8006e8c <_Bfree>
 80071fe:	4647      	mov	r7, r8
 8007200:	106d      	asrs	r5, r5, #1
 8007202:	d00b      	beq.n	800721c <__pow5mult+0xa0>
 8007204:	6820      	ldr	r0, [r4, #0]
 8007206:	b938      	cbnz	r0, 8007218 <__pow5mult+0x9c>
 8007208:	4622      	mov	r2, r4
 800720a:	4621      	mov	r1, r4
 800720c:	4630      	mov	r0, r6
 800720e:	f7ff ff0b 	bl	8007028 <__multiply>
 8007212:	6020      	str	r0, [r4, #0]
 8007214:	f8c0 9000 	str.w	r9, [r0]
 8007218:	4604      	mov	r4, r0
 800721a:	e7e4      	b.n	80071e6 <__pow5mult+0x6a>
 800721c:	4638      	mov	r0, r7
 800721e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007222:	bf00      	nop
 8007224:	08008608 	.word	0x08008608
 8007228:	080083d5 	.word	0x080083d5
 800722c:	080084b8 	.word	0x080084b8

08007230 <__lshift>:
 8007230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007234:	460c      	mov	r4, r1
 8007236:	6849      	ldr	r1, [r1, #4]
 8007238:	6923      	ldr	r3, [r4, #16]
 800723a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800723e:	68a3      	ldr	r3, [r4, #8]
 8007240:	4607      	mov	r7, r0
 8007242:	4691      	mov	r9, r2
 8007244:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007248:	f108 0601 	add.w	r6, r8, #1
 800724c:	42b3      	cmp	r3, r6
 800724e:	db0b      	blt.n	8007268 <__lshift+0x38>
 8007250:	4638      	mov	r0, r7
 8007252:	f7ff fddb 	bl	8006e0c <_Balloc>
 8007256:	4605      	mov	r5, r0
 8007258:	b948      	cbnz	r0, 800726e <__lshift+0x3e>
 800725a:	4602      	mov	r2, r0
 800725c:	4b2a      	ldr	r3, [pc, #168]	; (8007308 <__lshift+0xd8>)
 800725e:	482b      	ldr	r0, [pc, #172]	; (800730c <__lshift+0xdc>)
 8007260:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007264:	f000 fc0c 	bl	8007a80 <__assert_func>
 8007268:	3101      	adds	r1, #1
 800726a:	005b      	lsls	r3, r3, #1
 800726c:	e7ee      	b.n	800724c <__lshift+0x1c>
 800726e:	2300      	movs	r3, #0
 8007270:	f100 0114 	add.w	r1, r0, #20
 8007274:	f100 0210 	add.w	r2, r0, #16
 8007278:	4618      	mov	r0, r3
 800727a:	4553      	cmp	r3, sl
 800727c:	db37      	blt.n	80072ee <__lshift+0xbe>
 800727e:	6920      	ldr	r0, [r4, #16]
 8007280:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007284:	f104 0314 	add.w	r3, r4, #20
 8007288:	f019 091f 	ands.w	r9, r9, #31
 800728c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007290:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007294:	d02f      	beq.n	80072f6 <__lshift+0xc6>
 8007296:	f1c9 0e20 	rsb	lr, r9, #32
 800729a:	468a      	mov	sl, r1
 800729c:	f04f 0c00 	mov.w	ip, #0
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	fa02 f209 	lsl.w	r2, r2, r9
 80072a6:	ea42 020c 	orr.w	r2, r2, ip
 80072aa:	f84a 2b04 	str.w	r2, [sl], #4
 80072ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b2:	4298      	cmp	r0, r3
 80072b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80072b8:	d8f2      	bhi.n	80072a0 <__lshift+0x70>
 80072ba:	1b03      	subs	r3, r0, r4
 80072bc:	3b15      	subs	r3, #21
 80072be:	f023 0303 	bic.w	r3, r3, #3
 80072c2:	3304      	adds	r3, #4
 80072c4:	f104 0215 	add.w	r2, r4, #21
 80072c8:	4290      	cmp	r0, r2
 80072ca:	bf38      	it	cc
 80072cc:	2304      	movcc	r3, #4
 80072ce:	f841 c003 	str.w	ip, [r1, r3]
 80072d2:	f1bc 0f00 	cmp.w	ip, #0
 80072d6:	d001      	beq.n	80072dc <__lshift+0xac>
 80072d8:	f108 0602 	add.w	r6, r8, #2
 80072dc:	3e01      	subs	r6, #1
 80072de:	4638      	mov	r0, r7
 80072e0:	612e      	str	r6, [r5, #16]
 80072e2:	4621      	mov	r1, r4
 80072e4:	f7ff fdd2 	bl	8006e8c <_Bfree>
 80072e8:	4628      	mov	r0, r5
 80072ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80072f2:	3301      	adds	r3, #1
 80072f4:	e7c1      	b.n	800727a <__lshift+0x4a>
 80072f6:	3904      	subs	r1, #4
 80072f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007300:	4298      	cmp	r0, r3
 8007302:	d8f9      	bhi.n	80072f8 <__lshift+0xc8>
 8007304:	e7ea      	b.n	80072dc <__lshift+0xac>
 8007306:	bf00      	nop
 8007308:	08008447 	.word	0x08008447
 800730c:	080084b8 	.word	0x080084b8

08007310 <__mcmp>:
 8007310:	b530      	push	{r4, r5, lr}
 8007312:	6902      	ldr	r2, [r0, #16]
 8007314:	690c      	ldr	r4, [r1, #16]
 8007316:	1b12      	subs	r2, r2, r4
 8007318:	d10e      	bne.n	8007338 <__mcmp+0x28>
 800731a:	f100 0314 	add.w	r3, r0, #20
 800731e:	3114      	adds	r1, #20
 8007320:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007324:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007328:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800732c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007330:	42a5      	cmp	r5, r4
 8007332:	d003      	beq.n	800733c <__mcmp+0x2c>
 8007334:	d305      	bcc.n	8007342 <__mcmp+0x32>
 8007336:	2201      	movs	r2, #1
 8007338:	4610      	mov	r0, r2
 800733a:	bd30      	pop	{r4, r5, pc}
 800733c:	4283      	cmp	r3, r0
 800733e:	d3f3      	bcc.n	8007328 <__mcmp+0x18>
 8007340:	e7fa      	b.n	8007338 <__mcmp+0x28>
 8007342:	f04f 32ff 	mov.w	r2, #4294967295
 8007346:	e7f7      	b.n	8007338 <__mcmp+0x28>

08007348 <__mdiff>:
 8007348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734c:	460c      	mov	r4, r1
 800734e:	4606      	mov	r6, r0
 8007350:	4611      	mov	r1, r2
 8007352:	4620      	mov	r0, r4
 8007354:	4690      	mov	r8, r2
 8007356:	f7ff ffdb 	bl	8007310 <__mcmp>
 800735a:	1e05      	subs	r5, r0, #0
 800735c:	d110      	bne.n	8007380 <__mdiff+0x38>
 800735e:	4629      	mov	r1, r5
 8007360:	4630      	mov	r0, r6
 8007362:	f7ff fd53 	bl	8006e0c <_Balloc>
 8007366:	b930      	cbnz	r0, 8007376 <__mdiff+0x2e>
 8007368:	4b3a      	ldr	r3, [pc, #232]	; (8007454 <__mdiff+0x10c>)
 800736a:	4602      	mov	r2, r0
 800736c:	f240 2132 	movw	r1, #562	; 0x232
 8007370:	4839      	ldr	r0, [pc, #228]	; (8007458 <__mdiff+0x110>)
 8007372:	f000 fb85 	bl	8007a80 <__assert_func>
 8007376:	2301      	movs	r3, #1
 8007378:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800737c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007380:	bfa4      	itt	ge
 8007382:	4643      	movge	r3, r8
 8007384:	46a0      	movge	r8, r4
 8007386:	4630      	mov	r0, r6
 8007388:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800738c:	bfa6      	itte	ge
 800738e:	461c      	movge	r4, r3
 8007390:	2500      	movge	r5, #0
 8007392:	2501      	movlt	r5, #1
 8007394:	f7ff fd3a 	bl	8006e0c <_Balloc>
 8007398:	b920      	cbnz	r0, 80073a4 <__mdiff+0x5c>
 800739a:	4b2e      	ldr	r3, [pc, #184]	; (8007454 <__mdiff+0x10c>)
 800739c:	4602      	mov	r2, r0
 800739e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80073a2:	e7e5      	b.n	8007370 <__mdiff+0x28>
 80073a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80073a8:	6926      	ldr	r6, [r4, #16]
 80073aa:	60c5      	str	r5, [r0, #12]
 80073ac:	f104 0914 	add.w	r9, r4, #20
 80073b0:	f108 0514 	add.w	r5, r8, #20
 80073b4:	f100 0e14 	add.w	lr, r0, #20
 80073b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80073bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80073c0:	f108 0210 	add.w	r2, r8, #16
 80073c4:	46f2      	mov	sl, lr
 80073c6:	2100      	movs	r1, #0
 80073c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80073cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80073d0:	fa1f f883 	uxth.w	r8, r3
 80073d4:	fa11 f18b 	uxtah	r1, r1, fp
 80073d8:	0c1b      	lsrs	r3, r3, #16
 80073da:	eba1 0808 	sub.w	r8, r1, r8
 80073de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80073e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80073e6:	fa1f f888 	uxth.w	r8, r8
 80073ea:	1419      	asrs	r1, r3, #16
 80073ec:	454e      	cmp	r6, r9
 80073ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80073f2:	f84a 3b04 	str.w	r3, [sl], #4
 80073f6:	d8e7      	bhi.n	80073c8 <__mdiff+0x80>
 80073f8:	1b33      	subs	r3, r6, r4
 80073fa:	3b15      	subs	r3, #21
 80073fc:	f023 0303 	bic.w	r3, r3, #3
 8007400:	3304      	adds	r3, #4
 8007402:	3415      	adds	r4, #21
 8007404:	42a6      	cmp	r6, r4
 8007406:	bf38      	it	cc
 8007408:	2304      	movcc	r3, #4
 800740a:	441d      	add	r5, r3
 800740c:	4473      	add	r3, lr
 800740e:	469e      	mov	lr, r3
 8007410:	462e      	mov	r6, r5
 8007412:	4566      	cmp	r6, ip
 8007414:	d30e      	bcc.n	8007434 <__mdiff+0xec>
 8007416:	f10c 0203 	add.w	r2, ip, #3
 800741a:	1b52      	subs	r2, r2, r5
 800741c:	f022 0203 	bic.w	r2, r2, #3
 8007420:	3d03      	subs	r5, #3
 8007422:	45ac      	cmp	ip, r5
 8007424:	bf38      	it	cc
 8007426:	2200      	movcc	r2, #0
 8007428:	441a      	add	r2, r3
 800742a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800742e:	b17b      	cbz	r3, 8007450 <__mdiff+0x108>
 8007430:	6107      	str	r7, [r0, #16]
 8007432:	e7a3      	b.n	800737c <__mdiff+0x34>
 8007434:	f856 8b04 	ldr.w	r8, [r6], #4
 8007438:	fa11 f288 	uxtah	r2, r1, r8
 800743c:	1414      	asrs	r4, r2, #16
 800743e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007442:	b292      	uxth	r2, r2
 8007444:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007448:	f84e 2b04 	str.w	r2, [lr], #4
 800744c:	1421      	asrs	r1, r4, #16
 800744e:	e7e0      	b.n	8007412 <__mdiff+0xca>
 8007450:	3f01      	subs	r7, #1
 8007452:	e7ea      	b.n	800742a <__mdiff+0xe2>
 8007454:	08008447 	.word	0x08008447
 8007458:	080084b8 	.word	0x080084b8

0800745c <__d2b>:
 800745c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007460:	4689      	mov	r9, r1
 8007462:	2101      	movs	r1, #1
 8007464:	ec57 6b10 	vmov	r6, r7, d0
 8007468:	4690      	mov	r8, r2
 800746a:	f7ff fccf 	bl	8006e0c <_Balloc>
 800746e:	4604      	mov	r4, r0
 8007470:	b930      	cbnz	r0, 8007480 <__d2b+0x24>
 8007472:	4602      	mov	r2, r0
 8007474:	4b25      	ldr	r3, [pc, #148]	; (800750c <__d2b+0xb0>)
 8007476:	4826      	ldr	r0, [pc, #152]	; (8007510 <__d2b+0xb4>)
 8007478:	f240 310a 	movw	r1, #778	; 0x30a
 800747c:	f000 fb00 	bl	8007a80 <__assert_func>
 8007480:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007484:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007488:	bb35      	cbnz	r5, 80074d8 <__d2b+0x7c>
 800748a:	2e00      	cmp	r6, #0
 800748c:	9301      	str	r3, [sp, #4]
 800748e:	d028      	beq.n	80074e2 <__d2b+0x86>
 8007490:	4668      	mov	r0, sp
 8007492:	9600      	str	r6, [sp, #0]
 8007494:	f7ff fd82 	bl	8006f9c <__lo0bits>
 8007498:	9900      	ldr	r1, [sp, #0]
 800749a:	b300      	cbz	r0, 80074de <__d2b+0x82>
 800749c:	9a01      	ldr	r2, [sp, #4]
 800749e:	f1c0 0320 	rsb	r3, r0, #32
 80074a2:	fa02 f303 	lsl.w	r3, r2, r3
 80074a6:	430b      	orrs	r3, r1
 80074a8:	40c2      	lsrs	r2, r0
 80074aa:	6163      	str	r3, [r4, #20]
 80074ac:	9201      	str	r2, [sp, #4]
 80074ae:	9b01      	ldr	r3, [sp, #4]
 80074b0:	61a3      	str	r3, [r4, #24]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	bf14      	ite	ne
 80074b6:	2202      	movne	r2, #2
 80074b8:	2201      	moveq	r2, #1
 80074ba:	6122      	str	r2, [r4, #16]
 80074bc:	b1d5      	cbz	r5, 80074f4 <__d2b+0x98>
 80074be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80074c2:	4405      	add	r5, r0
 80074c4:	f8c9 5000 	str.w	r5, [r9]
 80074c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074cc:	f8c8 0000 	str.w	r0, [r8]
 80074d0:	4620      	mov	r0, r4
 80074d2:	b003      	add	sp, #12
 80074d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074dc:	e7d5      	b.n	800748a <__d2b+0x2e>
 80074de:	6161      	str	r1, [r4, #20]
 80074e0:	e7e5      	b.n	80074ae <__d2b+0x52>
 80074e2:	a801      	add	r0, sp, #4
 80074e4:	f7ff fd5a 	bl	8006f9c <__lo0bits>
 80074e8:	9b01      	ldr	r3, [sp, #4]
 80074ea:	6163      	str	r3, [r4, #20]
 80074ec:	2201      	movs	r2, #1
 80074ee:	6122      	str	r2, [r4, #16]
 80074f0:	3020      	adds	r0, #32
 80074f2:	e7e3      	b.n	80074bc <__d2b+0x60>
 80074f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80074f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074fc:	f8c9 0000 	str.w	r0, [r9]
 8007500:	6918      	ldr	r0, [r3, #16]
 8007502:	f7ff fd2b 	bl	8006f5c <__hi0bits>
 8007506:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800750a:	e7df      	b.n	80074cc <__d2b+0x70>
 800750c:	08008447 	.word	0x08008447
 8007510:	080084b8 	.word	0x080084b8

08007514 <_calloc_r>:
 8007514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007516:	fba1 2402 	umull	r2, r4, r1, r2
 800751a:	b94c      	cbnz	r4, 8007530 <_calloc_r+0x1c>
 800751c:	4611      	mov	r1, r2
 800751e:	9201      	str	r2, [sp, #4]
 8007520:	f000 f87a 	bl	8007618 <_malloc_r>
 8007524:	9a01      	ldr	r2, [sp, #4]
 8007526:	4605      	mov	r5, r0
 8007528:	b930      	cbnz	r0, 8007538 <_calloc_r+0x24>
 800752a:	4628      	mov	r0, r5
 800752c:	b003      	add	sp, #12
 800752e:	bd30      	pop	{r4, r5, pc}
 8007530:	220c      	movs	r2, #12
 8007532:	6002      	str	r2, [r0, #0]
 8007534:	2500      	movs	r5, #0
 8007536:	e7f8      	b.n	800752a <_calloc_r+0x16>
 8007538:	4621      	mov	r1, r4
 800753a:	f7fd fe01 	bl	8005140 <memset>
 800753e:	e7f4      	b.n	800752a <_calloc_r+0x16>

08007540 <_free_r>:
 8007540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007542:	2900      	cmp	r1, #0
 8007544:	d044      	beq.n	80075d0 <_free_r+0x90>
 8007546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800754a:	9001      	str	r0, [sp, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	f1a1 0404 	sub.w	r4, r1, #4
 8007552:	bfb8      	it	lt
 8007554:	18e4      	addlt	r4, r4, r3
 8007556:	f000 fb19 	bl	8007b8c <__malloc_lock>
 800755a:	4a1e      	ldr	r2, [pc, #120]	; (80075d4 <_free_r+0x94>)
 800755c:	9801      	ldr	r0, [sp, #4]
 800755e:	6813      	ldr	r3, [r2, #0]
 8007560:	b933      	cbnz	r3, 8007570 <_free_r+0x30>
 8007562:	6063      	str	r3, [r4, #4]
 8007564:	6014      	str	r4, [r2, #0]
 8007566:	b003      	add	sp, #12
 8007568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800756c:	f000 bb14 	b.w	8007b98 <__malloc_unlock>
 8007570:	42a3      	cmp	r3, r4
 8007572:	d908      	bls.n	8007586 <_free_r+0x46>
 8007574:	6825      	ldr	r5, [r4, #0]
 8007576:	1961      	adds	r1, r4, r5
 8007578:	428b      	cmp	r3, r1
 800757a:	bf01      	itttt	eq
 800757c:	6819      	ldreq	r1, [r3, #0]
 800757e:	685b      	ldreq	r3, [r3, #4]
 8007580:	1949      	addeq	r1, r1, r5
 8007582:	6021      	streq	r1, [r4, #0]
 8007584:	e7ed      	b.n	8007562 <_free_r+0x22>
 8007586:	461a      	mov	r2, r3
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	b10b      	cbz	r3, 8007590 <_free_r+0x50>
 800758c:	42a3      	cmp	r3, r4
 800758e:	d9fa      	bls.n	8007586 <_free_r+0x46>
 8007590:	6811      	ldr	r1, [r2, #0]
 8007592:	1855      	adds	r5, r2, r1
 8007594:	42a5      	cmp	r5, r4
 8007596:	d10b      	bne.n	80075b0 <_free_r+0x70>
 8007598:	6824      	ldr	r4, [r4, #0]
 800759a:	4421      	add	r1, r4
 800759c:	1854      	adds	r4, r2, r1
 800759e:	42a3      	cmp	r3, r4
 80075a0:	6011      	str	r1, [r2, #0]
 80075a2:	d1e0      	bne.n	8007566 <_free_r+0x26>
 80075a4:	681c      	ldr	r4, [r3, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	6053      	str	r3, [r2, #4]
 80075aa:	4421      	add	r1, r4
 80075ac:	6011      	str	r1, [r2, #0]
 80075ae:	e7da      	b.n	8007566 <_free_r+0x26>
 80075b0:	d902      	bls.n	80075b8 <_free_r+0x78>
 80075b2:	230c      	movs	r3, #12
 80075b4:	6003      	str	r3, [r0, #0]
 80075b6:	e7d6      	b.n	8007566 <_free_r+0x26>
 80075b8:	6825      	ldr	r5, [r4, #0]
 80075ba:	1961      	adds	r1, r4, r5
 80075bc:	428b      	cmp	r3, r1
 80075be:	bf04      	itt	eq
 80075c0:	6819      	ldreq	r1, [r3, #0]
 80075c2:	685b      	ldreq	r3, [r3, #4]
 80075c4:	6063      	str	r3, [r4, #4]
 80075c6:	bf04      	itt	eq
 80075c8:	1949      	addeq	r1, r1, r5
 80075ca:	6021      	streq	r1, [r4, #0]
 80075cc:	6054      	str	r4, [r2, #4]
 80075ce:	e7ca      	b.n	8007566 <_free_r+0x26>
 80075d0:	b003      	add	sp, #12
 80075d2:	bd30      	pop	{r4, r5, pc}
 80075d4:	2000229c 	.word	0x2000229c

080075d8 <sbrk_aligned>:
 80075d8:	b570      	push	{r4, r5, r6, lr}
 80075da:	4e0e      	ldr	r6, [pc, #56]	; (8007614 <sbrk_aligned+0x3c>)
 80075dc:	460c      	mov	r4, r1
 80075de:	6831      	ldr	r1, [r6, #0]
 80075e0:	4605      	mov	r5, r0
 80075e2:	b911      	cbnz	r1, 80075ea <sbrk_aligned+0x12>
 80075e4:	f000 f9e6 	bl	80079b4 <_sbrk_r>
 80075e8:	6030      	str	r0, [r6, #0]
 80075ea:	4621      	mov	r1, r4
 80075ec:	4628      	mov	r0, r5
 80075ee:	f000 f9e1 	bl	80079b4 <_sbrk_r>
 80075f2:	1c43      	adds	r3, r0, #1
 80075f4:	d00a      	beq.n	800760c <sbrk_aligned+0x34>
 80075f6:	1cc4      	adds	r4, r0, #3
 80075f8:	f024 0403 	bic.w	r4, r4, #3
 80075fc:	42a0      	cmp	r0, r4
 80075fe:	d007      	beq.n	8007610 <sbrk_aligned+0x38>
 8007600:	1a21      	subs	r1, r4, r0
 8007602:	4628      	mov	r0, r5
 8007604:	f000 f9d6 	bl	80079b4 <_sbrk_r>
 8007608:	3001      	adds	r0, #1
 800760a:	d101      	bne.n	8007610 <sbrk_aligned+0x38>
 800760c:	f04f 34ff 	mov.w	r4, #4294967295
 8007610:	4620      	mov	r0, r4
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	200022a0 	.word	0x200022a0

08007618 <_malloc_r>:
 8007618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800761c:	1ccd      	adds	r5, r1, #3
 800761e:	f025 0503 	bic.w	r5, r5, #3
 8007622:	3508      	adds	r5, #8
 8007624:	2d0c      	cmp	r5, #12
 8007626:	bf38      	it	cc
 8007628:	250c      	movcc	r5, #12
 800762a:	2d00      	cmp	r5, #0
 800762c:	4607      	mov	r7, r0
 800762e:	db01      	blt.n	8007634 <_malloc_r+0x1c>
 8007630:	42a9      	cmp	r1, r5
 8007632:	d905      	bls.n	8007640 <_malloc_r+0x28>
 8007634:	230c      	movs	r3, #12
 8007636:	603b      	str	r3, [r7, #0]
 8007638:	2600      	movs	r6, #0
 800763a:	4630      	mov	r0, r6
 800763c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007640:	4e2e      	ldr	r6, [pc, #184]	; (80076fc <_malloc_r+0xe4>)
 8007642:	f000 faa3 	bl	8007b8c <__malloc_lock>
 8007646:	6833      	ldr	r3, [r6, #0]
 8007648:	461c      	mov	r4, r3
 800764a:	bb34      	cbnz	r4, 800769a <_malloc_r+0x82>
 800764c:	4629      	mov	r1, r5
 800764e:	4638      	mov	r0, r7
 8007650:	f7ff ffc2 	bl	80075d8 <sbrk_aligned>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	4604      	mov	r4, r0
 8007658:	d14d      	bne.n	80076f6 <_malloc_r+0xde>
 800765a:	6834      	ldr	r4, [r6, #0]
 800765c:	4626      	mov	r6, r4
 800765e:	2e00      	cmp	r6, #0
 8007660:	d140      	bne.n	80076e4 <_malloc_r+0xcc>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	4631      	mov	r1, r6
 8007666:	4638      	mov	r0, r7
 8007668:	eb04 0803 	add.w	r8, r4, r3
 800766c:	f000 f9a2 	bl	80079b4 <_sbrk_r>
 8007670:	4580      	cmp	r8, r0
 8007672:	d13a      	bne.n	80076ea <_malloc_r+0xd2>
 8007674:	6821      	ldr	r1, [r4, #0]
 8007676:	3503      	adds	r5, #3
 8007678:	1a6d      	subs	r5, r5, r1
 800767a:	f025 0503 	bic.w	r5, r5, #3
 800767e:	3508      	adds	r5, #8
 8007680:	2d0c      	cmp	r5, #12
 8007682:	bf38      	it	cc
 8007684:	250c      	movcc	r5, #12
 8007686:	4629      	mov	r1, r5
 8007688:	4638      	mov	r0, r7
 800768a:	f7ff ffa5 	bl	80075d8 <sbrk_aligned>
 800768e:	3001      	adds	r0, #1
 8007690:	d02b      	beq.n	80076ea <_malloc_r+0xd2>
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	442b      	add	r3, r5
 8007696:	6023      	str	r3, [r4, #0]
 8007698:	e00e      	b.n	80076b8 <_malloc_r+0xa0>
 800769a:	6822      	ldr	r2, [r4, #0]
 800769c:	1b52      	subs	r2, r2, r5
 800769e:	d41e      	bmi.n	80076de <_malloc_r+0xc6>
 80076a0:	2a0b      	cmp	r2, #11
 80076a2:	d916      	bls.n	80076d2 <_malloc_r+0xba>
 80076a4:	1961      	adds	r1, r4, r5
 80076a6:	42a3      	cmp	r3, r4
 80076a8:	6025      	str	r5, [r4, #0]
 80076aa:	bf18      	it	ne
 80076ac:	6059      	strne	r1, [r3, #4]
 80076ae:	6863      	ldr	r3, [r4, #4]
 80076b0:	bf08      	it	eq
 80076b2:	6031      	streq	r1, [r6, #0]
 80076b4:	5162      	str	r2, [r4, r5]
 80076b6:	604b      	str	r3, [r1, #4]
 80076b8:	4638      	mov	r0, r7
 80076ba:	f104 060b 	add.w	r6, r4, #11
 80076be:	f000 fa6b 	bl	8007b98 <__malloc_unlock>
 80076c2:	f026 0607 	bic.w	r6, r6, #7
 80076c6:	1d23      	adds	r3, r4, #4
 80076c8:	1af2      	subs	r2, r6, r3
 80076ca:	d0b6      	beq.n	800763a <_malloc_r+0x22>
 80076cc:	1b9b      	subs	r3, r3, r6
 80076ce:	50a3      	str	r3, [r4, r2]
 80076d0:	e7b3      	b.n	800763a <_malloc_r+0x22>
 80076d2:	6862      	ldr	r2, [r4, #4]
 80076d4:	42a3      	cmp	r3, r4
 80076d6:	bf0c      	ite	eq
 80076d8:	6032      	streq	r2, [r6, #0]
 80076da:	605a      	strne	r2, [r3, #4]
 80076dc:	e7ec      	b.n	80076b8 <_malloc_r+0xa0>
 80076de:	4623      	mov	r3, r4
 80076e0:	6864      	ldr	r4, [r4, #4]
 80076e2:	e7b2      	b.n	800764a <_malloc_r+0x32>
 80076e4:	4634      	mov	r4, r6
 80076e6:	6876      	ldr	r6, [r6, #4]
 80076e8:	e7b9      	b.n	800765e <_malloc_r+0x46>
 80076ea:	230c      	movs	r3, #12
 80076ec:	603b      	str	r3, [r7, #0]
 80076ee:	4638      	mov	r0, r7
 80076f0:	f000 fa52 	bl	8007b98 <__malloc_unlock>
 80076f4:	e7a1      	b.n	800763a <_malloc_r+0x22>
 80076f6:	6025      	str	r5, [r4, #0]
 80076f8:	e7de      	b.n	80076b8 <_malloc_r+0xa0>
 80076fa:	bf00      	nop
 80076fc:	2000229c 	.word	0x2000229c

08007700 <__sfputc_r>:
 8007700:	6893      	ldr	r3, [r2, #8]
 8007702:	3b01      	subs	r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	b410      	push	{r4}
 8007708:	6093      	str	r3, [r2, #8]
 800770a:	da08      	bge.n	800771e <__sfputc_r+0x1e>
 800770c:	6994      	ldr	r4, [r2, #24]
 800770e:	42a3      	cmp	r3, r4
 8007710:	db01      	blt.n	8007716 <__sfputc_r+0x16>
 8007712:	290a      	cmp	r1, #10
 8007714:	d103      	bne.n	800771e <__sfputc_r+0x1e>
 8007716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800771a:	f7fe ba11 	b.w	8005b40 <__swbuf_r>
 800771e:	6813      	ldr	r3, [r2, #0]
 8007720:	1c58      	adds	r0, r3, #1
 8007722:	6010      	str	r0, [r2, #0]
 8007724:	7019      	strb	r1, [r3, #0]
 8007726:	4608      	mov	r0, r1
 8007728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800772c:	4770      	bx	lr

0800772e <__sfputs_r>:
 800772e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007730:	4606      	mov	r6, r0
 8007732:	460f      	mov	r7, r1
 8007734:	4614      	mov	r4, r2
 8007736:	18d5      	adds	r5, r2, r3
 8007738:	42ac      	cmp	r4, r5
 800773a:	d101      	bne.n	8007740 <__sfputs_r+0x12>
 800773c:	2000      	movs	r0, #0
 800773e:	e007      	b.n	8007750 <__sfputs_r+0x22>
 8007740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007744:	463a      	mov	r2, r7
 8007746:	4630      	mov	r0, r6
 8007748:	f7ff ffda 	bl	8007700 <__sfputc_r>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d1f3      	bne.n	8007738 <__sfputs_r+0xa>
 8007750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007754 <_vfiprintf_r>:
 8007754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007758:	460d      	mov	r5, r1
 800775a:	b09d      	sub	sp, #116	; 0x74
 800775c:	4614      	mov	r4, r2
 800775e:	4698      	mov	r8, r3
 8007760:	4606      	mov	r6, r0
 8007762:	b118      	cbz	r0, 800776c <_vfiprintf_r+0x18>
 8007764:	6983      	ldr	r3, [r0, #24]
 8007766:	b90b      	cbnz	r3, 800776c <_vfiprintf_r+0x18>
 8007768:	f7ff fa3e 	bl	8006be8 <__sinit>
 800776c:	4b89      	ldr	r3, [pc, #548]	; (8007994 <_vfiprintf_r+0x240>)
 800776e:	429d      	cmp	r5, r3
 8007770:	d11b      	bne.n	80077aa <_vfiprintf_r+0x56>
 8007772:	6875      	ldr	r5, [r6, #4]
 8007774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007776:	07d9      	lsls	r1, r3, #31
 8007778:	d405      	bmi.n	8007786 <_vfiprintf_r+0x32>
 800777a:	89ab      	ldrh	r3, [r5, #12]
 800777c:	059a      	lsls	r2, r3, #22
 800777e:	d402      	bmi.n	8007786 <_vfiprintf_r+0x32>
 8007780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007782:	f7ff fad4 	bl	8006d2e <__retarget_lock_acquire_recursive>
 8007786:	89ab      	ldrh	r3, [r5, #12]
 8007788:	071b      	lsls	r3, r3, #28
 800778a:	d501      	bpl.n	8007790 <_vfiprintf_r+0x3c>
 800778c:	692b      	ldr	r3, [r5, #16]
 800778e:	b9eb      	cbnz	r3, 80077cc <_vfiprintf_r+0x78>
 8007790:	4629      	mov	r1, r5
 8007792:	4630      	mov	r0, r6
 8007794:	f7fe fa26 	bl	8005be4 <__swsetup_r>
 8007798:	b1c0      	cbz	r0, 80077cc <_vfiprintf_r+0x78>
 800779a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800779c:	07dc      	lsls	r4, r3, #31
 800779e:	d50e      	bpl.n	80077be <_vfiprintf_r+0x6a>
 80077a0:	f04f 30ff 	mov.w	r0, #4294967295
 80077a4:	b01d      	add	sp, #116	; 0x74
 80077a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077aa:	4b7b      	ldr	r3, [pc, #492]	; (8007998 <_vfiprintf_r+0x244>)
 80077ac:	429d      	cmp	r5, r3
 80077ae:	d101      	bne.n	80077b4 <_vfiprintf_r+0x60>
 80077b0:	68b5      	ldr	r5, [r6, #8]
 80077b2:	e7df      	b.n	8007774 <_vfiprintf_r+0x20>
 80077b4:	4b79      	ldr	r3, [pc, #484]	; (800799c <_vfiprintf_r+0x248>)
 80077b6:	429d      	cmp	r5, r3
 80077b8:	bf08      	it	eq
 80077ba:	68f5      	ldreq	r5, [r6, #12]
 80077bc:	e7da      	b.n	8007774 <_vfiprintf_r+0x20>
 80077be:	89ab      	ldrh	r3, [r5, #12]
 80077c0:	0598      	lsls	r0, r3, #22
 80077c2:	d4ed      	bmi.n	80077a0 <_vfiprintf_r+0x4c>
 80077c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077c6:	f7ff fab3 	bl	8006d30 <__retarget_lock_release_recursive>
 80077ca:	e7e9      	b.n	80077a0 <_vfiprintf_r+0x4c>
 80077cc:	2300      	movs	r3, #0
 80077ce:	9309      	str	r3, [sp, #36]	; 0x24
 80077d0:	2320      	movs	r3, #32
 80077d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80077da:	2330      	movs	r3, #48	; 0x30
 80077dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80079a0 <_vfiprintf_r+0x24c>
 80077e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077e4:	f04f 0901 	mov.w	r9, #1
 80077e8:	4623      	mov	r3, r4
 80077ea:	469a      	mov	sl, r3
 80077ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077f0:	b10a      	cbz	r2, 80077f6 <_vfiprintf_r+0xa2>
 80077f2:	2a25      	cmp	r2, #37	; 0x25
 80077f4:	d1f9      	bne.n	80077ea <_vfiprintf_r+0x96>
 80077f6:	ebba 0b04 	subs.w	fp, sl, r4
 80077fa:	d00b      	beq.n	8007814 <_vfiprintf_r+0xc0>
 80077fc:	465b      	mov	r3, fp
 80077fe:	4622      	mov	r2, r4
 8007800:	4629      	mov	r1, r5
 8007802:	4630      	mov	r0, r6
 8007804:	f7ff ff93 	bl	800772e <__sfputs_r>
 8007808:	3001      	adds	r0, #1
 800780a:	f000 80aa 	beq.w	8007962 <_vfiprintf_r+0x20e>
 800780e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007810:	445a      	add	r2, fp
 8007812:	9209      	str	r2, [sp, #36]	; 0x24
 8007814:	f89a 3000 	ldrb.w	r3, [sl]
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 80a2 	beq.w	8007962 <_vfiprintf_r+0x20e>
 800781e:	2300      	movs	r3, #0
 8007820:	f04f 32ff 	mov.w	r2, #4294967295
 8007824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007828:	f10a 0a01 	add.w	sl, sl, #1
 800782c:	9304      	str	r3, [sp, #16]
 800782e:	9307      	str	r3, [sp, #28]
 8007830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007834:	931a      	str	r3, [sp, #104]	; 0x68
 8007836:	4654      	mov	r4, sl
 8007838:	2205      	movs	r2, #5
 800783a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800783e:	4858      	ldr	r0, [pc, #352]	; (80079a0 <_vfiprintf_r+0x24c>)
 8007840:	f7f8 fcce 	bl	80001e0 <memchr>
 8007844:	9a04      	ldr	r2, [sp, #16]
 8007846:	b9d8      	cbnz	r0, 8007880 <_vfiprintf_r+0x12c>
 8007848:	06d1      	lsls	r1, r2, #27
 800784a:	bf44      	itt	mi
 800784c:	2320      	movmi	r3, #32
 800784e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007852:	0713      	lsls	r3, r2, #28
 8007854:	bf44      	itt	mi
 8007856:	232b      	movmi	r3, #43	; 0x2b
 8007858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800785c:	f89a 3000 	ldrb.w	r3, [sl]
 8007860:	2b2a      	cmp	r3, #42	; 0x2a
 8007862:	d015      	beq.n	8007890 <_vfiprintf_r+0x13c>
 8007864:	9a07      	ldr	r2, [sp, #28]
 8007866:	4654      	mov	r4, sl
 8007868:	2000      	movs	r0, #0
 800786a:	f04f 0c0a 	mov.w	ip, #10
 800786e:	4621      	mov	r1, r4
 8007870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007874:	3b30      	subs	r3, #48	; 0x30
 8007876:	2b09      	cmp	r3, #9
 8007878:	d94e      	bls.n	8007918 <_vfiprintf_r+0x1c4>
 800787a:	b1b0      	cbz	r0, 80078aa <_vfiprintf_r+0x156>
 800787c:	9207      	str	r2, [sp, #28]
 800787e:	e014      	b.n	80078aa <_vfiprintf_r+0x156>
 8007880:	eba0 0308 	sub.w	r3, r0, r8
 8007884:	fa09 f303 	lsl.w	r3, r9, r3
 8007888:	4313      	orrs	r3, r2
 800788a:	9304      	str	r3, [sp, #16]
 800788c:	46a2      	mov	sl, r4
 800788e:	e7d2      	b.n	8007836 <_vfiprintf_r+0xe2>
 8007890:	9b03      	ldr	r3, [sp, #12]
 8007892:	1d19      	adds	r1, r3, #4
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	9103      	str	r1, [sp, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	bfbb      	ittet	lt
 800789c:	425b      	neglt	r3, r3
 800789e:	f042 0202 	orrlt.w	r2, r2, #2
 80078a2:	9307      	strge	r3, [sp, #28]
 80078a4:	9307      	strlt	r3, [sp, #28]
 80078a6:	bfb8      	it	lt
 80078a8:	9204      	strlt	r2, [sp, #16]
 80078aa:	7823      	ldrb	r3, [r4, #0]
 80078ac:	2b2e      	cmp	r3, #46	; 0x2e
 80078ae:	d10c      	bne.n	80078ca <_vfiprintf_r+0x176>
 80078b0:	7863      	ldrb	r3, [r4, #1]
 80078b2:	2b2a      	cmp	r3, #42	; 0x2a
 80078b4:	d135      	bne.n	8007922 <_vfiprintf_r+0x1ce>
 80078b6:	9b03      	ldr	r3, [sp, #12]
 80078b8:	1d1a      	adds	r2, r3, #4
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	9203      	str	r2, [sp, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bfb8      	it	lt
 80078c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80078c6:	3402      	adds	r4, #2
 80078c8:	9305      	str	r3, [sp, #20]
 80078ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80079b0 <_vfiprintf_r+0x25c>
 80078ce:	7821      	ldrb	r1, [r4, #0]
 80078d0:	2203      	movs	r2, #3
 80078d2:	4650      	mov	r0, sl
 80078d4:	f7f8 fc84 	bl	80001e0 <memchr>
 80078d8:	b140      	cbz	r0, 80078ec <_vfiprintf_r+0x198>
 80078da:	2340      	movs	r3, #64	; 0x40
 80078dc:	eba0 000a 	sub.w	r0, r0, sl
 80078e0:	fa03 f000 	lsl.w	r0, r3, r0
 80078e4:	9b04      	ldr	r3, [sp, #16]
 80078e6:	4303      	orrs	r3, r0
 80078e8:	3401      	adds	r4, #1
 80078ea:	9304      	str	r3, [sp, #16]
 80078ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f0:	482c      	ldr	r0, [pc, #176]	; (80079a4 <_vfiprintf_r+0x250>)
 80078f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078f6:	2206      	movs	r2, #6
 80078f8:	f7f8 fc72 	bl	80001e0 <memchr>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	d03f      	beq.n	8007980 <_vfiprintf_r+0x22c>
 8007900:	4b29      	ldr	r3, [pc, #164]	; (80079a8 <_vfiprintf_r+0x254>)
 8007902:	bb1b      	cbnz	r3, 800794c <_vfiprintf_r+0x1f8>
 8007904:	9b03      	ldr	r3, [sp, #12]
 8007906:	3307      	adds	r3, #7
 8007908:	f023 0307 	bic.w	r3, r3, #7
 800790c:	3308      	adds	r3, #8
 800790e:	9303      	str	r3, [sp, #12]
 8007910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007912:	443b      	add	r3, r7
 8007914:	9309      	str	r3, [sp, #36]	; 0x24
 8007916:	e767      	b.n	80077e8 <_vfiprintf_r+0x94>
 8007918:	fb0c 3202 	mla	r2, ip, r2, r3
 800791c:	460c      	mov	r4, r1
 800791e:	2001      	movs	r0, #1
 8007920:	e7a5      	b.n	800786e <_vfiprintf_r+0x11a>
 8007922:	2300      	movs	r3, #0
 8007924:	3401      	adds	r4, #1
 8007926:	9305      	str	r3, [sp, #20]
 8007928:	4619      	mov	r1, r3
 800792a:	f04f 0c0a 	mov.w	ip, #10
 800792e:	4620      	mov	r0, r4
 8007930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007934:	3a30      	subs	r2, #48	; 0x30
 8007936:	2a09      	cmp	r2, #9
 8007938:	d903      	bls.n	8007942 <_vfiprintf_r+0x1ee>
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0c5      	beq.n	80078ca <_vfiprintf_r+0x176>
 800793e:	9105      	str	r1, [sp, #20]
 8007940:	e7c3      	b.n	80078ca <_vfiprintf_r+0x176>
 8007942:	fb0c 2101 	mla	r1, ip, r1, r2
 8007946:	4604      	mov	r4, r0
 8007948:	2301      	movs	r3, #1
 800794a:	e7f0      	b.n	800792e <_vfiprintf_r+0x1da>
 800794c:	ab03      	add	r3, sp, #12
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	462a      	mov	r2, r5
 8007952:	4b16      	ldr	r3, [pc, #88]	; (80079ac <_vfiprintf_r+0x258>)
 8007954:	a904      	add	r1, sp, #16
 8007956:	4630      	mov	r0, r6
 8007958:	f7fd fc9a 	bl	8005290 <_printf_float>
 800795c:	4607      	mov	r7, r0
 800795e:	1c78      	adds	r0, r7, #1
 8007960:	d1d6      	bne.n	8007910 <_vfiprintf_r+0x1bc>
 8007962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007964:	07d9      	lsls	r1, r3, #31
 8007966:	d405      	bmi.n	8007974 <_vfiprintf_r+0x220>
 8007968:	89ab      	ldrh	r3, [r5, #12]
 800796a:	059a      	lsls	r2, r3, #22
 800796c:	d402      	bmi.n	8007974 <_vfiprintf_r+0x220>
 800796e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007970:	f7ff f9de 	bl	8006d30 <__retarget_lock_release_recursive>
 8007974:	89ab      	ldrh	r3, [r5, #12]
 8007976:	065b      	lsls	r3, r3, #25
 8007978:	f53f af12 	bmi.w	80077a0 <_vfiprintf_r+0x4c>
 800797c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800797e:	e711      	b.n	80077a4 <_vfiprintf_r+0x50>
 8007980:	ab03      	add	r3, sp, #12
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	462a      	mov	r2, r5
 8007986:	4b09      	ldr	r3, [pc, #36]	; (80079ac <_vfiprintf_r+0x258>)
 8007988:	a904      	add	r1, sp, #16
 800798a:	4630      	mov	r0, r6
 800798c:	f7fd ff24 	bl	80057d8 <_printf_i>
 8007990:	e7e4      	b.n	800795c <_vfiprintf_r+0x208>
 8007992:	bf00      	nop
 8007994:	08008478 	.word	0x08008478
 8007998:	08008498 	.word	0x08008498
 800799c:	08008458 	.word	0x08008458
 80079a0:	08008614 	.word	0x08008614
 80079a4:	0800861e 	.word	0x0800861e
 80079a8:	08005291 	.word	0x08005291
 80079ac:	0800772f 	.word	0x0800772f
 80079b0:	0800861a 	.word	0x0800861a

080079b4 <_sbrk_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4d06      	ldr	r5, [pc, #24]	; (80079d0 <_sbrk_r+0x1c>)
 80079b8:	2300      	movs	r3, #0
 80079ba:	4604      	mov	r4, r0
 80079bc:	4608      	mov	r0, r1
 80079be:	602b      	str	r3, [r5, #0]
 80079c0:	f7fa fe26 	bl	8002610 <_sbrk>
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d102      	bne.n	80079ce <_sbrk_r+0x1a>
 80079c8:	682b      	ldr	r3, [r5, #0]
 80079ca:	b103      	cbz	r3, 80079ce <_sbrk_r+0x1a>
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	bd38      	pop	{r3, r4, r5, pc}
 80079d0:	200022a4 	.word	0x200022a4

080079d4 <__sread>:
 80079d4:	b510      	push	{r4, lr}
 80079d6:	460c      	mov	r4, r1
 80079d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079dc:	f000 f8e2 	bl	8007ba4 <_read_r>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	bfab      	itete	ge
 80079e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079e6:	89a3      	ldrhlt	r3, [r4, #12]
 80079e8:	181b      	addge	r3, r3, r0
 80079ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079ee:	bfac      	ite	ge
 80079f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80079f2:	81a3      	strhlt	r3, [r4, #12]
 80079f4:	bd10      	pop	{r4, pc}

080079f6 <__swrite>:
 80079f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fa:	461f      	mov	r7, r3
 80079fc:	898b      	ldrh	r3, [r1, #12]
 80079fe:	05db      	lsls	r3, r3, #23
 8007a00:	4605      	mov	r5, r0
 8007a02:	460c      	mov	r4, r1
 8007a04:	4616      	mov	r6, r2
 8007a06:	d505      	bpl.n	8007a14 <__swrite+0x1e>
 8007a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f000 f898 	bl	8007b44 <_lseek_r>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a1e:	81a3      	strh	r3, [r4, #12]
 8007a20:	4632      	mov	r2, r6
 8007a22:	463b      	mov	r3, r7
 8007a24:	4628      	mov	r0, r5
 8007a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2a:	f000 b817 	b.w	8007a5c <_write_r>

08007a2e <__sseek>:
 8007a2e:	b510      	push	{r4, lr}
 8007a30:	460c      	mov	r4, r1
 8007a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a36:	f000 f885 	bl	8007b44 <_lseek_r>
 8007a3a:	1c43      	adds	r3, r0, #1
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	bf15      	itete	ne
 8007a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a4a:	81a3      	strheq	r3, [r4, #12]
 8007a4c:	bf18      	it	ne
 8007a4e:	81a3      	strhne	r3, [r4, #12]
 8007a50:	bd10      	pop	{r4, pc}

08007a52 <__sclose>:
 8007a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a56:	f000 b831 	b.w	8007abc <_close_r>
	...

08007a5c <_write_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d07      	ldr	r5, [pc, #28]	; (8007a7c <_write_r+0x20>)
 8007a60:	4604      	mov	r4, r0
 8007a62:	4608      	mov	r0, r1
 8007a64:	4611      	mov	r1, r2
 8007a66:	2200      	movs	r2, #0
 8007a68:	602a      	str	r2, [r5, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f7fa fb21 	bl	80020b2 <_write>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d102      	bne.n	8007a7a <_write_r+0x1e>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	b103      	cbz	r3, 8007a7a <_write_r+0x1e>
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	200022a4 	.word	0x200022a4

08007a80 <__assert_func>:
 8007a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a82:	4614      	mov	r4, r2
 8007a84:	461a      	mov	r2, r3
 8007a86:	4b09      	ldr	r3, [pc, #36]	; (8007aac <__assert_func+0x2c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	68d8      	ldr	r0, [r3, #12]
 8007a8e:	b14c      	cbz	r4, 8007aa4 <__assert_func+0x24>
 8007a90:	4b07      	ldr	r3, [pc, #28]	; (8007ab0 <__assert_func+0x30>)
 8007a92:	9100      	str	r1, [sp, #0]
 8007a94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a98:	4906      	ldr	r1, [pc, #24]	; (8007ab4 <__assert_func+0x34>)
 8007a9a:	462b      	mov	r3, r5
 8007a9c:	f000 f81e 	bl	8007adc <fiprintf>
 8007aa0:	f000 f89f 	bl	8007be2 <abort>
 8007aa4:	4b04      	ldr	r3, [pc, #16]	; (8007ab8 <__assert_func+0x38>)
 8007aa6:	461c      	mov	r4, r3
 8007aa8:	e7f3      	b.n	8007a92 <__assert_func+0x12>
 8007aaa:	bf00      	nop
 8007aac:	20000018 	.word	0x20000018
 8007ab0:	08008625 	.word	0x08008625
 8007ab4:	08008632 	.word	0x08008632
 8007ab8:	08008660 	.word	0x08008660

08007abc <_close_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4d06      	ldr	r5, [pc, #24]	; (8007ad8 <_close_r+0x1c>)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	4608      	mov	r0, r1
 8007ac6:	602b      	str	r3, [r5, #0]
 8007ac8:	f7fa fd6d 	bl	80025a6 <_close>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_close_r+0x1a>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_close_r+0x1a>
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	200022a4 	.word	0x200022a4

08007adc <fiprintf>:
 8007adc:	b40e      	push	{r1, r2, r3}
 8007ade:	b503      	push	{r0, r1, lr}
 8007ae0:	4601      	mov	r1, r0
 8007ae2:	ab03      	add	r3, sp, #12
 8007ae4:	4805      	ldr	r0, [pc, #20]	; (8007afc <fiprintf+0x20>)
 8007ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aea:	6800      	ldr	r0, [r0, #0]
 8007aec:	9301      	str	r3, [sp, #4]
 8007aee:	f7ff fe31 	bl	8007754 <_vfiprintf_r>
 8007af2:	b002      	add	sp, #8
 8007af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007af8:	b003      	add	sp, #12
 8007afa:	4770      	bx	lr
 8007afc:	20000018 	.word	0x20000018

08007b00 <_fstat_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4d07      	ldr	r5, [pc, #28]	; (8007b20 <_fstat_r+0x20>)
 8007b04:	2300      	movs	r3, #0
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	602b      	str	r3, [r5, #0]
 8007b0e:	f7fa fd56 	bl	80025be <_fstat>
 8007b12:	1c43      	adds	r3, r0, #1
 8007b14:	d102      	bne.n	8007b1c <_fstat_r+0x1c>
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	b103      	cbz	r3, 8007b1c <_fstat_r+0x1c>
 8007b1a:	6023      	str	r3, [r4, #0]
 8007b1c:	bd38      	pop	{r3, r4, r5, pc}
 8007b1e:	bf00      	nop
 8007b20:	200022a4 	.word	0x200022a4

08007b24 <_isatty_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4d06      	ldr	r5, [pc, #24]	; (8007b40 <_isatty_r+0x1c>)
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	602b      	str	r3, [r5, #0]
 8007b30:	f7fa fd55 	bl	80025de <_isatty>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d102      	bne.n	8007b3e <_isatty_r+0x1a>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	b103      	cbz	r3, 8007b3e <_isatty_r+0x1a>
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	200022a4 	.word	0x200022a4

08007b44 <_lseek_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4d07      	ldr	r5, [pc, #28]	; (8007b64 <_lseek_r+0x20>)
 8007b48:	4604      	mov	r4, r0
 8007b4a:	4608      	mov	r0, r1
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	2200      	movs	r2, #0
 8007b50:	602a      	str	r2, [r5, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	f7fa fd4e 	bl	80025f4 <_lseek>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d102      	bne.n	8007b62 <_lseek_r+0x1e>
 8007b5c:	682b      	ldr	r3, [r5, #0]
 8007b5e:	b103      	cbz	r3, 8007b62 <_lseek_r+0x1e>
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	200022a4 	.word	0x200022a4

08007b68 <__ascii_mbtowc>:
 8007b68:	b082      	sub	sp, #8
 8007b6a:	b901      	cbnz	r1, 8007b6e <__ascii_mbtowc+0x6>
 8007b6c:	a901      	add	r1, sp, #4
 8007b6e:	b142      	cbz	r2, 8007b82 <__ascii_mbtowc+0x1a>
 8007b70:	b14b      	cbz	r3, 8007b86 <__ascii_mbtowc+0x1e>
 8007b72:	7813      	ldrb	r3, [r2, #0]
 8007b74:	600b      	str	r3, [r1, #0]
 8007b76:	7812      	ldrb	r2, [r2, #0]
 8007b78:	1e10      	subs	r0, r2, #0
 8007b7a:	bf18      	it	ne
 8007b7c:	2001      	movne	r0, #1
 8007b7e:	b002      	add	sp, #8
 8007b80:	4770      	bx	lr
 8007b82:	4610      	mov	r0, r2
 8007b84:	e7fb      	b.n	8007b7e <__ascii_mbtowc+0x16>
 8007b86:	f06f 0001 	mvn.w	r0, #1
 8007b8a:	e7f8      	b.n	8007b7e <__ascii_mbtowc+0x16>

08007b8c <__malloc_lock>:
 8007b8c:	4801      	ldr	r0, [pc, #4]	; (8007b94 <__malloc_lock+0x8>)
 8007b8e:	f7ff b8ce 	b.w	8006d2e <__retarget_lock_acquire_recursive>
 8007b92:	bf00      	nop
 8007b94:	20002298 	.word	0x20002298

08007b98 <__malloc_unlock>:
 8007b98:	4801      	ldr	r0, [pc, #4]	; (8007ba0 <__malloc_unlock+0x8>)
 8007b9a:	f7ff b8c9 	b.w	8006d30 <__retarget_lock_release_recursive>
 8007b9e:	bf00      	nop
 8007ba0:	20002298 	.word	0x20002298

08007ba4 <_read_r>:
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	4d07      	ldr	r5, [pc, #28]	; (8007bc4 <_read_r+0x20>)
 8007ba8:	4604      	mov	r4, r0
 8007baa:	4608      	mov	r0, r1
 8007bac:	4611      	mov	r1, r2
 8007bae:	2200      	movs	r2, #0
 8007bb0:	602a      	str	r2, [r5, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f7fa fcda 	bl	800256c <_read>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	d102      	bne.n	8007bc2 <_read_r+0x1e>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	b103      	cbz	r3, 8007bc2 <_read_r+0x1e>
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	200022a4 	.word	0x200022a4

08007bc8 <__ascii_wctomb>:
 8007bc8:	b149      	cbz	r1, 8007bde <__ascii_wctomb+0x16>
 8007bca:	2aff      	cmp	r2, #255	; 0xff
 8007bcc:	bf85      	ittet	hi
 8007bce:	238a      	movhi	r3, #138	; 0x8a
 8007bd0:	6003      	strhi	r3, [r0, #0]
 8007bd2:	700a      	strbls	r2, [r1, #0]
 8007bd4:	f04f 30ff 	movhi.w	r0, #4294967295
 8007bd8:	bf98      	it	ls
 8007bda:	2001      	movls	r0, #1
 8007bdc:	4770      	bx	lr
 8007bde:	4608      	mov	r0, r1
 8007be0:	4770      	bx	lr

08007be2 <abort>:
 8007be2:	b508      	push	{r3, lr}
 8007be4:	2006      	movs	r0, #6
 8007be6:	f000 f82b 	bl	8007c40 <raise>
 8007bea:	2001      	movs	r0, #1
 8007bec:	f7fa fcb4 	bl	8002558 <_exit>

08007bf0 <_raise_r>:
 8007bf0:	291f      	cmp	r1, #31
 8007bf2:	b538      	push	{r3, r4, r5, lr}
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	460d      	mov	r5, r1
 8007bf8:	d904      	bls.n	8007c04 <_raise_r+0x14>
 8007bfa:	2316      	movs	r3, #22
 8007bfc:	6003      	str	r3, [r0, #0]
 8007bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007c02:	bd38      	pop	{r3, r4, r5, pc}
 8007c04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c06:	b112      	cbz	r2, 8007c0e <_raise_r+0x1e>
 8007c08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c0c:	b94b      	cbnz	r3, 8007c22 <_raise_r+0x32>
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f000 f830 	bl	8007c74 <_getpid_r>
 8007c14:	462a      	mov	r2, r5
 8007c16:	4601      	mov	r1, r0
 8007c18:	4620      	mov	r0, r4
 8007c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c1e:	f000 b817 	b.w	8007c50 <_kill_r>
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d00a      	beq.n	8007c3c <_raise_r+0x4c>
 8007c26:	1c59      	adds	r1, r3, #1
 8007c28:	d103      	bne.n	8007c32 <_raise_r+0x42>
 8007c2a:	2316      	movs	r3, #22
 8007c2c:	6003      	str	r3, [r0, #0]
 8007c2e:	2001      	movs	r0, #1
 8007c30:	e7e7      	b.n	8007c02 <_raise_r+0x12>
 8007c32:	2400      	movs	r4, #0
 8007c34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c38:	4628      	mov	r0, r5
 8007c3a:	4798      	blx	r3
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	e7e0      	b.n	8007c02 <_raise_r+0x12>

08007c40 <raise>:
 8007c40:	4b02      	ldr	r3, [pc, #8]	; (8007c4c <raise+0xc>)
 8007c42:	4601      	mov	r1, r0
 8007c44:	6818      	ldr	r0, [r3, #0]
 8007c46:	f7ff bfd3 	b.w	8007bf0 <_raise_r>
 8007c4a:	bf00      	nop
 8007c4c:	20000018 	.word	0x20000018

08007c50 <_kill_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4d07      	ldr	r5, [pc, #28]	; (8007c70 <_kill_r+0x20>)
 8007c54:	2300      	movs	r3, #0
 8007c56:	4604      	mov	r4, r0
 8007c58:	4608      	mov	r0, r1
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	602b      	str	r3, [r5, #0]
 8007c5e:	f7fa fc6b 	bl	8002538 <_kill>
 8007c62:	1c43      	adds	r3, r0, #1
 8007c64:	d102      	bne.n	8007c6c <_kill_r+0x1c>
 8007c66:	682b      	ldr	r3, [r5, #0]
 8007c68:	b103      	cbz	r3, 8007c6c <_kill_r+0x1c>
 8007c6a:	6023      	str	r3, [r4, #0]
 8007c6c:	bd38      	pop	{r3, r4, r5, pc}
 8007c6e:	bf00      	nop
 8007c70:	200022a4 	.word	0x200022a4

08007c74 <_getpid_r>:
 8007c74:	f7fa bc58 	b.w	8002528 <_getpid>

08007c78 <_init>:
 8007c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7a:	bf00      	nop
 8007c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7e:	bc08      	pop	{r3}
 8007c80:	469e      	mov	lr, r3
 8007c82:	4770      	bx	lr

08007c84 <_fini>:
 8007c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c86:	bf00      	nop
 8007c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8a:	bc08      	pop	{r3}
 8007c8c:	469e      	mov	lr, r3
 8007c8e:	4770      	bx	lr
