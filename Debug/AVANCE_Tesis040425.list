
AVANCE_Tesis040425.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000adc  08007f50  08007f50  00017f50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a2c  08008a2c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08008a2c  08008a2c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a2c  08008a2c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a2c  08008a2c  00018a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a30  08008a30  00018a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          00002114  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200022fc  200022fc  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000facd  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002df9  00000000  00000000  0002fce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  00032ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd8  00000000  00000000  00033938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b9f  00000000  00000000  00034610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001695f  00000000  00000000  000581af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1849  00000000  00000000  0006eb0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130357  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048c4  00000000  00000000  001303a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f38 	.word	0x08007f38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08007f38 	.word	0x08007f38

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	db0c      	blt.n	8000bd4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	f003 021f 	and.w	r2, r3, #31
 8000bc0:	4907      	ldr	r1, [pc, #28]	; (8000be0 <__NVIC_ClearPendingIRQ+0x38>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	095b      	lsrs	r3, r3, #5
 8000bc8:	2001      	movs	r0, #1
 8000bca:	fa00 f202 	lsl.w	r2, r0, r2
 8000bce:	3360      	adds	r3, #96	; 0x60
 8000bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <audio_recorder_init>:
// Contadores de diagnóstico
volatile uint32_t halfBuffersLost = 0;
volatile uint32_t fullBuffersLost = 0;

// Inicializa el grabador de audio
bool audio_recorder_init(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000bea:	af00      	add	r7, sp, #0
    // Configurar el ADC y el DMA para la captura
    tim_TIM6_MIC_config(); // Configura el timer para muestreo a 48kHz
 8000bec:	f004 fa34 	bl	8005058 <tim_TIM6_MIC_config>
//    opamp_config();        // Configura el OPAMP para el micrófono PA0->A0
    adc_MIC_config();      // Configura el ADC
 8000bf0:	f003 fdfa 	bl	80047e8 <adc_MIC_config>
    
    // Obtener valores del sector base
    uint8_t buffer[512];
    if (SD_disk_read(0, buffer, 0, 1) == RES_OK) {
 8000bf4:	1d39      	adds	r1, r7, #4
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 fe2e 	bl	800185c <SD_disk_read>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d13d      	bne.n	8000c82 <audio_recorder_init+0x9e>
        // Leer current file index del sector base
        currentFileIndex = buffer[3] | ((uint16_t)buffer[4] << 8);
 8000c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c0e:	78db      	ldrb	r3, [r3, #3]
 8000c10:	b21a      	sxth	r2, r3
 8000c12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c1a:	791b      	ldrb	r3, [r3, #4]
 8000c1c:	021b      	lsls	r3, r3, #8
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b21b      	sxth	r3, r3
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <audio_recorder_init+0xd4>)
 8000c28:	801a      	strh	r2, [r3, #0]

        // Leer sector counter
        uint32_t sector_counter = buffer[8] | ((uint32_t)buffer[9] << 8) |
 8000c2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c32:	7a1b      	ldrb	r3, [r3, #8]
 8000c34:	461a      	mov	r2, r3
 8000c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c3e:	7a5b      	ldrb	r3, [r3, #9]
 8000c40:	021b      	lsls	r3, r3, #8
 8000c42:	431a      	orrs	r2, r3
                                 ((uint32_t)buffer[10] << 16) | ((uint32_t)buffer[11] << 24);
 8000c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c4c:	7a9b      	ldrb	r3, [r3, #10]
 8000c4e:	041b      	lsls	r3, r3, #16
        uint32_t sector_counter = buffer[8] | ((uint32_t)buffer[9] << 8) |
 8000c50:	431a      	orrs	r2, r3
                                 ((uint32_t)buffer[10] << 16) | ((uint32_t)buffer[11] << 24);
 8000c52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c5a:	7adb      	ldrb	r3, [r3, #11]
 8000c5c:	061b      	lsls	r3, r3, #24
        uint32_t sector_counter = buffer[8] | ((uint32_t)buffer[9] << 8) |
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

        // Verificar si hay espacio disponible
        if (sector_counter + 45000 > total_sd_sectors) {
 8000c64:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000c68:	f503 432f 	add.w	r3, r3, #44800	; 0xaf00
 8000c6c:	33c8      	adds	r3, #200	; 0xc8
 8000c6e:	4a13      	ldr	r2, [pc, #76]	; (8000cbc <audio_recorder_init+0xd8>)
 8000c70:	6812      	ldr	r2, [r2, #0]
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d905      	bls.n	8000c82 <audio_recorder_init+0x9e>
            printf("¡ADVERTENCIA! Memoria SD llena. No se pueden grabar mas archivos.\r\n");
 8000c76:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <audio_recorder_init+0xdc>)
 8000c78:	f005 f8ba 	bl	8005df0 <puts>
            memoriaLlena = true;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <audio_recorder_init+0xe0>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
        }
    }

    // Resetear estados
    recorderState = RECORDER_IDLE;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <audio_recorder_init+0xe4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
    currentSector = 1;
 8000c88:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <audio_recorder_init+0xe8>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
    sectoresGrabados = 0;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <audio_recorder_init+0xec>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
    halfBufferReady = false;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <audio_recorder_init+0xf0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
    fullBufferReady = false;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <audio_recorder_init+0xf4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
    stopRequested = false;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <audio_recorder_init+0xf8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
    
    printf("Grabador de audio inicializado\r\n");
 8000ca6:	480e      	ldr	r0, [pc, #56]	; (8000ce0 <audio_recorder_init+0xfc>)
 8000ca8:	f005 f8a2 	bl	8005df0 <puts>
    return true;
 8000cac:	2301      	movs	r3, #1
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20002206 	.word	0x20002206
 8000cbc:	20002220 	.word	0x20002220
 8000cc0:	08007f50 	.word	0x08007f50
 8000cc4:	20002211 	.word	0x20002211
 8000cc8:	20002204 	.word	0x20002204
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20002208 	.word	0x20002208
 8000cd4:	2000220e 	.word	0x2000220e
 8000cd8:	2000220f 	.word	0x2000220f
 8000cdc:	20002210 	.word	0x20002210
 8000ce0:	08007f94 	.word	0x08007f94

08000ce4 <audio_recorder_start>:

// Inicia la grabación
bool audio_recorder_start(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
    // Verificar si podemos iniciar grabación
    if (recorderState != RECORDER_IDLE && recorderState != RECORDER_STOPPED) {
 8000cee:	4b91      	ldr	r3, [pc, #580]	; (8000f34 <audio_recorder_start+0x250>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d009      	beq.n	8000d0c <audio_recorder_start+0x28>
 8000cf8:	4b8e      	ldr	r3, [pc, #568]	; (8000f34 <audio_recorder_start+0x250>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d004      	beq.n	8000d0c <audio_recorder_start+0x28>
        printf("Error: No se puede iniciar grabacion, estado incorrecto\r\n");
 8000d02:	488d      	ldr	r0, [pc, #564]	; (8000f38 <audio_recorder_start+0x254>)
 8000d04:	f005 f874 	bl	8005df0 <puts>
        return false;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	e10d      	b.n	8000f28 <audio_recorder_start+0x244>
    }
    
    // Verificar si memoria está llena
    if (memoriaLlena) {
 8000d0c:	4b8b      	ldr	r3, [pc, #556]	; (8000f3c <audio_recorder_start+0x258>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d004      	beq.n	8000d20 <audio_recorder_start+0x3c>
        printf("Error: No se puede iniciar grabacion, memoria SD llena\r\n");
 8000d16:	488a      	ldr	r0, [pc, #552]	; (8000f40 <audio_recorder_start+0x25c>)
 8000d18:	f005 f86a 	bl	8005df0 <puts>
        return false;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e103      	b.n	8000f28 <audio_recorder_start+0x244>
    }

    // Actualizar sector donde comienza el archivo
    if (currentFileIndex > 0) {
 8000d20:	4b88      	ldr	r3, [pc, #544]	; (8000f44 <audio_recorder_start+0x260>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00c      	beq.n	8000d44 <audio_recorder_start+0x60>
        currentSector = 1 + (currentFileIndex * (45000)); // +1 por sector principal
 8000d2a:	4b86      	ldr	r3, [pc, #536]	; (8000f44 <audio_recorder_start+0x260>)
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8000d36:	fb02 f303 	mul.w	r3, r2, r3
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b82      	ldr	r3, [pc, #520]	; (8000f48 <audio_recorder_start+0x264>)
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	e002      	b.n	8000d4a <audio_recorder_start+0x66>
    } else {
        currentSector = 1;
 8000d44:	4b80      	ldr	r3, [pc, #512]	; (8000f48 <audio_recorder_start+0x264>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
    }

    // Inicializar y configurar el buffer DMA
    memset((void*)audioBuffer, 0, sizeof(audioBuffer));
 8000d4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d4e:	2100      	movs	r1, #0
 8000d50:	487e      	ldr	r0, [pc, #504]	; (8000f4c <audio_recorder_start+0x268>)
 8000d52:	f004 fb55 	bl	8005400 <memset>
    
    // Iniciar DMA y timer para comenzar a recolectar datos
    adc_MIC_DMA_config((uint16_t*)audioBuffer, AUDIO_BUFFER_SIZE);
 8000d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5a:	487c      	ldr	r0, [pc, #496]	; (8000f4c <audio_recorder_start+0x268>)
 8000d5c:	f003 fdfe 	bl	800495c <adc_MIC_DMA_config>
    TIM6->CR1 |= (TIM_CR1_CEN); // Iniciar el timer
 8000d60:	4b7b      	ldr	r3, [pc, #492]	; (8000f50 <audio_recorder_start+0x26c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a7a      	ldr	r2, [pc, #488]	; (8000f50 <audio_recorder_start+0x26c>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6013      	str	r3, [r2, #0]

    // Configurar el sector principal del archivo actual
    sectorPrincipalActual = currentSector;
 8000d6c:	4b76      	ldr	r3, [pc, #472]	; (8000f48 <audio_recorder_start+0x264>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	4b78      	ldr	r3, [pc, #480]	; (8000f54 <audio_recorder_start+0x270>)
 8000d74:	801a      	strh	r2, [r3, #0]
    
    // Iniciar la grabación antes de escribir
    recorderState = RECORDER_RECORDING;
 8000d76:	4b6f      	ldr	r3, [pc, #444]	; (8000f34 <audio_recorder_start+0x250>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]
    sectoresGrabados = 0;
 8000d7c:	4b76      	ldr	r3, [pc, #472]	; (8000f58 <audio_recorder_start+0x274>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
    halfBufferReady = false;
 8000d82:	4b76      	ldr	r3, [pc, #472]	; (8000f5c <audio_recorder_start+0x278>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
    fullBufferReady = false;
 8000d88:	4b75      	ldr	r3, [pc, #468]	; (8000f60 <audio_recorder_start+0x27c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
    stopRequested = false;
 8000d8e:	4b75      	ldr	r3, [pc, #468]	; (8000f64 <audio_recorder_start+0x280>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]

    // Esperar a que el DMA llene al menos la mitad del buffer
    uint32_t timeout = HAL_GetTick() + 100; // 100ms timeout
 8000d94:	f001 fd22 	bl	80027dc <HAL_GetTick>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	3364      	adds	r3, #100	; 0x64
 8000d9c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000da0:	f102 0204 	add.w	r2, r2, #4
 8000da4:	6013      	str	r3, [r2, #0]
    while (!halfBufferReady && HAL_GetTick() < timeout) {
 8000da6:	bf00      	nop
 8000da8:	4b6c      	ldr	r3, [pc, #432]	; (8000f5c <audio_recorder_start+0x278>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	f083 0301 	eor.w	r3, r3, #1
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d009      	beq.n	8000dcc <audio_recorder_start+0xe8>
 8000db8:	f001 fd10 	bl	80027dc <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000dc2:	f103 0304 	add.w	r3, r3, #4
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d8ed      	bhi.n	8000da8 <audio_recorder_start+0xc4>
        // Esperar a que lleguen datos
    }

    if (!halfBufferReady) {
 8000dcc:	4b63      	ldr	r3, [pc, #396]	; (8000f5c <audio_recorder_start+0x278>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	f083 0301 	eor.w	r3, r3, #1
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d013      	beq.n	8000e04 <audio_recorder_start+0x120>
        printf("Error: Timeout esperando datos de audio\r\n");
 8000ddc:	4862      	ldr	r0, [pc, #392]	; (8000f68 <audio_recorder_start+0x284>)
 8000dde:	f005 f807 	bl	8005df0 <puts>
        TIM6->CR1 &= ~(TIM_CR1_CEN); // Detener timer
 8000de2:	4b5b      	ldr	r3, [pc, #364]	; (8000f50 <audio_recorder_start+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a5a      	ldr	r2, [pc, #360]	; (8000f50 <audio_recorder_start+0x26c>)
 8000de8:	f023 0301 	bic.w	r3, r3, #1
 8000dec:	6013      	str	r3, [r2, #0]
        DMA1_Channel1->CCR &= ~(DMA_CCR_EN); // Detener DMA
 8000dee:	4b5f      	ldr	r3, [pc, #380]	; (8000f6c <audio_recorder_start+0x288>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a5e      	ldr	r2, [pc, #376]	; (8000f6c <audio_recorder_start+0x288>)
 8000df4:	f023 0301 	bic.w	r3, r3, #1
 8000df8:	6013      	str	r3, [r2, #0]
        recorderState = RECORDER_STOPPED;
 8000dfa:	4b4e      	ldr	r3, [pc, #312]	; (8000f34 <audio_recorder_start+0x250>)
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	701a      	strb	r2, [r3, #0]
        return false;
 8000e00:	2300      	movs	r3, #0
 8000e02:	e091      	b.n	8000f28 <audio_recorder_start+0x244>
    }

    // Crear un buffer temporal para los primeros 8 sectores (combina metadatos + datos)
    uint8_t primerSector[AUDIO_BUFFER_SIZE]; // 8 sectores = 4096 bytes
    memset(primerSector, 0, sizeof(primerSector));
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	3b08      	subs	r3, #8
 8000e0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f004 faf5 	bl	8005400 <memset>

    // Primeros 12 bytes: metadatos del archivo
    primerSector[0] = 0;                     // segundos
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f803 2c08 	strb.w	r2, [r3, #-8]
    primerSector[1] = 0;                     // minutos
 8000e20:	f107 0308 	add.w	r3, r7, #8
 8000e24:	2200      	movs	r2, #0
 8000e26:	f803 2c07 	strb.w	r2, [r3, #-7]
    primerSector[2] = 0;                     // horas
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f803 2c06 	strb.w	r2, [r3, #-6]
    primerSector[3] = 1;                     // día semana
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f803 2c05 	strb.w	r2, [r3, #-5]
    primerSector[4] = 1;                     // día mes
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	2201      	movs	r2, #1
 8000e44:	f803 2c04 	strb.w	r2, [r3, #-4]
    primerSector[5] = 1;                     // mes
 8000e48:	f107 0308 	add.w	r3, r7, #8
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f803 2c03 	strb.w	r2, [r3, #-3]
    primerSector[6] = 23;                    // año
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	2217      	movs	r2, #23
 8000e58:	f803 2c02 	strb.w	r2, [r3, #-2]
    primerSector[7] = 0x89;                  // Llave identificadora (0x89)
 8000e5c:	f107 0308 	add.w	r3, r7, #8
 8000e60:	2289      	movs	r2, #137	; 0x89
 8000e62:	f803 2c01 	strb.w	r2, [r3, #-1]
    primerSector[8] = currentFileIndex & 0xFF;        // índice bajo
 8000e66:	4b37      	ldr	r3, [pc, #220]	; (8000f44 <audio_recorder_start+0x260>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	701a      	strb	r2, [r3, #0]
    primerSector[9] = (currentFileIndex >> 8) & 0xFF; // índice alto
 8000e74:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <audio_recorder_start+0x260>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	0a1b      	lsrs	r3, r3, #8
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	705a      	strb	r2, [r3, #1]
    // bytes 10-11 quedan en 0
    
    // A partir del byte 12, copiar datos del buffer de audio (2036 bytes)
    memcpy(primerSector + 12, (const void*)audioBuffer, AUDIO_BUFFER_SIZE - 12);
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	3b08      	subs	r3, #8
 8000e8c:	330c      	adds	r3, #12
 8000e8e:	f640 72f4 	movw	r2, #4084	; 0xff4
 8000e92:	492e      	ldr	r1, [pc, #184]	; (8000f4c <audio_recorder_start+0x268>)
 8000e94:	4618      	mov	r0, r3
 8000e96:	f004 faa5 	bl	80053e4 <memcpy>
    
    // Escribir estos 8 sectores combinados
    DRESULT write_result = SD_disk_write(0, primerSector, sectorPrincipalActual, 8);
 8000e9a:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <audio_recorder_start+0x270>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	f107 0108 	add.w	r1, r7, #8
 8000ea6:	3908      	subs	r1, #8
 8000ea8:	2308      	movs	r3, #8
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 fd46 	bl	800193c <SD_disk_write>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000eb6:	f102 0203 	add.w	r2, r2, #3
 8000eba:	7013      	strb	r3, [r2, #0]
    if (write_result != RES_OK) {
 8000ebc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000ec0:	f103 0303 	add.w	r3, r3, #3
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d019      	beq.n	8000efe <audio_recorder_start+0x21a>
        printf("Error al escribir sector principal+datos: %d\r\n", write_result);
 8000eca:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000ece:	f103 0303 	add.w	r3, r3, #3
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4826      	ldr	r0, [pc, #152]	; (8000f70 <audio_recorder_start+0x28c>)
 8000ed8:	f004 ff04 	bl	8005ce4 <iprintf>
        TIM6->CR1 &= ~(TIM_CR1_CEN);
 8000edc:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <audio_recorder_start+0x26c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	; (8000f50 <audio_recorder_start+0x26c>)
 8000ee2:	f023 0301 	bic.w	r3, r3, #1
 8000ee6:	6013      	str	r3, [r2, #0]
        DMA1_Channel1->CCR &= ~(DMA_CCR_EN);
 8000ee8:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <audio_recorder_start+0x288>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <audio_recorder_start+0x288>)
 8000eee:	f023 0301 	bic.w	r3, r3, #1
 8000ef2:	6013      	str	r3, [r2, #0]
        recorderState = RECORDER_STOPPED;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <audio_recorder_start+0x250>)
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	701a      	strb	r2, [r3, #0]
        return false;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e014      	b.n	8000f28 <audio_recorder_start+0x244>
    }
    
    // Marcar que usamos parte del buffer y avanzar al siguiente sector
    halfBufferReady = false; // Ya usamos estos datos
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <audio_recorder_start+0x278>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
    currentSector += 8;      // Avanzar 8 sectores
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <audio_recorder_start+0x264>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	3308      	adds	r3, #8
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <audio_recorder_start+0x264>)
 8000f0c:	6013      	str	r3, [r2, #0]
    sectoresGrabados += 8;   // Incrementar contador - Ya grabamos 8 sectores
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <audio_recorder_start+0x274>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	3308      	adds	r3, #8
 8000f14:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <audio_recorder_start+0x274>)
 8000f16:	6013      	str	r3, [r2, #0]
    
    printf("Grabacion iniciada - Archivo #%d\r\n", currentFileIndex);
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <audio_recorder_start+0x260>)
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4814      	ldr	r0, [pc, #80]	; (8000f74 <audio_recorder_start+0x290>)
 8000f22:	f004 fedf 	bl	8005ce4 <iprintf>
    return true;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20002204 	.word	0x20002204
 8000f38:	08007fb4 	.word	0x08007fb4
 8000f3c:	20002211 	.word	0x20002211
 8000f40:	08007ff0 	.word	0x08007ff0
 8000f44:	20002206 	.word	0x20002206
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	20000204 	.word	0x20000204
 8000f50:	40001000 	.word	0x40001000
 8000f54:	2000220c 	.word	0x2000220c
 8000f58:	20002208 	.word	0x20002208
 8000f5c:	2000220e 	.word	0x2000220e
 8000f60:	2000220f 	.word	0x2000220f
 8000f64:	20002210 	.word	0x20002210
 8000f68:	08008028 	.word	0x08008028
 8000f6c:	40020008 	.word	0x40020008
 8000f70:	08008054 	.word	0x08008054
 8000f74:	08008084 	.word	0x08008084

08000f78 <audio_recorder_stop>:
    }
}

// Modificar la función audio_recorder_stop()

void audio_recorder_stop(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000f7e:	af00      	add	r7, sp, #0
    if (recorderState == RECORDER_RECORDING || recorderState == RECORDER_PAUSED) {
 8000f80:	4b5b      	ldr	r3, [pc, #364]	; (80010f0 <audio_recorder_stop+0x178>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d005      	beq.n	8000f96 <audio_recorder_stop+0x1e>
 8000f8a:	4b59      	ldr	r3, [pc, #356]	; (80010f0 <audio_recorder_stop+0x178>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	f040 80a7 	bne.w	80010e4 <audio_recorder_stop+0x16c>
        // Detener el timer y el DMA
        TIM6->CR1 &= ~(TIM_CR1_CEN);
 8000f96:	4b57      	ldr	r3, [pc, #348]	; (80010f4 <audio_recorder_stop+0x17c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a56      	ldr	r2, [pc, #344]	; (80010f4 <audio_recorder_stop+0x17c>)
 8000f9c:	f023 0301 	bic.w	r3, r3, #1
 8000fa0:	6013      	str	r3, [r2, #0]
        DMA1_Channel1->CCR &= ~(DMA_CCR_EN);
 8000fa2:	4b55      	ldr	r3, [pc, #340]	; (80010f8 <audio_recorder_stop+0x180>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a54      	ldr	r2, [pc, #336]	; (80010f8 <audio_recorder_stop+0x180>)
 8000fa8:	f023 0301 	bic.w	r3, r3, #1
 8000fac:	6013      	str	r3, [r2, #0]
        
        // Leer sector base
        uint8_t buffer[512];
        DRESULT read_result = SD_disk_read(0, buffer, 0, 1);
 8000fae:	4639      	mov	r1, r7
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f000 fc51 	bl	800185c <SD_disk_read>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
        if (read_result == RES_OK) {
 8000fc0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d168      	bne.n	800109a <audio_recorder_stop+0x122>
            // Si completamos un archivo (casi completo también cuenta)
            if (sectoresGrabados >= 45000) {
 8000fc8:	4b4c      	ldr	r3, [pc, #304]	; (80010fc <audio_recorder_stop+0x184>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d957      	bls.n	8001084 <audio_recorder_stop+0x10c>
                // Incrementar el contador de archivos escritos
                currentFileIndex++;
 8000fd4:	4b4a      	ldr	r3, [pc, #296]	; (8001100 <audio_recorder_stop+0x188>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4b48      	ldr	r3, [pc, #288]	; (8001100 <audio_recorder_stop+0x188>)
 8000fe0:	801a      	strh	r2, [r3, #0]

                // Actualizar en el sector base
                buffer[3] = currentFileIndex & 0xFF;
 8000fe2:	4b47      	ldr	r3, [pc, #284]	; (8001100 <audio_recorder_stop+0x188>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fee:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000ff2:	70da      	strb	r2, [r3, #3]
                buffer[4] = (currentFileIndex >> 8) & 0xFF;
 8000ff4:	4b42      	ldr	r3, [pc, #264]	; (8001100 <audio_recorder_stop+0x188>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	0a1b      	lsrs	r3, r3, #8
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001004:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001008:	711a      	strb	r2, [r3, #4]

                // Calcular sector del próximo archivo
                uint32_t sector_counter = 1 + (currentFileIndex * 22500);
 800100a:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <audio_recorder_stop+0x188>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	b29b      	uxth	r3, r3
 8001010:	461a      	mov	r2, r3
 8001012:	f245 73e4 	movw	r3, #22500	; 0x57e4
 8001016:	fb02 f303 	mul.w	r3, r2, r3
 800101a:	3301      	adds	r3, #1
 800101c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
                buffer[8] = sector_counter & 0xFF;
 8001020:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001024:	b2da      	uxtb	r2, r3
 8001026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800102a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800102e:	721a      	strb	r2, [r3, #8]
                buffer[9] = (sector_counter >> 8) & 0xFF;
 8001030:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	b2da      	uxtb	r2, r3
 8001038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800103c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001040:	725a      	strb	r2, [r3, #9]
                buffer[10] = (sector_counter >> 16) & 0xFF;
 8001042:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001046:	0c1b      	lsrs	r3, r3, #16
 8001048:	b2da      	uxtb	r2, r3
 800104a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800104e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001052:	729a      	strb	r2, [r3, #10]
                buffer[11] = (sector_counter >> 24) & 0xFF;
 8001054:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001058:	0e1b      	lsrs	r3, r3, #24
 800105a:	b2da      	uxtb	r2, r3
 800105c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001060:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001064:	72da      	strb	r2, [r3, #11]

                // Verificar si hay espacio para el próximo archivo usando el valor global
                if (sector_counter + 45000 > total_sd_sectors) {
 8001066:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800106a:	f503 432f 	add.w	r3, r3, #44800	; 0xaf00
 800106e:	33c8      	adds	r3, #200	; 0xc8
 8001070:	4a24      	ldr	r2, [pc, #144]	; (8001104 <audio_recorder_stop+0x18c>)
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	4293      	cmp	r3, r2
 8001076:	d905      	bls.n	8001084 <audio_recorder_stop+0x10c>
                    printf("¡ADVERTENCIA! Memoria SD llena. No se pueden grabar mas archivos.\r\n");
 8001078:	4823      	ldr	r0, [pc, #140]	; (8001108 <audio_recorder_stop+0x190>)
 800107a:	f004 feb9 	bl	8005df0 <puts>
                    memoriaLlena = true;
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <audio_recorder_stop+0x194>)
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
                }
            }
            
            // Escribir sector actualizado
            SD_disk_write(0, buffer, 0, 1);
 8001084:	4639      	mov	r1, r7
 8001086:	2301      	movs	r3, #1
 8001088:	2200      	movs	r2, #0
 800108a:	2000      	movs	r0, #0
 800108c:	f000 fc56 	bl	800193c <SD_disk_write>
            SD_disk_ioctl(0, CTRL_SYNC, 0); // Asegurar que se escribió físicamente
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	2000      	movs	r0, #0
 8001096:	f000 fcdf 	bl	8001a58 <SD_disk_ioctl>
        }
        
        printf("Grabacion detenida - Sectores grabados: %lu\r\n", sectoresGrabados);
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <audio_recorder_stop+0x184>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4619      	mov	r1, r3
 80010a0:	481b      	ldr	r0, [pc, #108]	; (8001110 <audio_recorder_stop+0x198>)
 80010a2:	f004 fe1f 	bl	8005ce4 <iprintf>

        // IMPORTANTE: Resetear contadores y flags para el próximo archivo
        sectoresGrabados = 0;
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <audio_recorder_stop+0x184>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
        stopRequested = false;
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <audio_recorder_stop+0x19c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]



        // Y solo después intentamos iniciar una nueva grabación si corresponde
        if (!memoriaLlena && currentFileIndex > 0) {
 80010b2:	4b16      	ldr	r3, [pc, #88]	; (800110c <audio_recorder_stop+0x194>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f083 0301 	eor.w	r3, r3, #1
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00d      	beq.n	80010de <audio_recorder_stop+0x166>
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <audio_recorder_stop+0x188>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d008      	beq.n	80010de <audio_recorder_stop+0x166>
            printf("Iniciando siguiente grabación automáticamente...\r\n");
 80010cc:	4812      	ldr	r0, [pc, #72]	; (8001118 <audio_recorder_stop+0x1a0>)
 80010ce:	f004 fe8f 	bl	8005df0 <puts>
            // Primero cambiamos el estado a STOPPED
            recorderState = RECORDER_STOPPED;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <audio_recorder_stop+0x178>)
 80010d4:	2203      	movs	r2, #3
 80010d6:	701a      	strb	r2, [r3, #0]
            audio_recorder_start(); // Comenzar siguiente grabación
 80010d8:	f7ff fe04 	bl	8000ce4 <audio_recorder_start>
        } else {
            recorderState = RECORDER_STOPPED;
        }
    }
}
 80010dc:	e002      	b.n	80010e4 <audio_recorder_stop+0x16c>
            recorderState = RECORDER_STOPPED;
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <audio_recorder_stop+0x178>)
 80010e0:	2203      	movs	r2, #3
 80010e2:	701a      	strb	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20002204 	.word	0x20002204
 80010f4:	40001000 	.word	0x40001000
 80010f8:	40020008 	.word	0x40020008
 80010fc:	20002208 	.word	0x20002208
 8001100:	20002206 	.word	0x20002206
 8001104:	20002220 	.word	0x20002220
 8001108:	08007f50 	.word	0x08007f50
 800110c:	20002211 	.word	0x20002211
 8001110:	080080d4 	.word	0x080080d4
 8001114:	20002210 	.word	0x20002210
 8001118:	08008104 	.word	0x08008104

0800111c <audio_recorder_process>:

// Proceso principal (debe llamarse en el loop principal)
void audio_recorder_process(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
    // Verificar si hay datos listos para procesar
    if (recorderState == RECORDER_RECORDING) {
 8001122:	4b3c      	ldr	r3, [pc, #240]	; (8001214 <audio_recorder_process+0xf8>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b01      	cmp	r3, #1
 800112a:	d16e      	bne.n	800120a <audio_recorder_process+0xee>
        // Procesar la primera mitad del buffer si está lista
        if (halfBufferReady) {
 800112c:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <audio_recorder_process+0xfc>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d02e      	beq.n	8001194 <audio_recorder_process+0x78>
            // Escribir 8 sectores en una sola operación (4096 bytes)
            uint8_t* writeBuffer = (uint8_t*)&audioBuffer[0];
 8001136:	4b39      	ldr	r3, [pc, #228]	; (800121c <audio_recorder_process+0x100>)
 8001138:	60fb      	str	r3, [r7, #12]
            DRESULT write_result = SD_disk_write(0, writeBuffer, currentSector, 8);
 800113a:	4b39      	ldr	r3, [pc, #228]	; (8001220 <audio_recorder_process+0x104>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	2308      	movs	r3, #8
 8001140:	68f9      	ldr	r1, [r7, #12]
 8001142:	2000      	movs	r0, #0
 8001144:	f000 fbfa 	bl	800193c <SD_disk_write>
 8001148:	4603      	mov	r3, r0
 800114a:	72fb      	strb	r3, [r7, #11]
            
            if (write_result == RES_OK) {
 800114c:	7afb      	ldrb	r3, [r7, #11]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d116      	bne.n	8001180 <audio_recorder_process+0x64>
                currentSector += 8;         // Avanzar 8 sectores
 8001152:	4b33      	ldr	r3, [pc, #204]	; (8001220 <audio_recorder_process+0x104>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	3308      	adds	r3, #8
 8001158:	4a31      	ldr	r2, [pc, #196]	; (8001220 <audio_recorder_process+0x104>)
 800115a:	6013      	str	r3, [r2, #0]
                sectoresGrabados += 8;      // Incrementar contador total
 800115c:	4b31      	ldr	r3, [pc, #196]	; (8001224 <audio_recorder_process+0x108>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3308      	adds	r3, #8
 8001162:	4a30      	ldr	r2, [pc, #192]	; (8001224 <audio_recorder_process+0x108>)
 8001164:	6013      	str	r3, [r2, #0]
                halfBufferReady = false;
 8001166:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <audio_recorder_process+0xfc>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
                
                // Si alcanzamos el límite de sectores para un archivo
                if (sectoresGrabados >= 45000) {
 800116c:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <audio_recorder_process+0x108>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001174:	4293      	cmp	r3, r2
 8001176:	d90d      	bls.n	8001194 <audio_recorder_process+0x78>
                    stopRequested = true;
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <audio_recorder_process+0x10c>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e009      	b.n	8001194 <audio_recorder_process+0x78>
                }
            } else {
                printf("Error al escribir datos (half): %d\r\n", write_result);
 8001180:	7afb      	ldrb	r3, [r7, #11]
 8001182:	4619      	mov	r1, r3
 8001184:	4829      	ldr	r0, [pc, #164]	; (800122c <audio_recorder_process+0x110>)
 8001186:	f004 fdad 	bl	8005ce4 <iprintf>
                halfBuffersLost++;
 800118a:	4b29      	ldr	r3, [pc, #164]	; (8001230 <audio_recorder_process+0x114>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	4a27      	ldr	r2, [pc, #156]	; (8001230 <audio_recorder_process+0x114>)
 8001192:	6013      	str	r3, [r2, #0]
            }
        }
        
        // Procesar la segunda mitad del buffer si está lista
        if (fullBufferReady) {
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <audio_recorder_process+0x118>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d02e      	beq.n	80011fc <audio_recorder_process+0xe0>
            // Escribir 8 sectores en una sola operación (4096 bytes)
            // El offset es 1024 valores de 16 bits (2048 bytes) después del primer bloque de 8 sectores
            uint8_t* writeBuffer = (uint8_t*)&audioBuffer[2048];
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <audio_recorder_process+0x11c>)
 80011a0:	607b      	str	r3, [r7, #4]
            DRESULT write_result = SD_disk_write(0, writeBuffer, currentSector, 8);
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <audio_recorder_process+0x104>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	2308      	movs	r3, #8
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	2000      	movs	r0, #0
 80011ac:	f000 fbc6 	bl	800193c <SD_disk_write>
 80011b0:	4603      	mov	r3, r0
 80011b2:	70fb      	strb	r3, [r7, #3]
            
            if (write_result == RES_OK) {
 80011b4:	78fb      	ldrb	r3, [r7, #3]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d116      	bne.n	80011e8 <audio_recorder_process+0xcc>
                currentSector += 8;
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <audio_recorder_process+0x104>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3308      	adds	r3, #8
 80011c0:	4a17      	ldr	r2, [pc, #92]	; (8001220 <audio_recorder_process+0x104>)
 80011c2:	6013      	str	r3, [r2, #0]
                sectoresGrabados += 8;
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <audio_recorder_process+0x108>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3308      	adds	r3, #8
 80011ca:	4a16      	ldr	r2, [pc, #88]	; (8001224 <audio_recorder_process+0x108>)
 80011cc:	6013      	str	r3, [r2, #0]
                fullBufferReady = false;
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <audio_recorder_process+0x118>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
                
                if (sectoresGrabados >= 45000) {
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <audio_recorder_process+0x108>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80011dc:	4293      	cmp	r3, r2
 80011de:	d90d      	bls.n	80011fc <audio_recorder_process+0xe0>
                    stopRequested = true;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <audio_recorder_process+0x10c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
 80011e6:	e009      	b.n	80011fc <audio_recorder_process+0xe0>
                }
            } else {
                printf("Error al escribir datos (full): %d\r\n", write_result);
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	4619      	mov	r1, r3
 80011ec:	4813      	ldr	r0, [pc, #76]	; (800123c <audio_recorder_process+0x120>)
 80011ee:	f004 fd79 	bl	8005ce4 <iprintf>
                fullBuffersLost++;
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <audio_recorder_process+0x124>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	4a11      	ldr	r2, [pc, #68]	; (8001240 <audio_recorder_process+0x124>)
 80011fa:	6013      	str	r3, [r2, #0]
            }
        }
        
        // Verificación para detener grabación
        if (stopRequested) {
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <audio_recorder_process+0x10c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <audio_recorder_process+0xee>
            audio_recorder_stop();
 8001206:	f7ff feb7 	bl	8000f78 <audio_recorder_stop>
        }
    }
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20002204 	.word	0x20002204
 8001218:	2000220e 	.word	0x2000220e
 800121c:	20000204 	.word	0x20000204
 8001220:	20000000 	.word	0x20000000
 8001224:	20002208 	.word	0x20002208
 8001228:	20002210 	.word	0x20002210
 800122c:	08008138 	.word	0x08008138
 8001230:	20002214 	.word	0x20002214
 8001234:	2000220f 	.word	0x2000220f
 8001238:	20001204 	.word	0x20001204
 800123c:	08008160 	.word	0x08008160
 8001240:	20002218 	.word	0x20002218

08001244 <audio_recorder_get_state>:

// Devuelve el estado actual del grabador
RecorderState audio_recorder_get_state(void) {
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
    return recorderState;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <audio_recorder_get_state+0x14>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2db      	uxtb	r3, r3
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	20002204 	.word	0x20002204

0800125c <DMA1_Channel1_IRQHandler>:
}

/**
 * @Brief DMA1 Channel 1 Interrupt Handler
 */
void DMA1_Channel1_IRQHandler(void) {
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
    // Half Transfer Complete
    if (DMA1->ISR & DMA_ISR_HTIF1) {
 8001260:	4b29      	ldr	r3, [pc, #164]	; (8001308 <DMA1_Channel1_IRQHandler+0xac>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	d020      	beq.n	80012ae <DMA1_Channel1_IRQHandler+0x52>
        // Limpiar flag
        DMA1->IFCR |= DMA_IFCR_CHTIF1;
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <DMA1_Channel1_IRQHandler+0xac>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	4a25      	ldr	r2, [pc, #148]	; (8001308 <DMA1_Channel1_IRQHandler+0xac>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	6053      	str	r3, [r2, #4]

        // Si estamos grabando y no hay una transferencia previa pendiente
        if (recorderState == RECORDER_RECORDING && !halfBufferReady) {
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <DMA1_Channel1_IRQHandler+0xb0>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d10b      	bne.n	800129a <DMA1_Channel1_IRQHandler+0x3e>
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <DMA1_Channel1_IRQHandler+0xb4>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <DMA1_Channel1_IRQHandler+0x3e>
            halfBufferReady = true;
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <DMA1_Channel1_IRQHandler+0xb4>)
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
 8001298:	e009      	b.n	80012ae <DMA1_Channel1_IRQHandler+0x52>
        } else {
            // Si hay un buffer pendiente, registrar pérdida de datos
            if (halfBufferReady) {
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <DMA1_Channel1_IRQHandler+0xb4>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d004      	beq.n	80012ae <DMA1_Channel1_IRQHandler+0x52>
                // Incrementar contador de buffers perdidos (variable global)
                halfBuffersLost++;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <DMA1_Channel1_IRQHandler+0xb8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	4a1a      	ldr	r2, [pc, #104]	; (8001314 <DMA1_Channel1_IRQHandler+0xb8>)
 80012ac:	6013      	str	r3, [r2, #0]
            }
        }
    }

    // Transfer Complete
    if (DMA1->ISR & DMA_ISR_TCIF1) {
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <DMA1_Channel1_IRQHandler+0xac>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d020      	beq.n	80012fc <DMA1_Channel1_IRQHandler+0xa0>
        // Limpiar flag
        DMA1->IFCR |= DMA_IFCR_CTCIF1;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <DMA1_Channel1_IRQHandler+0xac>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <DMA1_Channel1_IRQHandler+0xac>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6053      	str	r3, [r2, #4]

        // Si estamos grabando y no hay una transferencia previa pendiente
        if (recorderState == RECORDER_RECORDING && !fullBufferReady) {
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <DMA1_Channel1_IRQHandler+0xb0>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d10b      	bne.n	80012e8 <DMA1_Channel1_IRQHandler+0x8c>
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <DMA1_Channel1_IRQHandler+0xbc>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f083 0301 	eor.w	r3, r3, #1
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <DMA1_Channel1_IRQHandler+0x8c>
            fullBufferReady = true;
 80012e0:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <DMA1_Channel1_IRQHandler+0xbc>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
 80012e6:	e009      	b.n	80012fc <DMA1_Channel1_IRQHandler+0xa0>
        } else {
            // Si hay un buffer pendiente, registrar pérdida de datos
            if (fullBufferReady) {
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <DMA1_Channel1_IRQHandler+0xbc>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d004      	beq.n	80012fc <DMA1_Channel1_IRQHandler+0xa0>
                fullBuffersLost++;
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <DMA1_Channel1_IRQHandler+0xc0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3301      	adds	r3, #1
 80012f8:	4a08      	ldr	r2, [pc, #32]	; (800131c <DMA1_Channel1_IRQHandler+0xc0>)
 80012fa:	6013      	str	r3, [r2, #0]
            }
        }
    }

    // Limpiar flag de interrupción pendiente global
    NVIC_ClearPendingIRQ(DMA1_Channel1_IRQn);
 80012fc:	200b      	movs	r0, #11
 80012fe:	f7ff fc53 	bl	8000ba8 <__NVIC_ClearPendingIRQ>
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40020000 	.word	0x40020000
 800130c:	20002204 	.word	0x20002204
 8001310:	2000220e 	.word	0x2000220e
 8001314:	20002214 	.word	0x20002214
 8001318:	2000220f 	.word	0x2000220f
 800131c:	20002218 	.word	0x20002218

08001320 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	spi_cs_sd_write(false);
 8001324:	2000      	movs	r0, #0
 8001326:	f003 fe77 	bl	8005018 <spi_cs_sd_write>
	HAL_Delay(1);
 800132a:	2001      	movs	r0, #1
 800132c:	f001 fa62 	bl	80027f4 <HAL_Delay>
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}

08001334 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	spi_cs_sd_write(true);
 8001338:	2001      	movs	r0, #1
 800133a:	f003 fe6d 	bl	8005018 <spi_cs_sd_write>
	HAL_Delay(1);
 800133e:	2001      	movs	r0, #1
 8001340:	f001 fa58 	bl	80027f4 <HAL_Delay>
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001352:	bf00      	nop
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <SPI_TxByte+0x30>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b02      	cmp	r3, #2
 8001360:	d1f8      	bne.n	8001354 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001362:	1df9      	adds	r1, r7, #7
 8001364:	2364      	movs	r3, #100	; 0x64
 8001366:	2201      	movs	r2, #1
 8001368:	4803      	ldr	r0, [pc, #12]	; (8001378 <SPI_TxByte+0x30>)
 800136a:	f002 fcfa 	bl	8003d62 <HAL_SPI_Transmit>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20002288 	.word	0x20002288

0800137c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001388:	bf00      	nop
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <SPI_TxBuffer+0x30>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b02      	cmp	r3, #2
 8001396:	d1f8      	bne.n	800138a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001398:	887a      	ldrh	r2, [r7, #2]
 800139a:	2364      	movs	r3, #100	; 0x64
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4803      	ldr	r0, [pc, #12]	; (80013ac <SPI_TxBuffer+0x30>)
 80013a0:	f002 fcdf 	bl	8003d62 <HAL_SPI_Transmit>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20002288 	.word	0x20002288

080013b0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80013b6:	23ff      	movs	r3, #255	; 0xff
 80013b8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80013ba:	bf00      	nop
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <SPI_RxByte+0x34>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d1f8      	bne.n	80013bc <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80013ca:	1dba      	adds	r2, r7, #6
 80013cc:	1df9      	adds	r1, r7, #7
 80013ce:	2364      	movs	r3, #100	; 0x64
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	4803      	ldr	r0, [pc, #12]	; (80013e4 <SPI_RxByte+0x34>)
 80013d6:	f002 fe39 	bl	800404c <HAL_SPI_TransmitReceive>

	return data;
 80013da:	79bb      	ldrb	r3, [r7, #6]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20002288 	.word	0x20002288

080013e8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80013f0:	f7ff ffde 	bl	80013b0 <SPI_RxByte>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	701a      	strb	r2, [r3, #0]
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <SD_ReadyWait+0x30>)
 800140c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001410:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001412:	f7ff ffcd 	bl	80013b0 <SPI_RxByte>
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2bff      	cmp	r3, #255	; 0xff
 800141e:	d004      	beq.n	800142a <SD_ReadyWait+0x26>
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SD_ReadyWait+0x30>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f3      	bne.n	8001412 <SD_ReadyWait+0xe>

	return res;
 800142a:	79fb      	ldrb	r3, [r7, #7]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20002228 	.word	0x20002228

08001438 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800143e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001442:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001444:	f7ff ff76 	bl	8001334 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	e005      	b.n	800145a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800144e:	20ff      	movs	r0, #255	; 0xff
 8001450:	f7ff ff7a 	bl	8001348 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	3301      	adds	r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b09      	cmp	r3, #9
 800145e:	ddf6      	ble.n	800144e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001460:	f7ff ff5e 	bl	8001320 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001464:	2340      	movs	r3, #64	; 0x40
 8001466:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001478:	2395      	movs	r3, #149	; 0x95
 800147a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800147c:	463b      	mov	r3, r7
 800147e:	2106      	movs	r1, #6
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff7b 	bl	800137c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001486:	e002      	b.n	800148e <SD_PowerOn+0x56>
	{
		cnt--;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3b01      	subs	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800148e:	f7ff ff8f 	bl	80013b0 <SPI_RxByte>
 8001492:	4603      	mov	r3, r0
 8001494:	2b01      	cmp	r3, #1
 8001496:	d002      	beq.n	800149e <SD_PowerOn+0x66>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f4      	bne.n	8001488 <SD_PowerOn+0x50>
	}

	DESELECT();
 800149e:	f7ff ff49 	bl	8001334 <DESELECT>
	SPI_TxByte(0XFF);
 80014a2:	20ff      	movs	r0, #255	; 0xff
 80014a4:	f7ff ff50 	bl	8001348 <SPI_TxByte>

	PowerFlag = 1;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <SD_PowerOn+0x80>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000221d 	.word	0x2000221d

080014bc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <SD_PowerOff+0x14>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	2000221d 	.word	0x2000221d

080014d4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
	return PowerFlag;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <SD_CheckPower+0x14>)
 80014da:	781b      	ldrb	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	2000221d 	.word	0x2000221d

080014ec <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(uint8_t *buff, UINT len)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <SD_RxDataBlock+0x5c>)
 80014fa:	22c8      	movs	r2, #200	; 0xc8
 80014fc:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80014fe:	f7ff ff57 	bl	80013b0 <SPI_RxByte>
 8001502:	4603      	mov	r3, r0
 8001504:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	2bff      	cmp	r3, #255	; 0xff
 800150a:	d104      	bne.n	8001516 <SD_RxDataBlock+0x2a>
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <SD_RxDataBlock+0x5c>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f3      	bne.n	80014fe <SD_RxDataBlock+0x12>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	2bfe      	cmp	r3, #254	; 0xfe
 800151a:	d001      	beq.n	8001520 <SD_RxDataBlock+0x34>
 800151c:	2300      	movs	r3, #0
 800151e:	e00f      	b.n	8001540 <SD_RxDataBlock+0x54>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff5e 	bl	80013e8 <SPI_RxBytePtr>
	} while(len--);
 800152c:	887b      	ldrh	r3, [r7, #2]
 800152e:	1e5a      	subs	r2, r3, #1
 8001530:	807a      	strh	r2, [r7, #2]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f4      	bne.n	8001520 <SD_RxDataBlock+0x34>

	/* discard CRC */
	SPI_RxByte();
 8001536:	f7ff ff3b 	bl	80013b0 <SPI_RxByte>
	SPI_RxByte();
 800153a:	f7ff ff39 	bl	80013b0 <SPI_RxByte>

	return TRUE;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20002226 	.word	0x20002226

0800154c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, uint8_t token)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800155c:	f7ff ff52 	bl	8001404 <SD_ReadyWait>
 8001560:	4603      	mov	r3, r0
 8001562:	2bff      	cmp	r3, #255	; 0xff
 8001564:	d001      	beq.n	800156a <SD_TxDataBlock+0x1e>
 8001566:	2300      	movs	r3, #0
 8001568:	e02f      	b.n	80015ca <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff feeb 	bl	8001348 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	2bfd      	cmp	r3, #253	; 0xfd
 8001576:	d020      	beq.n	80015ba <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fefd 	bl	800137c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001582:	f7ff ff15 	bl	80013b0 <SPI_RxByte>
		SPI_RxByte();
 8001586:	f7ff ff13 	bl	80013b0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800158a:	e00b      	b.n	80015a4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800158c:	f7ff ff10 	bl	80013b0 <SPI_RxByte>
 8001590:	4603      	mov	r3, r0
 8001592:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	2b05      	cmp	r3, #5
 800159c:	d006      	beq.n	80015ac <SD_TxDataBlock+0x60>
			i++;
 800159e:	7bbb      	ldrb	r3, [r7, #14]
 80015a0:	3301      	adds	r3, #1
 80015a2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	2b40      	cmp	r3, #64	; 0x40
 80015a8:	d9f0      	bls.n	800158c <SD_TxDataBlock+0x40>
 80015aa:	e000      	b.n	80015ae <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80015ac:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80015ae:	bf00      	nop
 80015b0:	f7ff fefe 	bl	80013b0 <SPI_RxByte>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0fa      	beq.n	80015b0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	f003 031f 	and.w	r3, r3, #31
 80015c0:	2b05      	cmp	r3, #5
 80015c2:	d101      	bne.n	80015c8 <SD_TxDataBlock+0x7c>
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <SD_TxDataBlock+0x7e>

	return FALSE;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static uint8_t SD_SendCmd(uint8_t cmd, uint32_t arg)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b084      	sub	sp, #16
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	6039      	str	r1, [r7, #0]
 80015dc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80015de:	f7ff ff11 	bl	8001404 <SD_ReadyWait>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2bff      	cmp	r3, #255	; 0xff
 80015e6:	d001      	beq.n	80015ec <SD_SendCmd+0x1a>
 80015e8:	23ff      	movs	r3, #255	; 0xff
 80015ea:	e042      	b.n	8001672 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff feaa 	bl	8001348 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	0e1b      	lsrs	r3, r3, #24
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fea4 	bl	8001348 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	0c1b      	lsrs	r3, r3, #16
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fe9e 	bl	8001348 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	0a1b      	lsrs	r3, r3, #8
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fe98 	bl	8001348 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fe93 	bl	8001348 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	2b40      	cmp	r3, #64	; 0x40
 8001626:	d102      	bne.n	800162e <SD_SendCmd+0x5c>
 8001628:	2395      	movs	r3, #149	; 0x95
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	e007      	b.n	800163e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	2b48      	cmp	r3, #72	; 0x48
 8001632:	d102      	bne.n	800163a <SD_SendCmd+0x68>
 8001634:	2387      	movs	r3, #135	; 0x87
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	e001      	b.n	800163e <SD_SendCmd+0x6c>
	else crc = 1;
 800163a:	2301      	movs	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe81 	bl	8001348 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	2b4c      	cmp	r3, #76	; 0x4c
 800164a:	d101      	bne.n	8001650 <SD_SendCmd+0x7e>
 800164c:	f7ff feb0 	bl	80013b0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001650:	230a      	movs	r3, #10
 8001652:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001654:	f7ff feac 	bl	80013b0 <SPI_RxByte>
 8001658:	4603      	mov	r3, r0
 800165a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800165c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001660:	2b00      	cmp	r3, #0
 8001662:	da05      	bge.n	8001670 <SD_SendCmd+0x9e>
 8001664:	7bbb      	ldrb	r3, [r7, #14]
 8001666:	3b01      	subs	r3, #1
 8001668:	73bb      	strb	r3, [r7, #14]
 800166a:	7bbb      	ldrb	r3, [r7, #14]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f1      	bne.n	8001654 <SD_SendCmd+0x82>

	return res;
 8001670:	7b7b      	ldrb	r3, [r7, #13]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
bool SD_disk_initialize(uint8_t drv)
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <SD_disk_initialize+0x14>
 800168c:	2301      	movs	r3, #1
 800168e:	e0da      	b.n	8001846 <SD_disk_initialize+0x1ca>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001690:	4b6f      	ldr	r3, [pc, #444]	; (8001850 <SD_disk_initialize+0x1d4>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <SD_disk_initialize+0x2a>
 800169e:	4b6c      	ldr	r3, [pc, #432]	; (8001850 <SD_disk_initialize+0x1d4>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	e0cf      	b.n	8001846 <SD_disk_initialize+0x1ca>

	/* power on */
	SD_PowerOn();
 80016a6:	f7ff fec7 	bl	8001438 <SD_PowerOn>

	/* slave select */
	SELECT();
 80016aa:	f7ff fe39 	bl	8001320 <SELECT>

	/* check disk type */
	type = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80016b2:	2100      	movs	r1, #0
 80016b4:	2040      	movs	r0, #64	; 0x40
 80016b6:	f7ff ff8c 	bl	80015d2 <SD_SendCmd>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b01      	cmp	r3, #1
 80016be:	f040 80a6 	bne.w	800180e <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80016c2:	4b64      	ldr	r3, [pc, #400]	; (8001854 <SD_disk_initialize+0x1d8>)
 80016c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016c8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80016ca:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80016ce:	2048      	movs	r0, #72	; 0x48
 80016d0:	f7ff ff7f 	bl	80015d2 <SD_SendCmd>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d158      	bne.n	800178c <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]
 80016de:	e00c      	b.n	80016fa <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80016e0:	7bfc      	ldrb	r4, [r7, #15]
 80016e2:	f7ff fe65 	bl	80013b0 <SPI_RxByte>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	f104 0310 	add.w	r3, r4, #16
 80016ee:	443b      	add	r3, r7
 80016f0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	3301      	adds	r3, #1
 80016f8:	73fb      	strb	r3, [r7, #15]
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d9ef      	bls.n	80016e0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001700:	7abb      	ldrb	r3, [r7, #10]
 8001702:	2b01      	cmp	r3, #1
 8001704:	f040 8083 	bne.w	800180e <SD_disk_initialize+0x192>
 8001708:	7afb      	ldrb	r3, [r7, #11]
 800170a:	2baa      	cmp	r3, #170	; 0xaa
 800170c:	d17f      	bne.n	800180e <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800170e:	2100      	movs	r1, #0
 8001710:	2077      	movs	r0, #119	; 0x77
 8001712:	f7ff ff5e 	bl	80015d2 <SD_SendCmd>
 8001716:	4603      	mov	r3, r0
 8001718:	2b01      	cmp	r3, #1
 800171a:	d807      	bhi.n	800172c <SD_disk_initialize+0xb0>
 800171c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001720:	2069      	movs	r0, #105	; 0x69
 8001722:	f7ff ff56 	bl	80015d2 <SD_SendCmd>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <SD_disk_initialize+0xbc>
				} while (Timer1);
 800172c:	4b49      	ldr	r3, [pc, #292]	; (8001854 <SD_disk_initialize+0x1d8>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	b29b      	uxth	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1eb      	bne.n	800170e <SD_disk_initialize+0x92>
 8001736:	e000      	b.n	800173a <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001738:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800173a:	4b46      	ldr	r3, [pc, #280]	; (8001854 <SD_disk_initialize+0x1d8>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	b29b      	uxth	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d064      	beq.n	800180e <SD_disk_initialize+0x192>
 8001744:	2100      	movs	r1, #0
 8001746:	207a      	movs	r0, #122	; 0x7a
 8001748:	f7ff ff43 	bl	80015d2 <SD_SendCmd>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d15d      	bne.n	800180e <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]
 8001756:	e00c      	b.n	8001772 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001758:	7bfc      	ldrb	r4, [r7, #15]
 800175a:	f7ff fe29 	bl	80013b0 <SPI_RxByte>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	f104 0310 	add.w	r3, r4, #16
 8001766:	443b      	add	r3, r7
 8001768:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	3301      	adds	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d9ef      	bls.n	8001758 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001778:	7a3b      	ldrb	r3, [r7, #8]
 800177a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SD_disk_initialize+0x10a>
 8001782:	230c      	movs	r3, #12
 8001784:	e000      	b.n	8001788 <SD_disk_initialize+0x10c>
 8001786:	2304      	movs	r3, #4
 8001788:	73bb      	strb	r3, [r7, #14]
 800178a:	e040      	b.n	800180e <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800178c:	2100      	movs	r1, #0
 800178e:	2077      	movs	r0, #119	; 0x77
 8001790:	f7ff ff1f 	bl	80015d2 <SD_SendCmd>
 8001794:	4603      	mov	r3, r0
 8001796:	2b01      	cmp	r3, #1
 8001798:	d808      	bhi.n	80017ac <SD_disk_initialize+0x130>
 800179a:	2100      	movs	r1, #0
 800179c:	2069      	movs	r0, #105	; 0x69
 800179e:	f7ff ff18 	bl	80015d2 <SD_SendCmd>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d801      	bhi.n	80017ac <SD_disk_initialize+0x130>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e000      	b.n	80017ae <SD_disk_initialize+0x132>
 80017ac:	2301      	movs	r3, #1
 80017ae:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80017b0:	7bbb      	ldrb	r3, [r7, #14]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d10e      	bne.n	80017d4 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80017b6:	2100      	movs	r1, #0
 80017b8:	2077      	movs	r0, #119	; 0x77
 80017ba:	f7ff ff0a 	bl	80015d2 <SD_SendCmd>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d80e      	bhi.n	80017e2 <SD_disk_initialize+0x166>
 80017c4:	2100      	movs	r1, #0
 80017c6:	2069      	movs	r0, #105	; 0x69
 80017c8:	f7ff ff03 	bl	80015d2 <SD_SendCmd>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d107      	bne.n	80017e2 <SD_disk_initialize+0x166>
 80017d2:	e00d      	b.n	80017f0 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80017d4:	2100      	movs	r1, #0
 80017d6:	2041      	movs	r0, #65	; 0x41
 80017d8:	f7ff fefb 	bl	80015d2 <SD_SendCmd>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <SD_disk_initialize+0x1d8>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1e1      	bne.n	80017b0 <SD_disk_initialize+0x134>
 80017ec:	e000      	b.n	80017f0 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80017ee:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80017f0:	4b18      	ldr	r3, [pc, #96]	; (8001854 <SD_disk_initialize+0x1d8>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d007      	beq.n	800180a <SD_disk_initialize+0x18e>
 80017fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017fe:	2050      	movs	r0, #80	; 0x50
 8001800:	f7ff fee7 	bl	80015d2 <SD_SendCmd>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SD_disk_initialize+0x192>
 800180a:	2300      	movs	r3, #0
 800180c:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800180e:	4a12      	ldr	r2, [pc, #72]	; (8001858 <SD_disk_initialize+0x1dc>)
 8001810:	7bbb      	ldrb	r3, [r7, #14]
 8001812:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001814:	f7ff fd8e 	bl	8001334 <DESELECT>
	SPI_RxByte();
 8001818:	f7ff fdca 	bl	80013b0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800181c:	7bbb      	ldrb	r3, [r7, #14]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00c      	beq.n	800183c <SD_disk_initialize+0x1c0>
	{
		Stat &= ~STA_NOINIT;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <SD_disk_initialize+0x1d4>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf14      	ite	ne
 8001830:	2301      	movne	r3, #1
 8001832:	2300      	moveq	r3, #0
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <SD_disk_initialize+0x1d4>)
 8001838:	701a      	strb	r2, [r3, #0]
 800183a:	e001      	b.n	8001840 <SD_disk_initialize+0x1c4>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800183c:	f7ff fe3e 	bl	80014bc <SD_PowerOff>
	}

	return Stat;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <SD_disk_initialize+0x1d4>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b2db      	uxtb	r3, r3
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bd90      	pop	{r4, r7, pc}
 800184e:	bf00      	nop
 8001850:	20000004 	.word	0x20000004
 8001854:	20002226 	.word	0x20002226
 8001858:	2000221c 	.word	0x2000221c

0800185c <SD_disk_read>:
	return Stat;
}

/* read sector */
DRESULT SD_disk_read(uint8_t pdrv, uint8_t* buff, uint32_t sector, uint16_t count)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	461a      	mov	r2, r3
 8001868:	4603      	mov	r3, r0
 800186a:	73fb      	strb	r3, [r7, #15]
 800186c:	4613      	mov	r3, r2
 800186e:	81bb      	strh	r3, [r7, #12]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <SD_disk_read+0x20>
 8001876:	89bb      	ldrh	r3, [r7, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <SD_disk_read+0x24>
 800187c:	2304      	movs	r3, #4
 800187e:	e054      	b.n	800192a <SD_disk_read+0xce>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001880:	4b2c      	ldr	r3, [pc, #176]	; (8001934 <SD_disk_read+0xd8>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <SD_disk_read+0x36>
 800188e:	2303      	movs	r3, #3
 8001890:	e04b      	b.n	800192a <SD_disk_read+0xce>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001892:	4b29      	ldr	r3, [pc, #164]	; (8001938 <SD_disk_read+0xdc>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	2b00      	cmp	r3, #0
 800189c:	d102      	bne.n	80018a4 <SD_disk_read+0x48>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	025b      	lsls	r3, r3, #9
 80018a2:	607b      	str	r3, [r7, #4]

	SELECT();
 80018a4:	f7ff fd3c 	bl	8001320 <SELECT>

	if (count == 1)
 80018a8:	89bb      	ldrh	r3, [r7, #12]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d111      	bne.n	80018d2 <SD_disk_read+0x76>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	2051      	movs	r0, #81	; 0x51
 80018b2:	f7ff fe8e 	bl	80015d2 <SD_SendCmd>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d12c      	bne.n	8001916 <SD_disk_read+0xba>
 80018bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c0:	68b8      	ldr	r0, [r7, #8]
 80018c2:	f7ff fe13 	bl	80014ec <SD_RxDataBlock>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d024      	beq.n	8001916 <SD_disk_read+0xba>
 80018cc:	2300      	movs	r3, #0
 80018ce:	81bb      	strh	r3, [r7, #12]
 80018d0:	e021      	b.n	8001916 <SD_disk_read+0xba>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	2052      	movs	r0, #82	; 0x52
 80018d6:	f7ff fe7c 	bl	80015d2 <SD_SendCmd>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d11a      	bne.n	8001916 <SD_disk_read+0xba>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80018e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018e4:	68b8      	ldr	r0, [r7, #8]
 80018e6:	f7ff fe01 	bl	80014ec <SD_RxDataBlock>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f083 0301 	eor.w	r3, r3, #1
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10a      	bne.n	800190c <SD_disk_read+0xb0>
				buff += 512;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018fc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80018fe:	89bb      	ldrh	r3, [r7, #12]
 8001900:	3b01      	subs	r3, #1
 8001902:	81bb      	strh	r3, [r7, #12]
 8001904:	89bb      	ldrh	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ea      	bne.n	80018e0 <SD_disk_read+0x84>
 800190a:	e000      	b.n	800190e <SD_disk_read+0xb2>
				if (!SD_RxDataBlock(buff, 512)) break;
 800190c:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800190e:	2100      	movs	r1, #0
 8001910:	204c      	movs	r0, #76	; 0x4c
 8001912:	f7ff fe5e 	bl	80015d2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001916:	f7ff fd0d 	bl	8001334 <DESELECT>
	SPI_RxByte();
 800191a:	f7ff fd49 	bl	80013b0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800191e:	89bb      	ldrh	r3, [r7, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf14      	ite	ne
 8001924:	2301      	movne	r3, #1
 8001926:	2300      	moveq	r3, #0
 8001928:	b2db      	uxtb	r3, r3
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000004 	.word	0x20000004
 8001938:	2000221c 	.word	0x2000221c

0800193c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(uint8_t pdrv, const uint8_t* buff, DWORD sector, UINT count)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	461a      	mov	r2, r3
 8001948:	4603      	mov	r3, r0
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	4613      	mov	r3, r2
 800194e:	81bb      	strh	r3, [r7, #12]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <SD_disk_write+0x20>
 8001956:	89bb      	ldrh	r3, [r7, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <SD_disk_write+0x24>
 800195c:	2304      	movs	r3, #4
 800195e:	e072      	b.n	8001a46 <SD_disk_write+0x10a>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001960:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <SD_disk_write+0x114>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SD_disk_write+0x36>
 800196e:	2303      	movs	r3, #3
 8001970:	e069      	b.n	8001a46 <SD_disk_write+0x10a>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001972:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <SD_disk_write+0x114>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <SD_disk_write+0x48>
 8001980:	2302      	movs	r3, #2
 8001982:	e060      	b.n	8001a46 <SD_disk_write+0x10a>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001984:	4b33      	ldr	r3, [pc, #204]	; (8001a54 <SD_disk_write+0x118>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <SD_disk_write+0x5a>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	025b      	lsls	r3, r3, #9
 8001994:	607b      	str	r3, [r7, #4]

	SELECT();
 8001996:	f7ff fcc3 	bl	8001320 <SELECT>

	if (count == 1)
 800199a:	89bb      	ldrh	r3, [r7, #12]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d110      	bne.n	80019c2 <SD_disk_write+0x86>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	2058      	movs	r0, #88	; 0x58
 80019a4:	f7ff fe15 	bl	80015d2 <SD_SendCmd>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d141      	bne.n	8001a32 <SD_disk_write+0xf6>
 80019ae:	21fe      	movs	r1, #254	; 0xfe
 80019b0:	68b8      	ldr	r0, [r7, #8]
 80019b2:	f7ff fdcb 	bl	800154c <SD_TxDataBlock>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d03a      	beq.n	8001a32 <SD_disk_write+0xf6>
			count = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	81bb      	strh	r3, [r7, #12]
 80019c0:	e037      	b.n	8001a32 <SD_disk_write+0xf6>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <SD_disk_write+0x118>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d008      	beq.n	80019e0 <SD_disk_write+0xa4>
		{
			SD_SendCmd(CMD55, 0);
 80019ce:	2100      	movs	r1, #0
 80019d0:	2077      	movs	r0, #119	; 0x77
 80019d2:	f7ff fdfe 	bl	80015d2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80019d6:	89bb      	ldrh	r3, [r7, #12]
 80019d8:	4619      	mov	r1, r3
 80019da:	2057      	movs	r0, #87	; 0x57
 80019dc:	f7ff fdf9 	bl	80015d2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	2059      	movs	r0, #89	; 0x59
 80019e4:	f7ff fdf5 	bl	80015d2 <SD_SendCmd>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d121      	bne.n	8001a32 <SD_disk_write+0xf6>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80019ee:	21fc      	movs	r1, #252	; 0xfc
 80019f0:	68b8      	ldr	r0, [r7, #8]
 80019f2:	f7ff fdab 	bl	800154c <SD_TxDataBlock>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f083 0301 	eor.w	r3, r3, #1
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10a      	bne.n	8001a18 <SD_disk_write+0xdc>
				buff += 512;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a08:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001a0a:	89bb      	ldrh	r3, [r7, #12]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	81bb      	strh	r3, [r7, #12]
 8001a10:	89bb      	ldrh	r3, [r7, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1eb      	bne.n	80019ee <SD_disk_write+0xb2>
 8001a16:	e000      	b.n	8001a1a <SD_disk_write+0xde>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001a18:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001a1a:	21fd      	movs	r1, #253	; 0xfd
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff fd95 	bl	800154c <SD_TxDataBlock>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f083 0301 	eor.w	r3, r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <SD_disk_write+0xf6>
			{
				count = 1;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	81bb      	strh	r3, [r7, #12]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001a32:	f7ff fc7f 	bl	8001334 <DESELECT>
	SPI_RxByte();
 8001a36:	f7ff fcbb 	bl	80013b0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001a3a:	89bb      	ldrh	r3, [r7, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf14      	ite	ne
 8001a40:	2301      	movne	r3, #1
 8001a42:	2300      	moveq	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000004 	.word	0x20000004
 8001a54:	2000221c 	.word	0x2000221c

08001a58 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(uint8_t drv, uint8_t ctrl, void *buff)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b08b      	sub	sp, #44	; 0x2c
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	603a      	str	r2, [r7, #0]
 8001a62:	71fb      	strb	r3, [r7, #7]
 8001a64:	460b      	mov	r3, r1
 8001a66:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <SD_disk_ioctl+0x1e>
 8001a72:	2304      	movs	r3, #4
 8001a74:	e113      	b.n	8001c9e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001a7c:	79bb      	ldrb	r3, [r7, #6]
 8001a7e:	2b05      	cmp	r3, #5
 8001a80:	d124      	bne.n	8001acc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d012      	beq.n	8001ab0 <SD_disk_ioctl+0x58>
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	dc1a      	bgt.n	8001ac4 <SD_disk_ioctl+0x6c>
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <SD_disk_ioctl+0x40>
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d006      	beq.n	8001aa4 <SD_disk_ioctl+0x4c>
 8001a96:	e015      	b.n	8001ac4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001a98:	f7ff fd10 	bl	80014bc <SD_PowerOff>
			res = RES_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001aa2:	e0fa      	b.n	8001c9a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001aa4:	f7ff fcc8 	bl	8001438 <SD_PowerOn>
			res = RES_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001aae:	e0f4      	b.n	8001c9a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	1c5c      	adds	r4, r3, #1
 8001ab4:	f7ff fd0e 	bl	80014d4 <SD_CheckPower>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001abc:	2300      	movs	r3, #0
 8001abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ac2:	e0ea      	b.n	8001c9a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001aca:	e0e6      	b.n	8001c9a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001acc:	4b76      	ldr	r3, [pc, #472]	; (8001ca8 <SD_disk_ioctl+0x250>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <SD_disk_ioctl+0x86>
 8001ada:	2303      	movs	r3, #3
 8001adc:	e0df      	b.n	8001c9e <SD_disk_ioctl+0x246>

		SELECT();
 8001ade:	f7ff fc1f 	bl	8001320 <SELECT>

		switch (ctrl)
 8001ae2:	79bb      	ldrb	r3, [r7, #6]
 8001ae4:	2b0c      	cmp	r3, #12
 8001ae6:	f200 80c9 	bhi.w	8001c7c <SD_disk_ioctl+0x224>
 8001aea:	a201      	add	r2, pc, #4	; (adr r2, 8001af0 <SD_disk_ioctl+0x98>)
 8001aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af0:	08001be7 	.word	0x08001be7
 8001af4:	08001b25 	.word	0x08001b25
 8001af8:	08001bd7 	.word	0x08001bd7
 8001afc:	08001c7d 	.word	0x08001c7d
 8001b00:	08001c7d 	.word	0x08001c7d
 8001b04:	08001c7d 	.word	0x08001c7d
 8001b08:	08001c7d 	.word	0x08001c7d
 8001b0c:	08001c7d 	.word	0x08001c7d
 8001b10:	08001c7d 	.word	0x08001c7d
 8001b14:	08001c7d 	.word	0x08001c7d
 8001b18:	08001bf9 	.word	0x08001bf9
 8001b1c:	08001c1d 	.word	0x08001c1d
 8001b20:	08001c41 	.word	0x08001c41
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001b24:	2100      	movs	r1, #0
 8001b26:	2049      	movs	r0, #73	; 0x49
 8001b28:	f7ff fd53 	bl	80015d2 <SD_SendCmd>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 80a8 	bne.w	8001c84 <SD_disk_ioctl+0x22c>
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	2110      	movs	r1, #16
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fcd6 	bl	80014ec <SD_RxDataBlock>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 809e 	beq.w	8001c84 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001b48:	7b3b      	ldrb	r3, [r7, #12]
 8001b4a:	099b      	lsrs	r3, r3, #6
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d10e      	bne.n	8001b70 <SD_disk_ioctl+0x118>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001b52:	7d7b      	ldrb	r3, [r7, #21]
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	7d3b      	ldrb	r3, [r7, #20]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3301      	adds	r3, #1
 8001b64:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001b66:	8bfb      	ldrh	r3, [r7, #30]
 8001b68:	029a      	lsls	r2, r3, #10
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e02e      	b.n	8001bce <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001b70:	7c7b      	ldrb	r3, [r7, #17]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	7dbb      	ldrb	r3, [r7, #22]
 8001b7a:	09db      	lsrs	r3, r3, #7
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	7d7b      	ldrb	r3, [r7, #21]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	f003 0306 	and.w	r3, r3, #6
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	3302      	adds	r3, #2
 8001b94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001b98:	7d3b      	ldrb	r3, [r7, #20]
 8001b9a:	099b      	lsrs	r3, r3, #6
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	7cfb      	ldrb	r3, [r7, #19]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	4413      	add	r3, r2
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	7cbb      	ldrb	r3, [r7, #18]
 8001bae:	029b      	lsls	r3, r3, #10
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001bc0:	8bfa      	ldrh	r2, [r7, #30]
 8001bc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bc6:	3b09      	subs	r3, #9
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001bd4:	e056      	b.n	8001c84 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bdc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001be4:	e055      	b.n	8001c92 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001be6:	f7ff fc0d 	bl	8001404 <SD_ReadyWait>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2bff      	cmp	r3, #255	; 0xff
 8001bee:	d14b      	bne.n	8001c88 <SD_disk_ioctl+0x230>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001bf6:	e047      	b.n	8001c88 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2049      	movs	r0, #73	; 0x49
 8001bfc:	f7ff fce9 	bl	80015d2 <SD_SendCmd>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d142      	bne.n	8001c8c <SD_disk_ioctl+0x234>
 8001c06:	2110      	movs	r1, #16
 8001c08:	6a38      	ldr	r0, [r7, #32]
 8001c0a:	f7ff fc6f 	bl	80014ec <SD_RxDataBlock>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d03b      	beq.n	8001c8c <SD_disk_ioctl+0x234>
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001c1a:	e037      	b.n	8001c8c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	204a      	movs	r0, #74	; 0x4a
 8001c20:	f7ff fcd7 	bl	80015d2 <SD_SendCmd>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d132      	bne.n	8001c90 <SD_disk_ioctl+0x238>
 8001c2a:	2110      	movs	r1, #16
 8001c2c:	6a38      	ldr	r0, [r7, #32]
 8001c2e:	f7ff fc5d 	bl	80014ec <SD_RxDataBlock>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d02b      	beq.n	8001c90 <SD_disk_ioctl+0x238>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001c3e:	e027      	b.n	8001c90 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001c40:	2100      	movs	r1, #0
 8001c42:	207a      	movs	r0, #122	; 0x7a
 8001c44:	f7ff fcc5 	bl	80015d2 <SD_SendCmd>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d116      	bne.n	8001c7c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c54:	e00b      	b.n	8001c6e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001c56:	6a3c      	ldr	r4, [r7, #32]
 8001c58:	1c63      	adds	r3, r4, #1
 8001c5a:	623b      	str	r3, [r7, #32]
 8001c5c:	f7ff fba8 	bl	80013b0 <SPI_RxByte>
 8001c60:	4603      	mov	r3, r0
 8001c62:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001c64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c68:	3301      	adds	r3, #1
 8001c6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d9ef      	bls.n	8001c56 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c82:	e006      	b.n	8001c92 <SD_disk_ioctl+0x23a>
			break;
 8001c84:	bf00      	nop
 8001c86:	e004      	b.n	8001c92 <SD_disk_ioctl+0x23a>
			break;
 8001c88:	bf00      	nop
 8001c8a:	e002      	b.n	8001c92 <SD_disk_ioctl+0x23a>
			break;
 8001c8c:	bf00      	nop
 8001c8e:	e000      	b.n	8001c92 <SD_disk_ioctl+0x23a>
			break;
 8001c90:	bf00      	nop
		}

		DESELECT();
 8001c92:	f7ff fb4f 	bl	8001334 <DESELECT>
		SPI_RxByte();
 8001c96:	f7ff fb8b 	bl	80013b0 <SPI_RxByte>
	}

	return res;
 8001c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	372c      	adds	r7, #44	; 0x2c
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd90      	pop	{r4, r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000004 	.word	0x20000004

08001cac <configurar_sector_base>:
Cálculo de sectores necesarios:
Cada sector es de 512 bytes (definido por la SD)
11520000 bytes ÷ 512 bytes/sector = 22500 sectores
 */

bool configurar_sector_base(uint8_t frecuencia_khz, uint16_t sectores_por_fichero, uint16_t num_ficheros) {
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	4608      	mov	r0, r1
 8001cb8:	4611      	mov	r1, r2
 8001cba:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001cbe:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8001cc2:	4622      	mov	r2, r4
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001cca:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001cce:	4602      	mov	r2, r0
 8001cd0:	801a      	strh	r2, [r3, #0]
 8001cd2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001cd6:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8001cda:	460a      	mov	r2, r1
 8001cdc:	801a      	strh	r2, [r3, #0]
    uint8_t buffer[512];
    memset(buffer, 0, sizeof(buffer));
 8001cde:	f107 030c 	add.w	r3, r7, #12
 8001ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f003 fb89 	bl	8005400 <memset>

    // Obtener el número total de sectores de la SD una sola vez
    if (SD_disk_ioctl(0, GET_SECTOR_COUNT, &total_sd_sectors) == RES_OK) {
 8001cee:	4a69      	ldr	r2, [pc, #420]	; (8001e94 <configurar_sector_base+0x1e8>)
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f7ff feb0 	bl	8001a58 <SD_disk_ioctl>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d130      	bne.n	8001d60 <configurar_sector_base+0xb4>
        printf("Capacidad total de la SD: %lu sectores\r\n", total_sd_sectors);
 8001cfe:	4b65      	ldr	r3, [pc, #404]	; (8001e94 <configurar_sector_base+0x1e8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4619      	mov	r1, r3
 8001d04:	4864      	ldr	r0, [pc, #400]	; (8001e98 <configurar_sector_base+0x1ec>)
 8001d06:	f003 ffed 	bl	8005ce4 <iprintf>
        printf("Un archivo ocupa %u sectores\r\n", sectores_por_fichero);
 8001d0a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d0e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	4861      	ldr	r0, [pc, #388]	; (8001e9c <configurar_sector_base+0x1f0>)
 8001d18:	f003 ffe4 	bl	8005ce4 <iprintf>

        // Calcular máximos archivos posibles basado en el espacio total
        if (total_sd_sectors > sectores_por_fichero) {
 8001d1c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d20:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d24:	881a      	ldrh	r2, [r3, #0]
 8001d26:	4b5b      	ldr	r3, [pc, #364]	; (8001e94 <configurar_sector_base+0x1e8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d21d      	bcs.n	8001d6a <configurar_sector_base+0xbe>
            num_ficheros = (uint16_t)((total_sd_sectors - 1) / sectores_por_fichero);
 8001d2e:	4b59      	ldr	r3, [pc, #356]	; (8001e94 <configurar_sector_base+0x1e8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	1e5a      	subs	r2, r3, #1
 8001d34:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d38:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d42:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d46:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8001d4a:	801a      	strh	r2, [r3, #0]
            printf("Número máximo de archivos posibles: %u\r\n", num_ficheros);
 8001d4c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d50:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	4619      	mov	r1, r3
 8001d58:	4851      	ldr	r0, [pc, #324]	; (8001ea0 <configurar_sector_base+0x1f4>)
 8001d5a:	f003 ffc3 	bl	8005ce4 <iprintf>
 8001d5e:	e004      	b.n	8001d6a <configurar_sector_base+0xbe>
        }
    } else {
        printf("Error al obtener capacidad total de la SD\r\n");
 8001d60:	4850      	ldr	r0, [pc, #320]	; (8001ea4 <configurar_sector_base+0x1f8>)
 8001d62:	f004 f845 	bl	8005df0 <puts>
        return false;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e08f      	b.n	8001e8a <configurar_sector_base+0x1de>
    }
    
    // IMPORTANTE: Dividir sectores_por_fichero por 100 como espera LectorAudio.py
    uint16_t sectores_para_guardar = sectores_por_fichero / 100;
 8001d6a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d6e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <configurar_sector_base+0x1fc>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
    
    // Configurar los valores según el formato exacto
    buffer[0] = frecuencia_khz;                          // Frecuencia
 8001d80:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d88:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001d8c:	f2a2 2209 	subw	r2, r2, #521	; 0x209
 8001d90:	7812      	ldrb	r2, [r2, #0]
 8001d92:	701a      	strb	r2, [r3, #0]
    buffer[1] = (sectores_para_guardar) & 0xFF;          // LOW-T_Pack
 8001d94:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001da2:	705a      	strb	r2, [r3, #1]
    buffer[2] = ((sectores_para_guardar) >> 8) & 0xFF;   // HIGH-T_Pack
 8001da4:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001db2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001db6:	709a      	strb	r2, [r3, #2]
    buffer[3] = 0;                                        // LOW-N_Pack (archivos escritos = 0)
 8001db8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001dbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	70da      	strb	r2, [r3, #3]
    buffer[4] = 0;                                        // HIGH-N_Pack (archivos escritos = 0)
 8001dc4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001dc8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dcc:	2200      	movs	r2, #0
 8001dce:	711a      	strb	r2, [r3, #4]
    buffer[7] = 0x89;                                     // Llave que identifica el sector base
 8001dd0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001dd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dd8:	2289      	movs	r2, #137	; 0x89
 8001dda:	71da      	strb	r2, [r3, #7]
    
    // Inicializar contador de sectores en 1 (después del sector 0)
    buffer[8] = 1;   // Comenzamos a escribir en el sector 1
 8001ddc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001de0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001de4:	2201      	movs	r2, #1
 8001de6:	721a      	strb	r2, [r3, #8]
    buffer[9] = 0;
 8001de8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001dec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001df0:	2200      	movs	r2, #0
 8001df2:	725a      	strb	r2, [r3, #9]
    buffer[10] = 0;
 8001df4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001df8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	729a      	strb	r2, [r3, #10]
    buffer[11] = 0;
 8001e00:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001e04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e08:	2200      	movs	r2, #0
 8001e0a:	72da      	strb	r2, [r3, #11]

    printf("Configurando sector base (sector 0)...\r\n");
 8001e0c:	4827      	ldr	r0, [pc, #156]	; (8001eac <configurar_sector_base+0x200>)
 8001e0e:	f003 ffef 	bl	8005df0 <puts>
    printf("Frecuencia: %d kHz\r\n", frecuencia_khz);
 8001e12:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001e16:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4824      	ldr	r0, [pc, #144]	; (8001eb0 <configurar_sector_base+0x204>)
 8001e20:	f003 ff60 	bl	8005ce4 <iprintf>
    printf("Sectores por fichero: %d (guardado como: %d)\r\n",
 8001e24:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001e28:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8001e32:	4619      	mov	r1, r3
 8001e34:	481f      	ldr	r0, [pc, #124]	; (8001eb4 <configurar_sector_base+0x208>)
 8001e36:	f003 ff55 	bl	8005ce4 <iprintf>
           sectores_por_fichero, sectores_para_guardar);
    printf("Numero de ficheros: %d\r\n", num_ficheros);
 8001e3a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001e3e:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	481c      	ldr	r0, [pc, #112]	; (8001eb8 <configurar_sector_base+0x20c>)
 8001e48:	f003 ff4c 	bl	8005ce4 <iprintf>
    
    // Escribir en el sector 0
    DRESULT write_result = SD_disk_write(0, buffer, 0, 1);
 8001e4c:	f107 010c 	add.w	r1, r7, #12
 8001e50:	2301      	movs	r3, #1
 8001e52:	2200      	movs	r2, #0
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff fd71 	bl	800193c <SD_disk_write>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
    
    if (write_result == RES_OK) {
 8001e60:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d109      	bne.n	8001e7c <configurar_sector_base+0x1d0>
        printf("Sector base configurado correctamente\r\n");
 8001e68:	4814      	ldr	r0, [pc, #80]	; (8001ebc <configurar_sector_base+0x210>)
 8001e6a:	f003 ffc1 	bl	8005df0 <puts>
        
        // Sincronizar para asegurar que la escritura se completó físicamente
        SD_disk_ioctl(0, CTRL_SYNC, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	2000      	movs	r0, #0
 8001e74:	f7ff fdf0 	bl	8001a58 <SD_disk_ioctl>
        return true;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e006      	b.n	8001e8a <configurar_sector_base+0x1de>
    } else {
        printf("Error al configurar sector base: %d\r\n", write_result);
 8001e7c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8001e80:	4619      	mov	r1, r3
 8001e82:	480f      	ldr	r0, [pc, #60]	; (8001ec0 <configurar_sector_base+0x214>)
 8001e84:	f003 ff2e 	bl	8005ce4 <iprintf>
        return false;
 8001e88:	2300      	movs	r3, #0
    }
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f507 7705 	add.w	r7, r7, #532	; 0x214
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd90      	pop	{r4, r7, pc}
 8001e94:	20002220 	.word	0x20002220
 8001e98:	08008188 	.word	0x08008188
 8001e9c:	080081b4 	.word	0x080081b4
 8001ea0:	080081d4 	.word	0x080081d4
 8001ea4:	08008200 	.word	0x08008200
 8001ea8:	51eb851f 	.word	0x51eb851f
 8001eac:	0800822c 	.word	0x0800822c
 8001eb0:	08008254 	.word	0x08008254
 8001eb4:	0800826c 	.word	0x0800826c
 8001eb8:	0800829c 	.word	0x0800829c
 8001ebc:	080082b8 	.word	0x080082b8
 8001ec0:	080082e0 	.word	0x080082e0

08001ec4 <leer_sector_base>:

/**
 * @brief Lee el sector base (sector 0) y muestra su información
 * @return true si la operación fue exitosa, false en caso contrario
 */
bool leer_sector_base(void) {
 8001ec4:	b5b0      	push	{r4, r5, r7, lr}
 8001ec6:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8001eca:	af02      	add	r7, sp, #8
    uint8_t buffer[512];
    memset(buffer, 0, sizeof(buffer));
 8001ecc:	463b      	mov	r3, r7
 8001ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f003 fa93 	bl	8005400 <memset>
    
    printf("Leyendo sector base (sector 0)...\r\n");
 8001eda:	4863      	ldr	r0, [pc, #396]	; (8002068 <leer_sector_base+0x1a4>)
 8001edc:	f003 ff88 	bl	8005df0 <puts>
    
    // Leer el sector 0
    DRESULT read_result = SD_disk_read(0, buffer, 0, 1);
 8001ee0:	4639      	mov	r1, r7
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff fcb8 	bl	800185c <SD_disk_read>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
    
    if (read_result == RES_OK) {
 8001ef2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 80a9 	bne.w	800204e <leer_sector_base+0x18a>
        uint8_t frecuencia_khz = buffer[0];
 8001efc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001f00:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
        
        // Leer correctamente los 2 bytes de sectores_por_fichero
        uint16_t sectores_guardados = buffer[1] | ((uint16_t)buffer[2] << 8);
 8001f0a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001f0e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001f12:	785b      	ldrb	r3, [r3, #1]
 8001f14:	b21a      	sxth	r2, r3
 8001f16:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001f1a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001f1e:	789b      	ldrb	r3, [r3, #2]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	b21b      	sxth	r3, r3
 8001f24:	4313      	orrs	r3, r2
 8001f26:	b21b      	sxth	r3, r3
 8001f28:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
        
        // IMPORTANTE: Multiplicar por 100 para obtener el valor real
        uint16_t sectores_por_fichero = sectores_guardados * 100;
 8001f2c:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001f30:	461a      	mov	r2, r3
 8001f32:	0092      	lsls	r2, r2, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	461a      	mov	r2, r3
 8001f38:	0091      	lsls	r1, r2, #2
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	f8a7 320a 	strh.w	r3, [r7, #522]	; 0x20a
        
        uint16_t num_ficheros = buffer[3] | ((uint16_t)buffer[4] << 8);
 8001f46:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001f4a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001f4e:	78db      	ldrb	r3, [r3, #3]
 8001f50:	b21a      	sxth	r2, r3
 8001f52:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001f56:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001f5a:	791b      	ldrb	r3, [r3, #4]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	b21b      	sxth	r3, r3
 8001f60:	4313      	orrs	r3, r2
 8001f62:	b21b      	sxth	r3, r3
 8001f64:	f8a7 3208 	strh.w	r3, [r7, #520]	; 0x208
        uint8_t llave = buffer[7];
 8001f68:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001f6c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001f70:	79db      	ldrb	r3, [r3, #7]
 8001f72:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
        
        printf("Datos del sector base:\r\n");
 8001f76:	483d      	ldr	r0, [pc, #244]	; (800206c <leer_sector_base+0x1a8>)
 8001f78:	f003 ff3a 	bl	8005df0 <puts>
        printf("Frecuencia: %d kHz\r\n", frecuencia_khz);
 8001f7c:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001f80:	4619      	mov	r1, r3
 8001f82:	483b      	ldr	r0, [pc, #236]	; (8002070 <leer_sector_base+0x1ac>)
 8001f84:	f003 feae 	bl	8005ce4 <iprintf>
        printf("Sectores por fichero: %d (valor guardado: %d)\r\n", 
 8001f88:	f8b7 320a 	ldrh.w	r3, [r7, #522]	; 0x20a
 8001f8c:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 8001f90:	4619      	mov	r1, r3
 8001f92:	4838      	ldr	r0, [pc, #224]	; (8002074 <leer_sector_base+0x1b0>)
 8001f94:	f003 fea6 	bl	8005ce4 <iprintf>
               sectores_por_fichero, sectores_guardados);
        printf("Numero de ficheros: %d\r\n", num_ficheros);
 8001f98:	f8b7 3208 	ldrh.w	r3, [r7, #520]	; 0x208
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4836      	ldr	r0, [pc, #216]	; (8002078 <leer_sector_base+0x1b4>)
 8001fa0:	f003 fea0 	bl	8005ce4 <iprintf>
        printf("Llave: 0x%02X (Esperado: 0x89)\r\n", llave);
 8001fa4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4834      	ldr	r0, [pc, #208]	; (800207c <leer_sector_base+0x1b8>)
 8001fac:	f003 fe9a 	bl	8005ce4 <iprintf>
        
        // Calcular el tiempo total disponible (en minutos)
        float tiempo_minutos = (float)sectores_por_fichero * (float)num_ficheros * 512.0f / 2.0f / 60.0f / (frecuencia_khz * 1000.0f);
 8001fb0:	f8b7 320a 	ldrh.w	r3, [r7, #522]	; 0x20a
 8001fb4:	ee07 3a90 	vmov	s15, r3
 8001fb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fbc:	f8b7 3208 	ldrh.w	r3, [r7, #520]	; 0x208
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fcc:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002080 <leer_sector_base+0x1bc>
 8001fd0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fd4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001fd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fdc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002084 <leer_sector_base+0x1c0>
 8001fe0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fe4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002088 <leer_sector_base+0x1c4>
 8001ff4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ffc:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
        printf("Tiempo total disponible: %.1f minutos (%.1f horas)\r\n", 
 8002000:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 8002004:	f7fe faa0 	bl	8000548 <__aeabi_f2d>
 8002008:	4604      	mov	r4, r0
 800200a:	460d      	mov	r5, r1
               tiempo_minutos, tiempo_minutos/60.0f);
 800200c:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 8002010:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002084 <leer_sector_base+0x1c0>
 8002014:	eec7 6a87 	vdiv.f32	s13, s15, s14
        printf("Tiempo total disponible: %.1f minutos (%.1f horas)\r\n", 
 8002018:	ee16 0a90 	vmov	r0, s13
 800201c:	f7fe fa94 	bl	8000548 <__aeabi_f2d>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	e9cd 2300 	strd	r2, r3, [sp]
 8002028:	4622      	mov	r2, r4
 800202a:	462b      	mov	r3, r5
 800202c:	4817      	ldr	r0, [pc, #92]	; (800208c <leer_sector_base+0x1c8>)
 800202e:	f003 fe59 	bl	8005ce4 <iprintf>
        
        if (llave == 0x89) {
 8002032:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002036:	2b89      	cmp	r3, #137	; 0x89
 8002038:	d104      	bne.n	8002044 <leer_sector_base+0x180>
            printf("Formato de sector base valido\r\n");
 800203a:	4815      	ldr	r0, [pc, #84]	; (8002090 <leer_sector_base+0x1cc>)
 800203c:	f003 fed8 	bl	8005df0 <puts>
            return true;
 8002040:	2301      	movs	r3, #1
 8002042:	e00b      	b.n	800205c <leer_sector_base+0x198>
        } else {
            printf("¡Advertencia! La llave no coincide con el valor esperado 0x89\r\n");
 8002044:	4813      	ldr	r0, [pc, #76]	; (8002094 <leer_sector_base+0x1d0>)
 8002046:	f003 fed3 	bl	8005df0 <puts>
            return false;
 800204a:	2300      	movs	r3, #0
 800204c:	e006      	b.n	800205c <leer_sector_base+0x198>
        }
    } else {
        printf("Error al leer el sector base: %d\r\n", read_result);
 800204e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002052:	4619      	mov	r1, r3
 8002054:	4810      	ldr	r0, [pc, #64]	; (8002098 <leer_sector_base+0x1d4>)
 8002056:	f003 fe45 	bl	8005ce4 <iprintf>
        return false;
 800205a:	2300      	movs	r3, #0
    }
}
 800205c:	4618      	mov	r0, r3
 800205e:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8002062:	46bd      	mov	sp, r7
 8002064:	bdb0      	pop	{r4, r5, r7, pc}
 8002066:	bf00      	nop
 8002068:	08008308 	.word	0x08008308
 800206c:	0800832c 	.word	0x0800832c
 8002070:	08008254 	.word	0x08008254
 8002074:	08008344 	.word	0x08008344
 8002078:	0800829c 	.word	0x0800829c
 800207c:	08008374 	.word	0x08008374
 8002080:	44000000 	.word	0x44000000
 8002084:	42700000 	.word	0x42700000
 8002088:	447a0000 	.word	0x447a0000
 800208c:	08008398 	.word	0x08008398
 8002090:	080083d0 	.word	0x080083d0
 8002094:	080083f0 	.word	0x080083f0
 8002098:	08008430 	.word	0x08008430

0800209c <__io_putchar>:
#include "uart.h"

int __io_putchar(int ch);
int _write(int file,char *ptr, int len);

int __io_putchar(int ch) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	733b      	strb	r3, [r7, #12]
 uart_UART2_TX(&c[0], 1, 100);
 80020aa:	f107 030c 	add.w	r3, r7, #12
 80020ae:	2264      	movs	r2, #100	; 0x64
 80020b0:	2101      	movs	r1, #1
 80020b2:	4618      	mov	r0, r3
 80020b4:	f003 f928 	bl	8005308 <uart_UART2_TX>
 return ch;
 80020b8:	687b      	ldr	r3, [r7, #4]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <_write>:

int _write(int file,char *ptr, int len) {
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	e009      	b.n	80020e8 <_write+0x26>
  __io_putchar(*ptr++);
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	60ba      	str	r2, [r7, #8]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ffdd 	bl	800209c <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	dbf1      	blt.n	80020d4 <_write+0x12>
 }
 return len;
 80020f0:	687b      	ldr	r3, [r7, #4]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <__NVIC_ClearPendingIRQ>:
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	2b00      	cmp	r3, #0
 800210c:	db0c      	blt.n	8002128 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4907      	ldr	r1, [pc, #28]	; (8002134 <__NVIC_ClearPendingIRQ+0x38>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2001      	movs	r0, #1
 800211e:	fa00 f202 	lsl.w	r2, r0, r2
 8002122:	3360      	adds	r3, #96	; 0x60
 8002124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000e100 	.word	0xe000e100

08002138 <main>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

int main (void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
	//----------Setup------------------------------//
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800213e:	f000 fae4 	bl	800270a <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8002142:	f000 f8a7 	bl	8002294 <SystemClock_Config>
	/* Initialize all configured peripherals */
	//I2C1 Config
	i2c_I2C1_GPIO_Config();
 8002146:	f002 fe71 	bl	8004e2c <i2c_I2C1_GPIO_Config>
	i2c_I2C1_Config();
 800214a:	f002 fe8f 	bl	8004e6c <i2c_I2C1_Config>
	//GPIO LED Config
	gpio_LED_config();
 800214e:	f002 fe2d 	bl	8004dac <gpio_LED_config>
	//USART COnfig
	uart_UART2_GPIO_config();
 8002152:	f003 f81b 	bl	800518c <uart_UART2_GPIO_config>
	uart_UART2_config(systemClock);
 8002156:	4b45      	ldr	r3, [pc, #276]	; (800226c <main+0x134>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f003 f878 	bl	8005250 <uart_UART2_config>
	//SPI CONFIG
	spi_GPIO_config();
 8002160:	f002 fee2 	bl	8004f28 <spi_GPIO_config>
	MX_SPI1_Init();
 8002164:	f002 ff1a 	bl	8004f9c <MX_SPI1_Init>

	// Configurar el botón con interrupción
	exti_buttonConfig();  // Configuracion del boton (PA12->D2)
 8002168:	f002 fc98 	bl	8004a9c <exti_buttonConfig>

	//Mount SD Card
	bool sd_mounted = SD_disk_initialize(0);
 800216c:	2000      	movs	r0, #0
 800216e:	f7ff fa85 	bl	800167c <SD_disk_initialize>
 8002172:	4603      	mov	r3, r0
 8002174:	71bb      	strb	r3, [r7, #6]

	if (sd_mounted != 0)
 8002176:	79bb      	ldrb	r3, [r7, #6]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <main+0x4c>
	{
		printf("Failed to mount SD card\r\n");
 800217c:	483c      	ldr	r0, [pc, #240]	; (8002270 <main+0x138>)
 800217e:	f003 fe37 	bl	8005df0 <puts>
 8002182:	e06d      	b.n	8002260 <main+0x128>
	}
	else
	{
		printf("Successfully Mounted SD card\r\n");
 8002184:	483b      	ldr	r0, [pc, #236]	; (8002274 <main+0x13c>)
 8002186:	f003 fe33 	bl	8005df0 <puts>

		// Configurar el sector base
		uint8_t frecuencia_khz = 96;                 // 48 kHz
 800218a:	2360      	movs	r3, #96	; 0x60
 800218c:	717b      	strb	r3, [r7, #5]
		uint16_t sectores_por_fichero = 45000;       // 22500 sectores para 2 minutos a 48 kHz
 800218e:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8002192:	807b      	strh	r3, [r7, #2]
		uint16_t num_ficheros = 0;                   // Se calculará automáticamente según el espacio disponible
 8002194:	2300      	movs	r3, #0
 8002196:	803b      	strh	r3, [r7, #0]

		if (configurar_sector_base(frecuencia_khz, sectores_por_fichero, num_ficheros)) {
 8002198:	883a      	ldrh	r2, [r7, #0]
 800219a:	8879      	ldrh	r1, [r7, #2]
 800219c:	797b      	ldrb	r3, [r7, #5]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fd84 	bl	8001cac <configurar_sector_base>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d05a      	beq.n	8002260 <main+0x128>
			leer_sector_base();
 80021aa:	f7ff fe8b 	bl	8001ec4 <leer_sector_base>

			// Inicializar el grabador de audio
			if (audio_recorder_init()) {
 80021ae:	f7fe fd19 	bl	8000be4 <audio_recorder_init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d053      	beq.n	8002260 <main+0x128>
				printf("Presione el boton para iniciar la grabacion\r\n");
 80021b8:	482f      	ldr	r0, [pc, #188]	; (8002278 <main+0x140>)
 80021ba:	f003 fe19 	bl	8005df0 <puts>

				bool recording = false;
 80021be:	2300      	movs	r3, #0
 80021c0:	71fb      	strb	r3, [r7, #7]

				while(1) {
					// Verificar si el botón fue presionado
					if (exti_flag) {
 80021c2:	4b2e      	ldr	r3, [pc, #184]	; (800227c <main+0x144>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d02f      	beq.n	800222c <main+0xf4>
						exti_flag = false; // Resetear la bandera
 80021cc:	4b2b      	ldr	r3, [pc, #172]	; (800227c <main+0x144>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]

						if (!recording && !memoriaLlena) {
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	f083 0301 	eor.w	r3, r3, #1
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00f      	beq.n	80021fe <main+0xc6>
 80021de:	4b28      	ldr	r3, [pc, #160]	; (8002280 <main+0x148>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	f083 0301 	eor.w	r3, r3, #1
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <main+0xc6>
							// Comenzar grabación
							recording = true;
 80021ee:	2301      	movs	r3, #1
 80021f0:	71fb      	strb	r3, [r7, #7]
							printf("Grabacion iniciada...\n\rPresione el boton para detener\r\n");
 80021f2:	4824      	ldr	r0, [pc, #144]	; (8002284 <main+0x14c>)
 80021f4:	f003 fdfc 	bl	8005df0 <puts>
							audio_recorder_start();
 80021f8:	f7fe fd74 	bl	8000ce4 <audio_recorder_start>
 80021fc:	e016      	b.n	800222c <main+0xf4>
						} else if (recording) {
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <main+0xdc>
							// Detener grabación
							recording = false;
 8002204:	2300      	movs	r3, #0
 8002206:	71fb      	strb	r3, [r7, #7]
							printf("Grabacion detenida por usuario\r\n");
 8002208:	481f      	ldr	r0, [pc, #124]	; (8002288 <main+0x150>)
 800220a:	f003 fdf1 	bl	8005df0 <puts>
							audio_recorder_stop();
 800220e:	f7fe feb3 	bl	8000f78 <audio_recorder_stop>
 8002212:	e00b      	b.n	800222c <main+0xf4>
						} else if (memoriaLlena) {
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <main+0x148>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d006      	beq.n	800222c <main+0xf4>
							printf("No se puede iniciar grabacion: memoria SD llena\r\n");
 800221e:	481b      	ldr	r0, [pc, #108]	; (800228c <main+0x154>)
 8002220:	f003 fde6 	bl	8005df0 <puts>
							HAL_Delay(500);
 8002224:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002228:	f000 fae4 	bl	80027f4 <HAL_Delay>
						}
					}

					// Verificar si la grabación se detuvo automáticamente
					if (recording && audio_recorder_get_state() == RECORDER_STOPPED) {
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <main+0x10e>
 8002232:	f7ff f807 	bl	8001244 <audio_recorder_get_state>
 8002236:	4603      	mov	r3, r0
 8002238:	2b03      	cmp	r3, #3
 800223a:	d104      	bne.n	8002246 <main+0x10e>
						recording = false;
 800223c:	2300      	movs	r3, #0
 800223e:	71fb      	strb	r3, [r7, #7]
						printf("Grabacion detenida automaticamente (limite alcanzado)\r\n");
 8002240:	4813      	ldr	r0, [pc, #76]	; (8002290 <main+0x158>)
 8002242:	f003 fdd5 	bl	8005df0 <puts>
					}

					// Procesar grabación (ahora es seguro llamar esto repetidamente)
					if (recording) {
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <main+0x11a>
						audio_recorder_process();
 800224c:	f7fe ff66 	bl	800111c <audio_recorder_process>
 8002250:	e7b7      	b.n	80021c2 <main+0x8a>
					}
                    else {
						// Parpadeo lento cuando no está grabando
						gpio_LED_toggleGreen();
 8002252:	f002 fddb 	bl	8004e0c <gpio_LED_toggleGreen>
						HAL_Delay(500);
 8002256:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800225a:	f000 facb 	bl	80027f4 <HAL_Delay>
					if (exti_flag) {
 800225e:	e7b0      	b.n	80021c2 <main+0x8a>
				}
			}
		}
	}

	return 0;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000008 	.word	0x20000008
 8002270:	080084e0 	.word	0x080084e0
 8002274:	080084fc 	.word	0x080084fc
 8002278:	0800851c 	.word	0x0800851c
 800227c:	20002224 	.word	0x20002224
 8002280:	20002211 	.word	0x20002211
 8002284:	0800854c 	.word	0x0800854c
 8002288:	08008584 	.word	0x08008584
 800228c:	080085a4 	.word	0x080085a4
 8002290:	080085d8 	.word	0x080085d8

08002294 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b096      	sub	sp, #88	; 0x58
 8002298:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	2244      	movs	r2, #68	; 0x44
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 f8ac 	bl	8005400 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a8:	463b      	mov	r3, r7
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
 80022b4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022ba:	f000 fe59 	bl	8002f70 <HAL_PWREx_ControlVoltageScaling>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80022c4:	f000 f838 	bl	8002338 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80022c8:	2310      	movs	r3, #16
 80022ca:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80022cc:	2301      	movs	r3, #1
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80022d4:	2360      	movs	r3, #96	; 0x60
 80022d6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022d8:	2302      	movs	r3, #2
 80022da:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80022dc:	2301      	movs	r3, #1
 80022de:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80022e0:	2301      	movs	r3, #1
 80022e2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 38;
 80022e4:	2326      	movs	r3, #38	; 0x26
 80022e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80022e8:	2307      	movs	r3, #7
 80022ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022ec:	2302      	movs	r3, #2
 80022ee:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022f0:	2302      	movs	r3, #2
 80022f2:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fe8f 	bl	800301c <HAL_RCC_OscConfig>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <SystemClock_Config+0x74>
	{
		Error_Handler();
 8002304:	f000 f818 	bl	8002338 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002308:	230f      	movs	r3, #15
 800230a:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800230c:	2303      	movs	r3, #3
 800230e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002310:	2300      	movs	r3, #0
 8002312:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800231c:	463b      	mov	r3, r7
 800231e:	2104      	movs	r1, #4
 8002320:	4618      	mov	r0, r3
 8002322:	f001 fa8f 	bl	8003844 <HAL_RCC_ClockConfig>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 800232c:	f000 f804 	bl	8002338 <Error_Handler>
	}

}
 8002330:	bf00      	nop
 8002332:	3758      	adds	r7, #88	; 0x58
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <Error_Handler>:
 * @retval None
 */


void Error_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800233c:	b672      	cpsid	i
}
 800233e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002340:	e7fe      	b.n	8002340 <Error_Handler+0x8>
	...

08002344 <EXTI15_10_IRQHandler>:
	/* USER CODE END Error_Handler_Debug */
}

// Implementar el manejador de interrupción para el botón con anti-rebote
void EXTI15_10_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
    // Limpiar flags de interrupción pendientes
    NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800234a:	2028      	movs	r0, #40	; 0x28
 800234c:	f7ff fed6 	bl	80020fc <__NVIC_ClearPendingIRQ>
    EXTI->PR1 |= (EXTI_PR1_PIF12);
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <EXTI15_10_IRQHandler+0x3c>)
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <EXTI15_10_IRQHandler+0x3c>)
 8002356:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800235a:	6153      	str	r3, [r2, #20]

    // Pequeño retardo para anti-rebote
    for(volatile uint32_t i = 0; i < 500000; i++) {
 800235c:	2300      	movs	r3, #0
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	e003      	b.n	800236a <EXTI15_10_IRQHandler+0x26>
        __NOP(); // No Operation - previene optimización del bucle
 8002362:	bf00      	nop
    for(volatile uint32_t i = 0; i < 500000; i++) {
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3301      	adds	r3, #1
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a05      	ldr	r2, [pc, #20]	; (8002384 <EXTI15_10_IRQHandler+0x40>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d9f7      	bls.n	8002362 <EXTI15_10_IRQHandler+0x1e>
    }

    // Activar la bandera para que el bucle principal la detecte
    exti_flag = true;
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <EXTI15_10_IRQHandler+0x44>)
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40010400 	.word	0x40010400
 8002384:	0007a11f 	.word	0x0007a11f
 8002388:	20002224 	.word	0x20002224

0800238c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <HAL_MspInit+0x44>)
 8002394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002396:	4a0e      	ldr	r2, [pc, #56]	; (80023d0 <HAL_MspInit+0x44>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6613      	str	r3, [r2, #96]	; 0x60
 800239e:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <HAL_MspInit+0x44>)
 80023a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_MspInit+0x44>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	4a08      	ldr	r2, [pc, #32]	; (80023d0 <HAL_MspInit+0x44>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b4:	6593      	str	r3, [r2, #88]	; 0x58
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_MspInit+0x44>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000

080023d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a20      	ldr	r2, [pc, #128]	; (8002474 <HAL_SPI_MspInit+0xa0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d139      	bne.n	800246a <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023f6:	4b20      	ldr	r3, [pc, #128]	; (8002478 <HAL_SPI_MspInit+0xa4>)
 80023f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fa:	4a1f      	ldr	r2, [pc, #124]	; (8002478 <HAL_SPI_MspInit+0xa4>)
 80023fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002400:	6613      	str	r3, [r2, #96]	; 0x60
 8002402:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <HAL_SPI_MspInit+0xa4>)
 8002404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <HAL_SPI_MspInit+0xa4>)
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	4a19      	ldr	r2, [pc, #100]	; (8002478 <HAL_SPI_MspInit+0xa4>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800241a:	4b17      	ldr	r3, [pc, #92]	; (8002478 <HAL_SPI_MspInit+0xa4>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002426:	23a0      	movs	r3, #160	; 0xa0
 8002428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002432:	2303      	movs	r3, #3
 8002434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002436:	2305      	movs	r3, #5
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002444:	f000 fae0 	bl	8002a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002448:	2340      	movs	r3, #64	; 0x40
 800244a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244c:	2302      	movs	r3, #2
 800244e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002450:	2301      	movs	r3, #1
 8002452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002454:	2303      	movs	r3, #3
 8002456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002458:	2305      	movs	r3, #5
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002466:	f000 facf 	bl	8002a08 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800246a:	bf00      	nop
 800246c:	3728      	adds	r7, #40	; 0x28
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40013000 	.word	0x40013000
 8002478:	40021000 	.word	0x40021000

0800247c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <SDTimer_Handler+0x40>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d006      	beq.n	8002498 <SDTimer_Handler+0x1c>
    Timer1--;
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <SDTimer_Handler+0x40>)
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <SDTimer_Handler+0x40>)
 8002496:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <SDTimer_Handler+0x44>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d006      	beq.n	80024b0 <SDTimer_Handler+0x34>
    Timer2--;
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <SDTimer_Handler+0x44>)
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <SDTimer_Handler+0x44>)
 80024ae:	801a      	strh	r2, [r3, #0]
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20002226 	.word	0x20002226
 80024c0:	20002228 	.word	0x20002228

080024c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024c8:	e7fe      	b.n	80024c8 <NMI_Handler+0x4>

080024ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ce:	e7fe      	b.n	80024ce <HardFault_Handler+0x4>

080024d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <MemManage_Handler+0x4>

080024d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024da:	e7fe      	b.n	80024da <BusFault_Handler+0x4>

080024dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <UsageFault_Handler+0x4>

080024e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
	 /* USER CODE BEGIN SysTick_IRQn 0 */

		  FatFsCnt++;
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <SysTick_Handler+0x30>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	3301      	adds	r3, #1
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <SysTick_Handler+0x30>)
 800251c:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 800251e:	4b07      	ldr	r3, [pc, #28]	; (800253c <SysTick_Handler+0x30>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b09      	cmp	r3, #9
 8002526:	d904      	bls.n	8002532 <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <SysTick_Handler+0x30>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 800252e:	f7ff ffa5 	bl	800247c <SDTimer_Handler>
		  }

	  /* USER CODE END SysTick_IRQn 0 */
	  HAL_IncTick();
 8002532:	f000 f93f 	bl	80027b4 <HAL_IncTick>
	  /* USER CODE BEGIN SysTick_IRQn 1 */

	  /* USER CODE END SysTick_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20002225 	.word	0x20002225

08002540 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return 1;
 8002544:	2301      	movs	r3, #1
}
 8002546:	4618      	mov	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <_kill>:

int _kill(int pid, int sig)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800255a:	f002 ff19 	bl	8005390 <__errno>
 800255e:	4603      	mov	r3, r0
 8002560:	2216      	movs	r2, #22
 8002562:	601a      	str	r2, [r3, #0]
  return -1;
 8002564:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <_exit>:

void _exit (int status)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002578:	f04f 31ff 	mov.w	r1, #4294967295
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ffe7 	bl	8002550 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002582:	e7fe      	b.n	8002582 <_exit+0x12>

08002584 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	e00a      	b.n	80025ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002596:	f3af 8000 	nop.w
 800259a:	4601      	mov	r1, r0
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	60ba      	str	r2, [r7, #8]
 80025a2:	b2ca      	uxtb	r2, r1
 80025a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	3301      	adds	r3, #1
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	dbf0      	blt.n	8002596 <_read+0x12>
  }

  return len;
 80025b4:	687b      	ldr	r3, [r7, #4]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <_close>:
  }
  return len;
}

int _close(int file)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025e6:	605a      	str	r2, [r3, #4]
  return 0;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <_isatty>:

int _isatty(int file)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <_sbrk+0x5c>)
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <_sbrk+0x60>)
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <_sbrk+0x64>)
 8002646:	4a12      	ldr	r2, [pc, #72]	; (8002690 <_sbrk+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	d207      	bcs.n	8002668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002658:	f002 fe9a 	bl	8005390 <__errno>
 800265c:	4603      	mov	r3, r0
 800265e:	220c      	movs	r2, #12
 8002660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	e009      	b.n	800267c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <_sbrk+0x64>)
 8002678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20010000 	.word	0x20010000
 8002688:	00000400 	.word	0x00000400
 800268c:	2000222c 	.word	0x2000222c
 8002690:	20002300 	.word	0x20002300

08002694 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <SystemInit+0x20>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269e:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <SystemInit+0x20>)
 80026a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026bc:	f7ff ffea 	bl	8002694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c0:	480c      	ldr	r0, [pc, #48]	; (80026f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80026c2:	490d      	ldr	r1, [pc, #52]	; (80026f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026c4:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <LoopForever+0xe>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c8:	e002      	b.n	80026d0 <LoopCopyDataInit>

080026ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ce:	3304      	adds	r3, #4

080026d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d4:	d3f9      	bcc.n	80026ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d6:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026d8:	4c0a      	ldr	r4, [pc, #40]	; (8002704 <LoopForever+0x16>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026dc:	e001      	b.n	80026e2 <LoopFillZerobss>

080026de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e0:	3204      	adds	r2, #4

080026e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e4:	d3fb      	bcc.n	80026de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026e6:	f002 fe59 	bl	800539c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026ea:	f7ff fd25 	bl	8002138 <main>

080026ee <LoopForever>:

LoopForever:
    b LoopForever
 80026ee:	e7fe      	b.n	80026ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80026fc:	08008a34 	.word	0x08008a34
  ldr r2, =_sbss
 8002700:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002704:	200022fc 	.word	0x200022fc

08002708 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002708:	e7fe      	b.n	8002708 <ADC1_IRQHandler>

0800270a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002714:	2003      	movs	r0, #3
 8002716:	f000 f943 	bl	80029a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800271a:	2000      	movs	r0, #0
 800271c:	f000 f80e 	bl	800273c <HAL_InitTick>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	71fb      	strb	r3, [r7, #7]
 800272a:	e001      	b.n	8002730 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800272c:	f7ff fe2e 	bl	800238c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002730:	79fb      	ldrb	r3, [r7, #7]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002748:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <HAL_InitTick+0x6c>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d023      	beq.n	8002798 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002750:	4b16      	ldr	r3, [pc, #88]	; (80027ac <HAL_InitTick+0x70>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <HAL_InitTick+0x6c>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	4619      	mov	r1, r3
 800275a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800275e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f941 	bl	80029ee <HAL_SYSTICK_Config>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10f      	bne.n	8002792 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b0f      	cmp	r3, #15
 8002776:	d809      	bhi.n	800278c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002778:	2200      	movs	r2, #0
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	f000 f919 	bl	80029b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002784:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <HAL_InitTick+0x74>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e007      	b.n	800279c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	e004      	b.n	800279c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
 8002796:	e001      	b.n	800279c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000014 	.word	0x20000014
 80027ac:	2000000c 	.word	0x2000000c
 80027b0:	20000010 	.word	0x20000010

080027b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_IncTick+0x20>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_IncTick+0x24>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4413      	add	r3, r2
 80027c4:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <HAL_IncTick+0x24>)
 80027c6:	6013      	str	r3, [r2, #0]
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20000014 	.word	0x20000014
 80027d8:	20002230 	.word	0x20002230

080027dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return uwTick;
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <HAL_GetTick+0x14>)
 80027e2:	681b      	ldr	r3, [r3, #0]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20002230 	.word	0x20002230

080027f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027fc:	f7ff ffee 	bl	80027dc <HAL_GetTick>
 8002800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d005      	beq.n	800281a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <HAL_Delay+0x44>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800281a:	bf00      	nop
 800281c:	f7ff ffde 	bl	80027dc <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	429a      	cmp	r2, r3
 800282a:	d8f7      	bhi.n	800281c <HAL_Delay+0x28>
  {
  }
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000014 	.word	0x20000014

0800283c <__NVIC_SetPriorityGrouping>:
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <__NVIC_SetPriorityGrouping+0x44>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002858:	4013      	ands	r3, r2
 800285a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800286c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800286e:	4a04      	ldr	r2, [pc, #16]	; (8002880 <__NVIC_SetPriorityGrouping+0x44>)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	60d3      	str	r3, [r2, #12]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_GetPriorityGrouping>:
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <__NVIC_GetPriorityGrouping+0x18>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	f003 0307 	and.w	r3, r3, #7
}
 8002892:	4618      	mov	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	6039      	str	r1, [r7, #0]
 80028aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	db0a      	blt.n	80028ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	490c      	ldr	r1, [pc, #48]	; (80028ec <__NVIC_SetPriority+0x4c>)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	0112      	lsls	r2, r2, #4
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	440b      	add	r3, r1
 80028c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c8:	e00a      	b.n	80028e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	4908      	ldr	r1, [pc, #32]	; (80028f0 <__NVIC_SetPriority+0x50>)
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	3b04      	subs	r3, #4
 80028d8:	0112      	lsls	r2, r2, #4
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	440b      	add	r3, r1
 80028de:	761a      	strb	r2, [r3, #24]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000e100 	.word	0xe000e100
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	; 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f1c3 0307 	rsb	r3, r3, #7
 800290e:	2b04      	cmp	r3, #4
 8002910:	bf28      	it	cs
 8002912:	2304      	movcs	r3, #4
 8002914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3304      	adds	r3, #4
 800291a:	2b06      	cmp	r3, #6
 800291c:	d902      	bls.n	8002924 <NVIC_EncodePriority+0x30>
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3b03      	subs	r3, #3
 8002922:	e000      	b.n	8002926 <NVIC_EncodePriority+0x32>
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	f04f 32ff 	mov.w	r2, #4294967295
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43da      	mvns	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	401a      	ands	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800293c:	f04f 31ff 	mov.w	r1, #4294967295
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	43d9      	mvns	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	4313      	orrs	r3, r2
         );
}
 800294e:	4618      	mov	r0, r3
 8002950:	3724      	adds	r7, #36	; 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800296c:	d301      	bcc.n	8002972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800296e:	2301      	movs	r3, #1
 8002970:	e00f      	b.n	8002992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002972:	4a0a      	ldr	r2, [pc, #40]	; (800299c <SysTick_Config+0x40>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297a:	210f      	movs	r1, #15
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	f7ff ff8e 	bl	80028a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <SysTick_Config+0x40>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298a:	4b04      	ldr	r3, [pc, #16]	; (800299c <SysTick_Config+0x40>)
 800298c:	2207      	movs	r2, #7
 800298e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	e000e010 	.word	0xe000e010

080029a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff47 	bl	800283c <__NVIC_SetPriorityGrouping>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029c8:	f7ff ff5c 	bl	8002884 <__NVIC_GetPriorityGrouping>
 80029cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	6978      	ldr	r0, [r7, #20]
 80029d4:	f7ff ff8e 	bl	80028f4 <NVIC_EncodePriority>
 80029d8:	4602      	mov	r2, r0
 80029da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff5d 	bl	80028a0 <__NVIC_SetPriority>
}
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff ffb0 	bl	800295c <SysTick_Config>
 80029fc:	4603      	mov	r3, r0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a16:	e148      	b.n	8002caa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	fa01 f303 	lsl.w	r3, r1, r3
 8002a24:	4013      	ands	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 813a 	beq.w	8002ca4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d005      	beq.n	8002a48 <HAL_GPIO_Init+0x40>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d130      	bne.n	8002aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	2203      	movs	r2, #3
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a7e:	2201      	movs	r2, #1
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	f003 0201 	and.w	r2, r3, #1
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d017      	beq.n	8002ae6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d123      	bne.n	8002b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	08da      	lsrs	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3208      	adds	r2, #8
 8002afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	220f      	movs	r2, #15
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4013      	ands	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	08da      	lsrs	r2, r3, #3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3208      	adds	r2, #8
 8002b34:	6939      	ldr	r1, [r7, #16]
 8002b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	2203      	movs	r2, #3
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0203 	and.w	r2, r3, #3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8094 	beq.w	8002ca4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7c:	4b52      	ldr	r3, [pc, #328]	; (8002cc8 <HAL_GPIO_Init+0x2c0>)
 8002b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b80:	4a51      	ldr	r2, [pc, #324]	; (8002cc8 <HAL_GPIO_Init+0x2c0>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6613      	str	r3, [r2, #96]	; 0x60
 8002b88:	4b4f      	ldr	r3, [pc, #316]	; (8002cc8 <HAL_GPIO_Init+0x2c0>)
 8002b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b94:	4a4d      	ldr	r2, [pc, #308]	; (8002ccc <HAL_GPIO_Init+0x2c4>)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	089b      	lsrs	r3, r3, #2
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	220f      	movs	r2, #15
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bbe:	d00d      	beq.n	8002bdc <HAL_GPIO_Init+0x1d4>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a43      	ldr	r2, [pc, #268]	; (8002cd0 <HAL_GPIO_Init+0x2c8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d007      	beq.n	8002bd8 <HAL_GPIO_Init+0x1d0>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a42      	ldr	r2, [pc, #264]	; (8002cd4 <HAL_GPIO_Init+0x2cc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d101      	bne.n	8002bd4 <HAL_GPIO_Init+0x1cc>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e004      	b.n	8002bde <HAL_GPIO_Init+0x1d6>
 8002bd4:	2307      	movs	r3, #7
 8002bd6:	e002      	b.n	8002bde <HAL_GPIO_Init+0x1d6>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <HAL_GPIO_Init+0x1d6>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	f002 0203 	and.w	r2, r2, #3
 8002be4:	0092      	lsls	r2, r2, #2
 8002be6:	4093      	lsls	r3, r2
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bee:	4937      	ldr	r1, [pc, #220]	; (8002ccc <HAL_GPIO_Init+0x2c4>)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bfc:	4b36      	ldr	r3, [pc, #216]	; (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c20:	4a2d      	ldr	r2, [pc, #180]	; (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c26:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c4a:	4a23      	ldr	r2, [pc, #140]	; (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c50:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c74:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c7a:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c9e:	4a0e      	ldr	r2, [pc, #56]	; (8002cd8 <HAL_GPIO_Init+0x2d0>)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f47f aeaf 	bne.w	8002a18 <HAL_GPIO_Init+0x10>
  }
}
 8002cba:	bf00      	nop
 8002cbc:	bf00      	nop
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	48000400 	.word	0x48000400
 8002cd4:	48000800 	.word	0x48000800
 8002cd8:	40010400 	.word	0x40010400

08002cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e08d      	b.n	8002e0a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f885 	bl	8002e12 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2224      	movs	r2, #36	; 0x24
 8002d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d107      	bne.n	8002d56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	e006      	b.n	8002d64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d108      	bne.n	8002d7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	e007      	b.n	8002d8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002db0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69d9      	ldr	r1, [r3, #28]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1a      	ldr	r2, [r3, #32]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d138      	bne.n	8002eae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e032      	b.n	8002eb0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2224      	movs	r2, #36	; 0x24
 8002e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e78:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6819      	ldr	r1, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 0201 	orr.w	r2, r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e000      	b.n	8002eb0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
  }
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	d139      	bne.n	8002f46 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002edc:	2302      	movs	r3, #2
 8002ede:	e033      	b.n	8002f48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	; 0x24
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f0e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	021b      	lsls	r3, r3, #8
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0201 	orr.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	e000      	b.n	8002f48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f46:	2302      	movs	r3, #2
  }
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f58:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <HAL_PWREx_GetVoltageRange+0x18>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40007000 	.word	0x40007000

08002f70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f7e:	d130      	bne.n	8002fe2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f80:	4b23      	ldr	r3, [pc, #140]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f8c:	d038      	beq.n	8003000 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f8e:	4b20      	ldr	r3, [pc, #128]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f96:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f9e:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2232      	movs	r2, #50	; 0x32
 8002fa4:	fb02 f303 	mul.w	r3, r2, r3
 8002fa8:	4a1b      	ldr	r2, [pc, #108]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0c9b      	lsrs	r3, r3, #18
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fb4:	e002      	b.n	8002fbc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fbc:	4b14      	ldr	r3, [pc, #80]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc8:	d102      	bne.n	8002fd0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f2      	bne.n	8002fb6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fdc:	d110      	bne.n	8003000 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e00f      	b.n	8003002 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fee:	d007      	beq.n	8003000 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ff0:	4b07      	ldr	r3, [pc, #28]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ff8:	4a05      	ldr	r2, [pc, #20]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ffe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40007000 	.word	0x40007000
 8003014:	2000000c 	.word	0x2000000c
 8003018:	431bde83 	.word	0x431bde83

0800301c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	f000 bc02 	b.w	8003834 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003030:	4b96      	ldr	r3, [pc, #600]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800303a:	4b94      	ldr	r3, [pc, #592]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80e4 	beq.w	800321a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_RCC_OscConfig+0x4c>
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	2b0c      	cmp	r3, #12
 800305c:	f040 808b 	bne.w	8003176 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b01      	cmp	r3, #1
 8003064:	f040 8087 	bne.w	8003176 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003068:	4b88      	ldr	r3, [pc, #544]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_OscConfig+0x64>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e3d9      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1a      	ldr	r2, [r3, #32]
 8003084:	4b81      	ldr	r3, [pc, #516]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d004      	beq.n	800309a <HAL_RCC_OscConfig+0x7e>
 8003090:	4b7e      	ldr	r3, [pc, #504]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003098:	e005      	b.n	80030a6 <HAL_RCC_OscConfig+0x8a>
 800309a:	4b7c      	ldr	r3, [pc, #496]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800309c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d223      	bcs.n	80030f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fd54 	bl	8003b5c <RCC_SetFlashLatencyFromMSIRange>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e3ba      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030be:	4b73      	ldr	r3, [pc, #460]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a72      	ldr	r2, [pc, #456]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030c4:	f043 0308 	orr.w	r3, r3, #8
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b70      	ldr	r3, [pc, #448]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	496d      	ldr	r1, [pc, #436]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030dc:	4b6b      	ldr	r3, [pc, #428]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	4968      	ldr	r1, [pc, #416]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
 80030f0:	e025      	b.n	800313e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f2:	4b66      	ldr	r3, [pc, #408]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a65      	ldr	r2, [pc, #404]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030f8:	f043 0308 	orr.w	r3, r3, #8
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	4b63      	ldr	r3, [pc, #396]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	4960      	ldr	r1, [pc, #384]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800310c:	4313      	orrs	r3, r2
 800310e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003110:	4b5e      	ldr	r3, [pc, #376]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	495b      	ldr	r1, [pc, #364]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fd14 	bl	8003b5c <RCC_SetFlashLatencyFromMSIRange>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e37a      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800313e:	f000 fc81 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 8003142:	4602      	mov	r2, r0
 8003144:	4b51      	ldr	r3, [pc, #324]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	4950      	ldr	r1, [pc, #320]	; (8003290 <HAL_RCC_OscConfig+0x274>)
 8003150:	5ccb      	ldrb	r3, [r1, r3]
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	fa22 f303 	lsr.w	r3, r2, r3
 800315a:	4a4e      	ldr	r2, [pc, #312]	; (8003294 <HAL_RCC_OscConfig+0x278>)
 800315c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800315e:	4b4e      	ldr	r3, [pc, #312]	; (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff faea 	bl	800273c <HAL_InitTick>
 8003168:	4603      	mov	r3, r0
 800316a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d052      	beq.n	8003218 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	e35e      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d032      	beq.n	80031e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800317e:	4b43      	ldr	r3, [pc, #268]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a42      	ldr	r2, [pc, #264]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800318a:	f7ff fb27 	bl	80027dc <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003192:	f7ff fb23 	bl	80027dc <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e347      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031a4:	4b39      	ldr	r3, [pc, #228]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031b0:	4b36      	ldr	r3, [pc, #216]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a35      	ldr	r2, [pc, #212]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031b6:	f043 0308 	orr.w	r3, r3, #8
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b33      	ldr	r3, [pc, #204]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	4930      	ldr	r1, [pc, #192]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ce:	4b2f      	ldr	r3, [pc, #188]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	021b      	lsls	r3, r3, #8
 80031dc:	492b      	ldr	r1, [pc, #172]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]
 80031e2:	e01a      	b.n	800321a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031e4:	4b29      	ldr	r3, [pc, #164]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a28      	ldr	r2, [pc, #160]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031ea:	f023 0301 	bic.w	r3, r3, #1
 80031ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031f0:	f7ff faf4 	bl	80027dc <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031f8:	f7ff faf0 	bl	80027dc <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e314      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x1dc>
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003218:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d073      	beq.n	800330e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	2b08      	cmp	r3, #8
 800322a:	d005      	beq.n	8003238 <HAL_RCC_OscConfig+0x21c>
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d10e      	bne.n	8003250 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d10b      	bne.n	8003250 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d063      	beq.n	800330c <HAL_RCC_OscConfig+0x2f0>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d15f      	bne.n	800330c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e2f1      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003258:	d106      	bne.n	8003268 <HAL_RCC_OscConfig+0x24c>
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a0b      	ldr	r2, [pc, #44]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e025      	b.n	80032b4 <HAL_RCC_OscConfig+0x298>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003270:	d114      	bne.n	800329c <HAL_RCC_OscConfig+0x280>
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a05      	ldr	r2, [pc, #20]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b03      	ldr	r3, [pc, #12]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a02      	ldr	r2, [pc, #8]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e013      	b.n	80032b4 <HAL_RCC_OscConfig+0x298>
 800328c:	40021000 	.word	0x40021000
 8003290:	08008610 	.word	0x08008610
 8003294:	2000000c 	.word	0x2000000c
 8003298:	20000010 	.word	0x20000010
 800329c:	4ba0      	ldr	r3, [pc, #640]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a9f      	ldr	r2, [pc, #636]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b9d      	ldr	r3, [pc, #628]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a9c      	ldr	r2, [pc, #624]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80032ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7ff fa8e 	bl	80027dc <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c4:	f7ff fa8a 	bl	80027dc <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e2ae      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d6:	4b92      	ldr	r3, [pc, #584]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x2a8>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7ff fa7a 	bl	80027dc <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ec:	f7ff fa76 	bl	80027dc <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e29a      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032fe:	4b88      	ldr	r3, [pc, #544]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x2d0>
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d060      	beq.n	80033dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b04      	cmp	r3, #4
 800331e:	d005      	beq.n	800332c <HAL_RCC_OscConfig+0x310>
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d119      	bne.n	800335a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d116      	bne.n	800335a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800332c:	4b7c      	ldr	r3, [pc, #496]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_RCC_OscConfig+0x328>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e277      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003344:	4b76      	ldr	r3, [pc, #472]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	4973      	ldr	r1, [pc, #460]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003358:	e040      	b.n	80033dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d023      	beq.n	80033aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003362:	4b6f      	ldr	r3, [pc, #444]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a6e      	ldr	r2, [pc, #440]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336e:	f7ff fa35 	bl	80027dc <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003376:	f7ff fa31 	bl	80027dc <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e255      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003388:	4b65      	ldr	r3, [pc, #404]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f0      	beq.n	8003376 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003394:	4b62      	ldr	r3, [pc, #392]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	061b      	lsls	r3, r3, #24
 80033a2:	495f      	ldr	r1, [pc, #380]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
 80033a8:	e018      	b.n	80033dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033aa:	4b5d      	ldr	r3, [pc, #372]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a5c      	ldr	r2, [pc, #368]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b6:	f7ff fa11 	bl	80027dc <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033be:	f7ff fa0d 	bl	80027dc <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e231      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d0:	4b53      	ldr	r3, [pc, #332]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f0      	bne.n	80033be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d03c      	beq.n	8003462 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01c      	beq.n	800342a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f0:	4b4b      	ldr	r3, [pc, #300]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f6:	4a4a      	ldr	r2, [pc, #296]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7ff f9ec 	bl	80027dc <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003408:	f7ff f9e8 	bl	80027dc <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e20c      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800341a:	4b41      	ldr	r3, [pc, #260]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800341c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0ef      	beq.n	8003408 <HAL_RCC_OscConfig+0x3ec>
 8003428:	e01b      	b.n	8003462 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800342a:	4b3d      	ldr	r3, [pc, #244]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800342c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003430:	4a3b      	ldr	r2, [pc, #236]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003432:	f023 0301 	bic.w	r3, r3, #1
 8003436:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343a:	f7ff f9cf 	bl	80027dc <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003442:	f7ff f9cb 	bl	80027dc <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e1ef      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003454:	4b32      	ldr	r3, [pc, #200]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ef      	bne.n	8003442 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80a6 	beq.w	80035bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003470:	2300      	movs	r3, #0
 8003472:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003474:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10d      	bne.n	800349c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003480:	4b27      	ldr	r3, [pc, #156]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	4a26      	ldr	r2, [pc, #152]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348a:	6593      	str	r3, [r2, #88]	; 0x58
 800348c:	4b24      	ldr	r3, [pc, #144]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003498:	2301      	movs	r3, #1
 800349a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349c:	4b21      	ldr	r3, [pc, #132]	; (8003524 <HAL_RCC_OscConfig+0x508>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d118      	bne.n	80034da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a8:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <HAL_RCC_OscConfig+0x508>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <HAL_RCC_OscConfig+0x508>)
 80034ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b4:	f7ff f992 	bl	80027dc <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034bc:	f7ff f98e 	bl	80027dc <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e1b2      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <HAL_RCC_OscConfig+0x508>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d108      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4d8>
 80034e2:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	4a0d      	ldr	r2, [pc, #52]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034f2:	e029      	b.n	8003548 <HAL_RCC_OscConfig+0x52c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d115      	bne.n	8003528 <HAL_RCC_OscConfig+0x50c>
 80034fc:	4b08      	ldr	r3, [pc, #32]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	4a07      	ldr	r2, [pc, #28]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003504:	f043 0304 	orr.w	r3, r3, #4
 8003508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	4a03      	ldr	r2, [pc, #12]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800351c:	e014      	b.n	8003548 <HAL_RCC_OscConfig+0x52c>
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	40007000 	.word	0x40007000
 8003528:	4b9a      	ldr	r3, [pc, #616]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	4a99      	ldr	r2, [pc, #612]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003538:	4b96      	ldr	r3, [pc, #600]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	4a95      	ldr	r2, [pc, #596]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 8003540:	f023 0304 	bic.w	r3, r3, #4
 8003544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d016      	beq.n	800357e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7ff f944 	bl	80027dc <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003556:	e00a      	b.n	800356e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003558:	f7ff f940 	bl	80027dc <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	; 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e162      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356e:	4b89      	ldr	r3, [pc, #548]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0ed      	beq.n	8003558 <HAL_RCC_OscConfig+0x53c>
 800357c:	e015      	b.n	80035aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357e:	f7ff f92d 	bl	80027dc <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003584:	e00a      	b.n	800359c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7ff f929 	bl	80027dc <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	; 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e14b      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800359c:	4b7d      	ldr	r3, [pc, #500]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1ed      	bne.n	8003586 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035aa:	7ffb      	ldrb	r3, [r7, #31]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d105      	bne.n	80035bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b0:	4b78      	ldr	r3, [pc, #480]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	4a77      	ldr	r2, [pc, #476]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 80035b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d03c      	beq.n	8003642 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01c      	beq.n	800360a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035d0:	4b70      	ldr	r3, [pc, #448]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 80035d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035d6:	4a6f      	ldr	r2, [pc, #444]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7ff f8fc 	bl	80027dc <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035e8:	f7ff f8f8 	bl	80027dc <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e11c      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035fa:	4b66      	ldr	r3, [pc, #408]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 80035fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0ef      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5cc>
 8003608:	e01b      	b.n	8003642 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800360a:	4b62      	ldr	r3, [pc, #392]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 800360c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003610:	4a60      	ldr	r2, [pc, #384]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7ff f8df 	bl	80027dc <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003622:	f7ff f8db 	bl	80027dc <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e0ff      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003634:	4b57      	ldr	r3, [pc, #348]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 8003636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1ef      	bne.n	8003622 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80f3 	beq.w	8003832 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	2b02      	cmp	r3, #2
 8003652:	f040 80c9 	bne.w	80037e8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003656:	4b4f      	ldr	r3, [pc, #316]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 0203 	and.w	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	429a      	cmp	r2, r3
 8003668:	d12c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003674:	3b01      	subs	r3, #1
 8003676:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d123      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003688:	429a      	cmp	r2, r3
 800368a:	d11b      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d113      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a6:	085b      	lsrs	r3, r3, #1
 80036a8:	3b01      	subs	r3, #1
 80036aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d109      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	3b01      	subs	r3, #1
 80036be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d06b      	beq.n	800379c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	2b0c      	cmp	r3, #12
 80036c8:	d062      	beq.n	8003790 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036ca:	4b32      	ldr	r3, [pc, #200]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e0ac      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036da:	4b2e      	ldr	r3, [pc, #184]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a2d      	ldr	r2, [pc, #180]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 80036e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036e6:	f7ff f879 	bl	80027dc <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ee:	f7ff f875 	bl	80027dc <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e099      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003700:	4b24      	ldr	r3, [pc, #144]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f0      	bne.n	80036ee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800370c:	4b21      	ldr	r3, [pc, #132]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	4b21      	ldr	r3, [pc, #132]	; (8003798 <HAL_RCC_OscConfig+0x77c>)
 8003712:	4013      	ands	r3, r2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800371c:	3a01      	subs	r2, #1
 800371e:	0112      	lsls	r2, r2, #4
 8003720:	4311      	orrs	r1, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003726:	0212      	lsls	r2, r2, #8
 8003728:	4311      	orrs	r1, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800372e:	0852      	lsrs	r2, r2, #1
 8003730:	3a01      	subs	r2, #1
 8003732:	0552      	lsls	r2, r2, #21
 8003734:	4311      	orrs	r1, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800373a:	0852      	lsrs	r2, r2, #1
 800373c:	3a01      	subs	r2, #1
 800373e:	0652      	lsls	r2, r2, #25
 8003740:	4311      	orrs	r1, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003746:	06d2      	lsls	r2, r2, #27
 8003748:	430a      	orrs	r2, r1
 800374a:	4912      	ldr	r1, [pc, #72]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 800374c:	4313      	orrs	r3, r2
 800374e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003750:	4b10      	ldr	r3, [pc, #64]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a0f      	ldr	r2, [pc, #60]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 8003756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800375c:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	4a0c      	ldr	r2, [pc, #48]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 8003762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003766:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003768:	f7ff f838 	bl	80027dc <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003770:	f7ff f834 	bl	80027dc <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e058      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003782:	4b04      	ldr	r3, [pc, #16]	; (8003794 <HAL_RCC_OscConfig+0x778>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800378e:	e050      	b.n	8003832 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e04f      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
 8003794:	40021000 	.word	0x40021000
 8003798:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <HAL_RCC_OscConfig+0x820>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d144      	bne.n	8003832 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037a8:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCC_OscConfig+0x820>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a23      	ldr	r2, [pc, #140]	; (800383c <HAL_RCC_OscConfig+0x820>)
 80037ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037b4:	4b21      	ldr	r3, [pc, #132]	; (800383c <HAL_RCC_OscConfig+0x820>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4a20      	ldr	r2, [pc, #128]	; (800383c <HAL_RCC_OscConfig+0x820>)
 80037ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037c0:	f7ff f80c 	bl	80027dc <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c8:	f7ff f808 	bl	80027dc <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e02c      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037da:	4b18      	ldr	r3, [pc, #96]	; (800383c <HAL_RCC_OscConfig+0x820>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCC_OscConfig+0x7ac>
 80037e6:	e024      	b.n	8003832 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	2b0c      	cmp	r3, #12
 80037ec:	d01f      	beq.n	800382e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ee:	4b13      	ldr	r3, [pc, #76]	; (800383c <HAL_RCC_OscConfig+0x820>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a12      	ldr	r2, [pc, #72]	; (800383c <HAL_RCC_OscConfig+0x820>)
 80037f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fe ffef 	bl	80027dc <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003802:	f7fe ffeb 	bl	80027dc <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e00f      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003814:	4b09      	ldr	r3, [pc, #36]	; (800383c <HAL_RCC_OscConfig+0x820>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f0      	bne.n	8003802 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_RCC_OscConfig+0x820>)
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	4905      	ldr	r1, [pc, #20]	; (800383c <HAL_RCC_OscConfig+0x820>)
 8003826:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_RCC_OscConfig+0x824>)
 8003828:	4013      	ands	r3, r2
 800382a:	60cb      	str	r3, [r1, #12]
 800382c:	e001      	b.n	8003832 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3720      	adds	r7, #32
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	feeefffc 	.word	0xfeeefffc

08003844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0e7      	b.n	8003a28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003858:	4b75      	ldr	r3, [pc, #468]	; (8003a30 <HAL_RCC_ClockConfig+0x1ec>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d910      	bls.n	8003888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b72      	ldr	r3, [pc, #456]	; (8003a30 <HAL_RCC_ClockConfig+0x1ec>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 0207 	bic.w	r2, r3, #7
 800386e:	4970      	ldr	r1, [pc, #448]	; (8003a30 <HAL_RCC_ClockConfig+0x1ec>)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b6e      	ldr	r3, [pc, #440]	; (8003a30 <HAL_RCC_ClockConfig+0x1ec>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0cf      	b.n	8003a28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d010      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	4b66      	ldr	r3, [pc, #408]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d908      	bls.n	80038b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a4:	4b63      	ldr	r3, [pc, #396]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4960      	ldr	r1, [pc, #384]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d04c      	beq.n	800395c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d107      	bne.n	80038da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ca:	4b5a      	ldr	r3, [pc, #360]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d121      	bne.n	800391a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e0a6      	b.n	8003a28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d107      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038e2:	4b54      	ldr	r3, [pc, #336]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d115      	bne.n	800391a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e09a      	b.n	8003a28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d107      	bne.n	800390a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038fa:	4b4e      	ldr	r3, [pc, #312]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e08e      	b.n	8003a28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800390a:	4b4a      	ldr	r3, [pc, #296]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e086      	b.n	8003a28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800391a:	4b46      	ldr	r3, [pc, #280]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f023 0203 	bic.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4943      	ldr	r1, [pc, #268]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 8003928:	4313      	orrs	r3, r2
 800392a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800392c:	f7fe ff56 	bl	80027dc <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003932:	e00a      	b.n	800394a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003934:	f7fe ff52 	bl	80027dc <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003942:	4293      	cmp	r3, r2
 8003944:	d901      	bls.n	800394a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e06e      	b.n	8003a28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	4b3a      	ldr	r3, [pc, #232]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 020c 	and.w	r2, r3, #12
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	429a      	cmp	r2, r3
 800395a:	d1eb      	bne.n	8003934 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d010      	beq.n	800398a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	4b31      	ldr	r3, [pc, #196]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003974:	429a      	cmp	r2, r3
 8003976:	d208      	bcs.n	800398a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003978:	4b2e      	ldr	r3, [pc, #184]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	492b      	ldr	r1, [pc, #172]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800398a:	4b29      	ldr	r3, [pc, #164]	; (8003a30 <HAL_RCC_ClockConfig+0x1ec>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d210      	bcs.n	80039ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003998:	4b25      	ldr	r3, [pc, #148]	; (8003a30 <HAL_RCC_ClockConfig+0x1ec>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f023 0207 	bic.w	r2, r3, #7
 80039a0:	4923      	ldr	r1, [pc, #140]	; (8003a30 <HAL_RCC_ClockConfig+0x1ec>)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a8:	4b21      	ldr	r3, [pc, #132]	; (8003a30 <HAL_RCC_ClockConfig+0x1ec>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d001      	beq.n	80039ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e036      	b.n	8003a28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d008      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c6:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	4918      	ldr	r1, [pc, #96]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d009      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039e4:	4b13      	ldr	r3, [pc, #76]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4910      	ldr	r1, [pc, #64]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039f8:	f000 f824 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	490b      	ldr	r1, [pc, #44]	; (8003a38 <HAL_RCC_ClockConfig+0x1f4>)
 8003a0a:	5ccb      	ldrb	r3, [r1, r3]
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
 8003a14:	4a09      	ldr	r2, [pc, #36]	; (8003a3c <HAL_RCC_ClockConfig+0x1f8>)
 8003a16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a18:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <HAL_RCC_ClockConfig+0x1fc>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe fe8d 	bl	800273c <HAL_InitTick>
 8003a22:	4603      	mov	r3, r0
 8003a24:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a26:	7afb      	ldrb	r3, [r7, #11]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40022000 	.word	0x40022000
 8003a34:	40021000 	.word	0x40021000
 8003a38:	08008610 	.word	0x08008610
 8003a3c:	2000000c 	.word	0x2000000c
 8003a40:	20000010 	.word	0x20000010

08003a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b089      	sub	sp, #36	; 0x24
 8003a48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a52:	4b3e      	ldr	r3, [pc, #248]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a5c:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0x34>
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d121      	bne.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d11e      	bne.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a78:	4b34      	ldr	r3, [pc, #208]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d107      	bne.n	8003a94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a84:	4b31      	ldr	r3, [pc, #196]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	61fb      	str	r3, [r7, #28]
 8003a92:	e005      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a94:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003aa0:	4a2b      	ldr	r2, [pc, #172]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10d      	bne.n	8003acc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ab4:	e00a      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d102      	bne.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003abc:	4b25      	ldr	r3, [pc, #148]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	e004      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d101      	bne.n	8003acc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ac8:	4b23      	ldr	r3, [pc, #140]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x114>)
 8003aca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b0c      	cmp	r3, #12
 8003ad0:	d134      	bne.n	8003b3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d003      	beq.n	8003aea <HAL_RCC_GetSysClockFreq+0xa6>
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d003      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0xac>
 8003ae8:	e005      	b.n	8003af6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003aea:	4b1a      	ldr	r3, [pc, #104]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8003aec:	617b      	str	r3, [r7, #20]
      break;
 8003aee:	e005      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003af0:	4b19      	ldr	r3, [pc, #100]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x114>)
 8003af2:	617b      	str	r3, [r7, #20]
      break;
 8003af4:	e002      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	617b      	str	r3, [r7, #20]
      break;
 8003afa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003afc:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	3301      	adds	r3, #1
 8003b08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b0a:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	fb03 f202 	mul.w	r2, r3, r2
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	0e5b      	lsrs	r3, r3, #25
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b3c:	69bb      	ldr	r3, [r7, #24]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3724      	adds	r7, #36	; 0x24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	08008620 	.word	0x08008620
 8003b54:	00f42400 	.word	0x00f42400
 8003b58:	007a1200 	.word	0x007a1200

08003b5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b64:	2300      	movs	r3, #0
 8003b66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b68:	4b2a      	ldr	r3, [pc, #168]	; (8003c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b74:	f7ff f9ee 	bl	8002f54 <HAL_PWREx_GetVoltageRange>
 8003b78:	6178      	str	r0, [r7, #20]
 8003b7a:	e014      	b.n	8003ba6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b7c:	4b25      	ldr	r3, [pc, #148]	; (8003c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	4a24      	ldr	r2, [pc, #144]	; (8003c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b86:	6593      	str	r3, [r2, #88]	; 0x58
 8003b88:	4b22      	ldr	r3, [pc, #136]	; (8003c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b94:	f7ff f9de 	bl	8002f54 <HAL_PWREx_GetVoltageRange>
 8003b98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b9a:	4b1e      	ldr	r3, [pc, #120]	; (8003c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9e:	4a1d      	ldr	r2, [pc, #116]	; (8003c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bac:	d10b      	bne.n	8003bc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b80      	cmp	r3, #128	; 0x80
 8003bb2:	d919      	bls.n	8003be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2ba0      	cmp	r3, #160	; 0xa0
 8003bb8:	d902      	bls.n	8003bc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bba:	2302      	movs	r3, #2
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	e013      	b.n	8003be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	e010      	b.n	8003be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b80      	cmp	r3, #128	; 0x80
 8003bca:	d902      	bls.n	8003bd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bcc:	2303      	movs	r3, #3
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	e00a      	b.n	8003be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b80      	cmp	r3, #128	; 0x80
 8003bd6:	d102      	bne.n	8003bde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bd8:	2302      	movs	r3, #2
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	e004      	b.n	8003be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b70      	cmp	r3, #112	; 0x70
 8003be2:	d101      	bne.n	8003be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003be4:	2301      	movs	r3, #1
 8003be6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f023 0207 	bic.w	r2, r3, #7
 8003bf0:	4909      	ldr	r1, [pc, #36]	; (8003c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bf8:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d001      	beq.n	8003c0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40022000 	.word	0x40022000

08003c1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e095      	b.n	8003d5a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d108      	bne.n	8003c48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c3e:	d009      	beq.n	8003c54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	61da      	str	r2, [r3, #28]
 8003c46:	e005      	b.n	8003c54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fe fbb0 	bl	80023d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c94:	d902      	bls.n	8003c9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e002      	b.n	8003ca2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ca0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003caa:	d007      	beq.n	8003cbc <HAL_SPI_Init+0xa0>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cb4:	d002      	beq.n	8003cbc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfe:	ea42 0103 	orr.w	r1, r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	0c1b      	lsrs	r3, r3, #16
 8003d18:	f003 0204 	and.w	r2, r3, #4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d38:	ea42 0103 	orr.w	r1, r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b088      	sub	sp, #32
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	603b      	str	r3, [r7, #0]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_SPI_Transmit+0x22>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e15f      	b.n	8004044 <HAL_SPI_Transmit+0x2e2>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d8c:	f7fe fd26 	bl	80027dc <HAL_GetTick>
 8003d90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d002      	beq.n	8003da8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003da2:	2302      	movs	r3, #2
 8003da4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003da6:	e148      	b.n	800403a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_SPI_Transmit+0x52>
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d102      	bne.n	8003dba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003db8:	e13f      	b.n	800403a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2203      	movs	r2, #3
 8003dbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	88fa      	ldrh	r2, [r7, #6]
 8003dd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	88fa      	ldrh	r2, [r7, #6]
 8003dd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e04:	d10f      	bne.n	8003e26 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e30:	2b40      	cmp	r3, #64	; 0x40
 8003e32:	d007      	beq.n	8003e44 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e4c:	d94f      	bls.n	8003eee <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_SPI_Transmit+0xfa>
 8003e56:	8afb      	ldrh	r3, [r7, #22]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d142      	bne.n	8003ee2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	881a      	ldrh	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	1c9a      	adds	r2, r3, #2
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e80:	e02f      	b.n	8003ee2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d112      	bne.n	8003eb6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e94:	881a      	ldrh	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	1c9a      	adds	r2, r3, #2
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eb4:	e015      	b.n	8003ee2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eb6:	f7fe fc91 	bl	80027dc <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d803      	bhi.n	8003ece <HAL_SPI_Transmit+0x16c>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d102      	bne.n	8003ed4 <HAL_SPI_Transmit+0x172>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d106      	bne.n	8003ee2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003ee0:	e0ab      	b.n	800403a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1ca      	bne.n	8003e82 <HAL_SPI_Transmit+0x120>
 8003eec:	e080      	b.n	8003ff0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_SPI_Transmit+0x19a>
 8003ef6:	8afb      	ldrh	r3, [r7, #22]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d174      	bne.n	8003fe6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d912      	bls.n	8003f2c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	881a      	ldrh	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	1c9a      	adds	r2, r3, #2
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b02      	subs	r3, #2
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f2a:	e05c      	b.n	8003fe6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	330c      	adds	r3, #12
 8003f36:	7812      	ldrb	r2, [r2, #0]
 8003f38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f52:	e048      	b.n	8003fe6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d12b      	bne.n	8003fba <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d912      	bls.n	8003f92 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	881a      	ldrh	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	1c9a      	adds	r2, r3, #2
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b02      	subs	r3, #2
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f90:	e029      	b.n	8003fe6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	7812      	ldrb	r2, [r2, #0]
 8003f9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fb8:	e015      	b.n	8003fe6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fba:	f7fe fc0f 	bl	80027dc <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d803      	bhi.n	8003fd2 <HAL_SPI_Transmit+0x270>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd0:	d102      	bne.n	8003fd8 <HAL_SPI_Transmit+0x276>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d106      	bne.n	8003fe6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003fe4:	e029      	b.n	800403a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1b1      	bne.n	8003f54 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	6839      	ldr	r1, [r7, #0]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fb69 	bl	80046cc <SPI_EndRxTxTransaction>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800400e:	2300      	movs	r3, #0
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e003      	b.n	800403a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004042:	7ffb      	ldrb	r3, [r7, #31]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	; 0x28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800405a:	2301      	movs	r3, #1
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x26>
 800406e:	2302      	movs	r3, #2
 8004070:	e20a      	b.n	8004488 <HAL_SPI_TransmitReceive+0x43c>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800407a:	f7fe fbaf 	bl	80027dc <HAL_GetTick>
 800407e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004086:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800408e:	887b      	ldrh	r3, [r7, #2]
 8004090:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004092:	887b      	ldrh	r3, [r7, #2]
 8004094:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004096:	7efb      	ldrb	r3, [r7, #27]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d00e      	beq.n	80040ba <HAL_SPI_TransmitReceive+0x6e>
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040a2:	d106      	bne.n	80040b2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <HAL_SPI_TransmitReceive+0x66>
 80040ac:	7efb      	ldrb	r3, [r7, #27]
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d003      	beq.n	80040ba <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80040b2:	2302      	movs	r3, #2
 80040b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80040b8:	e1e0      	b.n	800447c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_SPI_TransmitReceive+0x80>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_SPI_TransmitReceive+0x80>
 80040c6:	887b      	ldrh	r3, [r7, #2]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d103      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80040d2:	e1d3      	b.n	800447c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d003      	beq.n	80040e8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2205      	movs	r2, #5
 80040e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	887a      	ldrh	r2, [r7, #2]
 80040f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	887a      	ldrh	r2, [r7, #2]
 8004100:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	887a      	ldrh	r2, [r7, #2]
 800410e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	887a      	ldrh	r2, [r7, #2]
 8004114:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800412a:	d802      	bhi.n	8004132 <HAL_SPI_TransmitReceive+0xe6>
 800412c:	8a3b      	ldrh	r3, [r7, #16]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d908      	bls.n	8004144 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	e007      	b.n	8004154 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004152:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415e:	2b40      	cmp	r3, #64	; 0x40
 8004160:	d007      	beq.n	8004172 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004170:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800417a:	f240 8081 	bls.w	8004280 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_SPI_TransmitReceive+0x140>
 8004186:	8a7b      	ldrh	r3, [r7, #18]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d16d      	bne.n	8004268 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	881a      	ldrh	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	1c9a      	adds	r2, r3, #2
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b0:	e05a      	b.n	8004268 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d11b      	bne.n	80041f8 <HAL_SPI_TransmitReceive+0x1ac>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d016      	beq.n	80041f8 <HAL_SPI_TransmitReceive+0x1ac>
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d113      	bne.n	80041f8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	881a      	ldrh	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	1c9a      	adds	r2, r3, #2
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b01      	cmp	r3, #1
 8004204:	d11c      	bne.n	8004240 <HAL_SPI_TransmitReceive+0x1f4>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d016      	beq.n	8004240 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	b292      	uxth	r2, r2
 800421e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	1c9a      	adds	r2, r3, #2
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800423c:	2301      	movs	r3, #1
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004240:	f7fe facc 	bl	80027dc <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800424c:	429a      	cmp	r2, r3
 800424e:	d80b      	bhi.n	8004268 <HAL_SPI_TransmitReceive+0x21c>
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d007      	beq.n	8004268 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004266:	e109      	b.n	800447c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d19f      	bne.n	80041b2 <HAL_SPI_TransmitReceive+0x166>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d199      	bne.n	80041b2 <HAL_SPI_TransmitReceive+0x166>
 800427e:	e0e3      	b.n	8004448 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_SPI_TransmitReceive+0x244>
 8004288:	8a7b      	ldrh	r3, [r7, #18]
 800428a:	2b01      	cmp	r3, #1
 800428c:	f040 80cf 	bne.w	800442e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b01      	cmp	r3, #1
 8004298:	d912      	bls.n	80042c0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	881a      	ldrh	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	1c9a      	adds	r2, r3, #2
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b02      	subs	r3, #2
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042be:	e0b6      	b.n	800442e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	7812      	ldrb	r2, [r2, #0]
 80042cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042e6:	e0a2      	b.n	800442e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d134      	bne.n	8004360 <HAL_SPI_TransmitReceive+0x314>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d02f      	beq.n	8004360 <HAL_SPI_TransmitReceive+0x314>
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	2b01      	cmp	r3, #1
 8004304:	d12c      	bne.n	8004360 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b01      	cmp	r3, #1
 800430e:	d912      	bls.n	8004336 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004314:	881a      	ldrh	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	1c9a      	adds	r2, r3, #2
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b02      	subs	r3, #2
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004334:	e012      	b.n	800435c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	330c      	adds	r3, #12
 8004340:	7812      	ldrb	r2, [r2, #0]
 8004342:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b01      	cmp	r3, #1
 800436c:	d148      	bne.n	8004400 <HAL_SPI_TransmitReceive+0x3b4>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004374:	b29b      	uxth	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d042      	beq.n	8004400 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b01      	cmp	r3, #1
 8004384:	d923      	bls.n	80043ce <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	b292      	uxth	r2, r2
 8004392:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	1c9a      	adds	r2, r3, #2
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b02      	subs	r3, #2
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d81f      	bhi.n	80043fc <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043ca:	605a      	str	r2, [r3, #4]
 80043cc:	e016      	b.n	80043fc <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f103 020c 	add.w	r2, r3, #12
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	7812      	ldrb	r2, [r2, #0]
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043fc:	2301      	movs	r3, #1
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004400:	f7fe f9ec 	bl	80027dc <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800440c:	429a      	cmp	r2, r3
 800440e:	d803      	bhi.n	8004418 <HAL_SPI_TransmitReceive+0x3cc>
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004416:	d102      	bne.n	800441e <HAL_SPI_TransmitReceive+0x3d2>
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	2b00      	cmp	r3, #0
 800441c:	d107      	bne.n	800442e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800442c:	e026      	b.n	800447c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	f47f af57 	bne.w	80042e8 <HAL_SPI_TransmitReceive+0x29c>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	f47f af50 	bne.w	80042e8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f93d 	bl	80046cc <SPI_EndRxTxTransaction>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004472:	e003      	b.n	800447c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004488:	4618      	mov	r0, r3
 800448a:	3728      	adds	r7, #40	; 0x28
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044a0:	f7fe f99c 	bl	80027dc <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	1a9b      	subs	r3, r3, r2
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	4413      	add	r3, r2
 80044ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044b0:	f7fe f994 	bl	80027dc <HAL_GetTick>
 80044b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044b6:	4b39      	ldr	r3, [pc, #228]	; (800459c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	015b      	lsls	r3, r3, #5
 80044bc:	0d1b      	lsrs	r3, r3, #20
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	fb02 f303 	mul.w	r3, r2, r3
 80044c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044c6:	e054      	b.n	8004572 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ce:	d050      	beq.n	8004572 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044d0:	f7fe f984 	bl	80027dc <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d902      	bls.n	80044e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d13d      	bne.n	8004562 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044fe:	d111      	bne.n	8004524 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004508:	d004      	beq.n	8004514 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004512:	d107      	bne.n	8004524 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004522:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800452c:	d10f      	bne.n	800454e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800454c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e017      	b.n	8004592 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	3b01      	subs	r3, #1
 8004570:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4013      	ands	r3, r2
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	429a      	cmp	r2, r3
 8004580:	bf0c      	ite	eq
 8004582:	2301      	moveq	r3, #1
 8004584:	2300      	movne	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	429a      	cmp	r2, r3
 800458e:	d19b      	bne.n	80044c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3720      	adds	r7, #32
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	2000000c 	.word	0x2000000c

080045a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	; 0x28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80045b2:	f7fe f913 	bl	80027dc <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	4413      	add	r3, r2
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80045c2:	f7fe f90b 	bl	80027dc <HAL_GetTick>
 80045c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	330c      	adds	r3, #12
 80045ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80045d0:	4b3d      	ldr	r3, [pc, #244]	; (80046c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	4613      	mov	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	00da      	lsls	r2, r3, #3
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	0d1b      	lsrs	r3, r3, #20
 80045e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e2:	fb02 f303 	mul.w	r3, r2, r3
 80045e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80045e8:	e060      	b.n	80046ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80045f0:	d107      	bne.n	8004602 <SPI_WaitFifoStateUntilTimeout+0x62>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d104      	bne.n	8004602 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004600:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004608:	d050      	beq.n	80046ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800460a:	f7fe f8e7 	bl	80027dc <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004616:	429a      	cmp	r2, r3
 8004618:	d902      	bls.n	8004620 <SPI_WaitFifoStateUntilTimeout+0x80>
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	2b00      	cmp	r3, #0
 800461e:	d13d      	bne.n	800469c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800462e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004638:	d111      	bne.n	800465e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004642:	d004      	beq.n	800464e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464c:	d107      	bne.n	800465e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800465c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004666:	d10f      	bne.n	8004688 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004686:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e010      	b.n	80046be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689a      	ldr	r2, [r3, #8]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	4013      	ands	r3, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d196      	bne.n	80045ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3728      	adds	r7, #40	; 0x28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	2000000c 	.word	0x2000000c

080046cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2200      	movs	r2, #0
 80046e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f7ff ff5b 	bl	80045a0 <SPI_WaitFifoStateUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d007      	beq.n	8004700 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f4:	f043 0220 	orr.w	r2, r3, #32
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e027      	b.n	8004750 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2200      	movs	r2, #0
 8004708:	2180      	movs	r1, #128	; 0x80
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f7ff fec0 	bl	8004490 <SPI_WaitFlagStateUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d007      	beq.n	8004726 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471a:	f043 0220 	orr.w	r2, r3, #32
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e014      	b.n	8004750 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2200      	movs	r2, #0
 800472e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f7ff ff34 	bl	80045a0 <SPI_WaitFifoStateUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004742:	f043 0220 	orr.w	r2, r3, #32
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e000      	b.n	8004750 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <__NVIC_EnableIRQ>:
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	4603      	mov	r3, r0
 8004760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004766:	2b00      	cmp	r3, #0
 8004768:	db0b      	blt.n	8004782 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	f003 021f 	and.w	r2, r3, #31
 8004770:	4907      	ldr	r1, [pc, #28]	; (8004790 <__NVIC_EnableIRQ+0x38>)
 8004772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	2001      	movs	r0, #1
 800477a:	fa00 f202 	lsl.w	r2, r0, r2
 800477e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	e000e100 	.word	0xe000e100

08004794 <__NVIC_SetPriority>:
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	6039      	str	r1, [r7, #0]
 800479e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	db0a      	blt.n	80047be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	490c      	ldr	r1, [pc, #48]	; (80047e0 <__NVIC_SetPriority+0x4c>)
 80047ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b2:	0112      	lsls	r2, r2, #4
 80047b4:	b2d2      	uxtb	r2, r2
 80047b6:	440b      	add	r3, r1
 80047b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80047bc:	e00a      	b.n	80047d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	4908      	ldr	r1, [pc, #32]	; (80047e4 <__NVIC_SetPriority+0x50>)
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	3b04      	subs	r3, #4
 80047cc:	0112      	lsls	r2, r2, #4
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	440b      	add	r3, r1
 80047d2:	761a      	strb	r2, [r3, #24]
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	e000e100 	.word	0xe000e100
 80047e4:	e000ed00 	.word	0xe000ed00

080047e8 <adc_MIC_config>:
/**
 * @Brief ADC MIC(with OPAMP output as input) configuration
 * PA3(A2)->ADC12_IN8 is the OPAMP output
 */
void adc_MIC_config(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
	//Enable ADC clock
	RCC->AHB2ENR |= (RCC_AHB2ENR_ADCEN);
 80047ec:	4b58      	ldr	r3, [pc, #352]	; (8004950 <adc_MIC_config+0x168>)
 80047ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f0:	4a57      	ldr	r2, [pc, #348]	; (8004950 <adc_MIC_config+0x168>)
 80047f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047f6:	64d3      	str	r3, [r2, #76]	; 0x4c
	//Select HCLK/1 as ADC clock source
	ADC1_COMMON->CCR &=~(ADC_CCR_CKMODE);
 80047f8:	4b56      	ldr	r3, [pc, #344]	; (8004954 <adc_MIC_config+0x16c>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4a55      	ldr	r2, [pc, #340]	; (8004954 <adc_MIC_config+0x16c>)
 80047fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004802:	6093      	str	r3, [r2, #8]
	ADC1_COMMON->CCR |= (ADC_CCR_CKMODE_0);
 8004804:	4b53      	ldr	r3, [pc, #332]	; (8004954 <adc_MIC_config+0x16c>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a52      	ldr	r2, [pc, #328]	; (8004954 <adc_MIC_config+0x16c>)
 800480a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480e:	6093      	str	r3, [r2, #8]
	//Exit the Deep-power-down mode
	ADC1->CR &=~ (ADC_CR_DEEPPWD);
 8004810:	4b51      	ldr	r3, [pc, #324]	; (8004958 <adc_MIC_config+0x170>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4a50      	ldr	r2, [pc, #320]	; (8004958 <adc_MIC_config+0x170>)
 8004816:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800481a:	6093      	str	r3, [r2, #8]
	//Enable the ADC internal voltage regulator
	ADC1->CR |= (ADC_CR_ADVREGEN);
 800481c:	4b4e      	ldr	r3, [pc, #312]	; (8004958 <adc_MIC_config+0x170>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4a4d      	ldr	r2, [pc, #308]	; (8004958 <adc_MIC_config+0x170>)
 8004822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004826:	6093      	str	r3, [r2, #8]
	//Wait for the startup time of the ADC voltage regulator
	adc_ADCVREG_STUP_delay();
 8004828:	f000 f8dc 	bl	80049e4 <adc_ADCVREG_STUP_delay>
	////ADC Calibration
	//Single-Ended Input mode calibration
	ADC1->CR &=~ (ADC_CR_ADCALDIF);
 800482c:	4b4a      	ldr	r3, [pc, #296]	; (8004958 <adc_MIC_config+0x170>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	4a49      	ldr	r2, [pc, #292]	; (8004958 <adc_MIC_config+0x170>)
 8004832:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004836:	6093      	str	r3, [r2, #8]
	//Calibration start
	ADC1->CR |= (ADC_CR_ADCAL);
 8004838:	4b47      	ldr	r3, [pc, #284]	; (8004958 <adc_MIC_config+0x170>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	4a46      	ldr	r2, [pc, #280]	; (8004958 <adc_MIC_config+0x170>)
 800483e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004842:	6093      	str	r3, [r2, #8]
	//Wait until calibration is stopped
	while (ADC1->CR & ADC_CR_ADCAL);
 8004844:	bf00      	nop
 8004846:	4b44      	ldr	r3, [pc, #272]	; (8004958 <adc_MIC_config+0x170>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	dbfb      	blt.n	8004846 <adc_MIC_config+0x5e>
	//Right Align Mode
	ADC1->CFGR &=~ (ADC_CFGR_ALIGN);
 800484e:	4b42      	ldr	r3, [pc, #264]	; (8004958 <adc_MIC_config+0x170>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	4a41      	ldr	r2, [pc, #260]	; (8004958 <adc_MIC_config+0x170>)
 8004854:	f023 0320 	bic.w	r3, r3, #32
 8004858:	60d3      	str	r3, [r2, #12]
	//Single Conversion Mode
	ADC1->CFGR &=~ (ADC_CFGR_CONT);
 800485a:	4b3f      	ldr	r3, [pc, #252]	; (8004958 <adc_MIC_config+0x170>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	4a3e      	ldr	r2, [pc, #248]	; (8004958 <adc_MIC_config+0x170>)
 8004860:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004864:	60d3      	str	r3, [r2, #12]
	//-----Sample time to 24.5 ADC CLK Cycles-----//
	//Tconv= (24.5+12.5) ADC CLK Cycles = 37 ADC clock cycles = 513.88ns
	//Total Tconv= Tconv *4= 2.055us(with N=4 oversampling)
	//Oversampled max frequency=486.49kHz
	ADC1->SMPR1 &=~ (ADC_SMPR1_SMP8);
 8004866:	4b3c      	ldr	r3, [pc, #240]	; (8004958 <adc_MIC_config+0x170>)
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	4a3b      	ldr	r2, [pc, #236]	; (8004958 <adc_MIC_config+0x170>)
 800486c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004870:	6153      	str	r3, [r2, #20]
	ADC1->SMPR1 |= (0x3UL << ADC_SMPR1_SMP8_Pos);
 8004872:	4b39      	ldr	r3, [pc, #228]	; (8004958 <adc_MIC_config+0x170>)
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	4a38      	ldr	r2, [pc, #224]	; (8004958 <adc_MIC_config+0x170>)
 8004878:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800487c:	6153      	str	r3, [r2, #20]
	//Single-channel mode
	ADC1->SQR1 &=~(ADC_SQR1_L);
 800487e:	4b36      	ldr	r3, [pc, #216]	; (8004958 <adc_MIC_config+0x170>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	4a35      	ldr	r2, [pc, #212]	; (8004958 <adc_MIC_config+0x170>)
 8004884:	f023 030f 	bic.w	r3, r3, #15
 8004888:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1  &=~ (ADC_SQR1_SQ1);
 800488a:	4b33      	ldr	r3, [pc, #204]	; (8004958 <adc_MIC_config+0x170>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	4a32      	ldr	r2, [pc, #200]	; (8004958 <adc_MIC_config+0x170>)
 8004890:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8004894:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1  |= (0x8UL << (6U));
 8004896:	4b30      	ldr	r3, [pc, #192]	; (8004958 <adc_MIC_config+0x170>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	4a2f      	ldr	r2, [pc, #188]	; (8004958 <adc_MIC_config+0x170>)
 800489c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048a0:	6313      	str	r3, [r2, #48]	; 0x30
	//----------------Oversampling Code-----------------------------//
	//Enable Regular Oversampled Mode
	ADC1->CFGR2 |= (ADC_CFGR2_ROVSE);
 80048a2:	4b2d      	ldr	r3, [pc, #180]	; (8004958 <adc_MIC_config+0x170>)
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	4a2c      	ldr	r2, [pc, #176]	; (8004958 <adc_MIC_config+0x170>)
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	6113      	str	r3, [r2, #16]
	//Oversampling Ratio to 4 (no bit shifting)
	ADC1->CFGR2 &=~ (ADC_CFGR2_OVSR);
 80048ae:	4b2a      	ldr	r3, [pc, #168]	; (8004958 <adc_MIC_config+0x170>)
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	4a29      	ldr	r2, [pc, #164]	; (8004958 <adc_MIC_config+0x170>)
 80048b4:	f023 031c 	bic.w	r3, r3, #28
 80048b8:	6113      	str	r3, [r2, #16]
	ADC1->CFGR2 |= (ADC_CFGR2_OVSR_0);
 80048ba:	4b27      	ldr	r3, [pc, #156]	; (8004958 <adc_MIC_config+0x170>)
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	4a26      	ldr	r2, [pc, #152]	; (8004958 <adc_MIC_config+0x170>)
 80048c0:	f043 0304 	orr.w	r3, r3, #4
 80048c4:	6113      	str	r3, [r2, #16]
	//-------------------End of Oversampling Code------------------//
	//TIM6 TRGO Trigger
	ADC1->CFGR &=~ (ADC_CFGR_EXTEN);
 80048c6:	4b24      	ldr	r3, [pc, #144]	; (8004958 <adc_MIC_config+0x170>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	4a23      	ldr	r2, [pc, #140]	; (8004958 <adc_MIC_config+0x170>)
 80048cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048d0:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= (ADC_CFGR_EXTEN_0);
 80048d2:	4b21      	ldr	r3, [pc, #132]	; (8004958 <adc_MIC_config+0x170>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	4a20      	ldr	r2, [pc, #128]	; (8004958 <adc_MIC_config+0x170>)
 80048d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048dc:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR &=~ (ADC_CFGR_EXTSEL);
 80048de:	4b1e      	ldr	r3, [pc, #120]	; (8004958 <adc_MIC_config+0x170>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	4a1d      	ldr	r2, [pc, #116]	; (8004958 <adc_MIC_config+0x170>)
 80048e4:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 80048e8:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= (0xDUL << ADC_CFGR_EXTSEL_Pos);//Event 13->TIM6_TRGO selected
 80048ea:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <adc_MIC_config+0x170>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	4a1a      	ldr	r2, [pc, #104]	; (8004958 <adc_MIC_config+0x170>)
 80048f0:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 80048f4:	60d3      	str	r3, [r2, #12]
	//DMA Circular Mode
	ADC1->CFGR |= (ADC_CFGR_DMACFG);
 80048f6:	4b18      	ldr	r3, [pc, #96]	; (8004958 <adc_MIC_config+0x170>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	4a17      	ldr	r2, [pc, #92]	; (8004958 <adc_MIC_config+0x170>)
 80048fc:	f043 0302 	orr.w	r3, r3, #2
 8004900:	60d3      	str	r3, [r2, #12]
	//Enable DMA-ADC registers
	ADC1->CFGR |= (ADC_CFGR_DMAEN);
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <adc_MIC_config+0x170>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	4a14      	ldr	r2, [pc, #80]	; (8004958 <adc_MIC_config+0x170>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	60d3      	str	r3, [r2, #12]
	//Clear the ADC ready flag(It is cleared by writing 1 to it.)
	ADC1->ISR |=(ADC_ISR_ADRDY);
 800490e:	4b12      	ldr	r3, [pc, #72]	; (8004958 <adc_MIC_config+0x170>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a11      	ldr	r2, [pc, #68]	; (8004958 <adc_MIC_config+0x170>)
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	6013      	str	r3, [r2, #0]
	//Enable ADC
	ADC1->CR |=(ADC_CR_ADEN);
 800491a:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <adc_MIC_config+0x170>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	4a0e      	ldr	r2, [pc, #56]	; (8004958 <adc_MIC_config+0x170>)
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	6093      	str	r3, [r2, #8]
	//Wait until ADC is ready
	while (!(ADC1->CR & ADC_CR_ADEN));
 8004926:	bf00      	nop
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <adc_MIC_config+0x170>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0f9      	beq.n	8004928 <adc_MIC_config+0x140>
	//Clear the ADC ready flag again
	ADC1->ISR |=(ADC_ISR_ADRDY);
 8004934:	4b08      	ldr	r3, [pc, #32]	; (8004958 <adc_MIC_config+0x170>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a07      	ldr	r2, [pc, #28]	; (8004958 <adc_MIC_config+0x170>)
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	6013      	str	r3, [r2, #0]
	//ADC begin
	ADC1->CR |=(ADC_CR_ADSTART);
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <adc_MIC_config+0x170>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4a04      	ldr	r2, [pc, #16]	; (8004958 <adc_MIC_config+0x170>)
 8004946:	f043 0304 	orr.w	r3, r3, #4
 800494a:	6093      	str	r3, [r2, #8]
}
 800494c:	bf00      	nop
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40021000 	.word	0x40021000
 8004954:	50040300 	.word	0x50040300
 8004958:	50040000 	.word	0x50040000

0800495c <adc_MIC_DMA_config>:

/**
 * @Brief ADC MIC DMA configuration
 */
void adc_MIC_DMA_config(uint16_t *buffer, uint16_t size) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	807b      	strh	r3, [r7, #2]
    // Habilitar reloj para DMA1
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8004968:	4b1b      	ldr	r3, [pc, #108]	; (80049d8 <adc_MIC_DMA_config+0x7c>)
 800496a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800496c:	4a1a      	ldr	r2, [pc, #104]	; (80049d8 <adc_MIC_DMA_config+0x7c>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	6493      	str	r3, [r2, #72]	; 0x48
    
    // Desactivar DMA1 Channel 1
    DMA1_Channel1->CCR &= ~(DMA_CCR_EN);
 8004974:	4b19      	ldr	r3, [pc, #100]	; (80049dc <adc_MIC_DMA_config+0x80>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a18      	ldr	r2, [pc, #96]	; (80049dc <adc_MIC_DMA_config+0x80>)
 800497a:	f023 0301 	bic.w	r3, r3, #1
 800497e:	6013      	str	r3, [r2, #0]
    
    // Esperar a que DMA esté desactivado
    while(DMA1_Channel1->CCR & DMA_CCR_EN);
 8004980:	bf00      	nop
 8004982:	4b16      	ldr	r3, [pc, #88]	; (80049dc <adc_MIC_DMA_config+0x80>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f9      	bne.n	8004982 <adc_MIC_DMA_config+0x26>
    
    // Configurar la dirección de periférico (registro de datos del ADC)
    DMA1_Channel1->CPAR = (uint32_t)&ADC1->DR;
 800498e:	4b13      	ldr	r3, [pc, #76]	; (80049dc <adc_MIC_DMA_config+0x80>)
 8004990:	4a13      	ldr	r2, [pc, #76]	; (80049e0 <adc_MIC_DMA_config+0x84>)
 8004992:	609a      	str	r2, [r3, #8]
    
    // Configurar la dirección de memoria (buffer)
    DMA1_Channel1->CMAR = (uint32_t)buffer;
 8004994:	4a11      	ldr	r2, [pc, #68]	; (80049dc <adc_MIC_DMA_config+0x80>)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	60d3      	str	r3, [r2, #12]
    
    // Configurar cantidad de datos a transferir
    DMA1_Channel1->CNDTR = size;
 800499a:	4a10      	ldr	r2, [pc, #64]	; (80049dc <adc_MIC_DMA_config+0x80>)
 800499c:	887b      	ldrh	r3, [r7, #2]
 800499e:	6053      	str	r3, [r2, #4]
    
    // Configurar DMA con la nueva configuración
    DMA1_Channel1->CCR = 0;
 80049a0:	4b0e      	ldr	r3, [pc, #56]	; (80049dc <adc_MIC_DMA_config+0x80>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
    DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0  |  // Periférico: Half-word (16 bits)
 80049a6:	4b0d      	ldr	r3, [pc, #52]	; (80049dc <adc_MIC_DMA_config+0x80>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a0c      	ldr	r2, [pc, #48]	; (80049dc <adc_MIC_DMA_config+0x80>)
 80049ac:	f443 5316 	orr.w	r3, r3, #9600	; 0x2580
 80049b0:	f043 0326 	orr.w	r3, r3, #38	; 0x26
 80049b4:	6013      	str	r3, [r2, #0]
                          DMA_CCR_PL_1     |  // Alta prioridad
                          DMA_CCR_HTIE     |  // Habilitar interrupción de media transferencia
                          DMA_CCR_TCIE;       // Habilitar interrupción de transferencia completa
    
    // Habilitar interrupción DMA en NVIC
    NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 80049b6:	2100      	movs	r1, #0
 80049b8:	200b      	movs	r0, #11
 80049ba:	f7ff feeb 	bl	8004794 <__NVIC_SetPriority>
    NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80049be:	200b      	movs	r0, #11
 80049c0:	f7ff feca 	bl	8004758 <__NVIC_EnableIRQ>
    
    // Activar DMA
    DMA1_Channel1->CCR |= DMA_CCR_EN;
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <adc_MIC_DMA_config+0x80>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a04      	ldr	r2, [pc, #16]	; (80049dc <adc_MIC_DMA_config+0x80>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	6013      	str	r3, [r2, #0]
}
 80049d0:	bf00      	nop
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40021000 	.word	0x40021000
 80049dc:	40020008 	.word	0x40020008
 80049e0:	50040040 	.word	0x50040040

080049e4 <adc_ADCVREG_STUP_delay>:
/*
 * @brief delay for ADC voltage regulator start-up time(20us)
 * A 80Mhz->CM=12.5ns->CM x 2000=25us>20us
 */
void adc_ADCVREG_STUP_delay(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
	volatile uint32_t i;
	for (i=0;i<2000;i++) {}
 80049ea:	2300      	movs	r3, #0
 80049ec:	607b      	str	r3, [r7, #4]
 80049ee:	e002      	b.n	80049f6 <adc_ADCVREG_STUP_delay+0x12>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3301      	adds	r3, #1
 80049f4:	607b      	str	r3, [r7, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80049fc:	d3f8      	bcc.n	80049f0 <adc_ADCVREG_STUP_delay+0xc>
}
 80049fe:	bf00      	nop
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <__NVIC_EnableIRQ>:
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	db0b      	blt.n	8004a36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	f003 021f 	and.w	r2, r3, #31
 8004a24:	4907      	ldr	r1, [pc, #28]	; (8004a44 <__NVIC_EnableIRQ+0x38>)
 8004a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	e000e100 	.word	0xe000e100

08004a48 <__NVIC_SetPriority>:
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	6039      	str	r1, [r7, #0]
 8004a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	db0a      	blt.n	8004a72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	490c      	ldr	r1, [pc, #48]	; (8004a94 <__NVIC_SetPriority+0x4c>)
 8004a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a66:	0112      	lsls	r2, r2, #4
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a70:	e00a      	b.n	8004a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	4908      	ldr	r1, [pc, #32]	; (8004a98 <__NVIC_SetPriority+0x50>)
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	3b04      	subs	r3, #4
 8004a80:	0112      	lsls	r2, r2, #4
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	440b      	add	r3, r1
 8004a86:	761a      	strb	r2, [r3, #24]
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	e000e100 	.word	0xe000e100
 8004a98:	e000ed00 	.word	0xe000ed00

08004a9c <exti_buttonConfig>:

/*
 * @brief Push Button EXTI configuration (PA12->D2)
 */
void exti_buttonConfig(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  //Enable GPIO port A clock
  RCC->AHB2ENR |=(RCC_AHB2ENR_GPIOAEN);
 8004aa0:	4b22      	ldr	r3, [pc, #136]	; (8004b2c <exti_buttonConfig+0x90>)
 8004aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa4:	4a21      	ldr	r2, [pc, #132]	; (8004b2c <exti_buttonConfig+0x90>)
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
  //Enable mode Input with Internal Pull-Up
  GPIOA->MODER &= ~(GPIO_MODER_MODE12);
 8004aac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004ab6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004aba:	6013      	str	r3, [r2, #0]
  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD12);
 8004abc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004ac6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004aca:	60d3      	str	r3, [r2, #12]
  GPIOA->PUPDR |= (GPIO_PUPDR_PUPD12_0);
 8004acc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ada:	60d3      	str	r3, [r2, #12]
  //System configuration controller clock enable
  RCC->APB2ENR |= (RCC_APB2ENR_SYSCFGEN);
 8004adc:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <exti_buttonConfig+0x90>)
 8004ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae0:	4a12      	ldr	r2, [pc, #72]	; (8004b2c <exti_buttonConfig+0x90>)
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	6613      	str	r3, [r2, #96]	; 0x60
  //PA12 maps EXTI12
  SYSCFG->EXTICR[3] &= ~(SYSCFG_EXTICR4_EXTI12);
 8004ae8:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <exti_buttonConfig+0x94>)
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	4a10      	ldr	r2, [pc, #64]	; (8004b30 <exti_buttonConfig+0x94>)
 8004aee:	f023 0307 	bic.w	r3, r3, #7
 8004af2:	6153      	str	r3, [r2, #20]
  //Unblock EXTI0 interrupt
  EXTI->IMR1 |= (EXTI_IMR1_IM12);
 8004af4:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <exti_buttonConfig+0x98>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a0e      	ldr	r2, [pc, #56]	; (8004b34 <exti_buttonConfig+0x98>)
 8004afa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004afe:	6013      	str	r3, [r2, #0]
  //Enable Rising Edge Only
  EXTI->RTSR1 |= (EXTI_RTSR1_RT12);
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <exti_buttonConfig+0x98>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	4a0b      	ldr	r2, [pc, #44]	; (8004b34 <exti_buttonConfig+0x98>)
 8004b06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b0a:	6093      	str	r3, [r2, #8]
  EXTI->FTSR1 &= ~(EXTI_FTSR1_FT12);
 8004b0c:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <exti_buttonConfig+0x98>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4a08      	ldr	r2, [pc, #32]	; (8004b34 <exti_buttonConfig+0x98>)
 8004b12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b16:	60d3      	str	r3, [r2, #12]
  //Minimum Priority Level
  NVIC_SetPriority(EXTI15_10_IRQn,15);
 8004b18:	210f      	movs	r1, #15
 8004b1a:	2028      	movs	r0, #40	; 0x28
 8004b1c:	f7ff ff94 	bl	8004a48 <__NVIC_SetPriority>
  //Enable interrupt
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004b20:	2028      	movs	r0, #40	; 0x28
 8004b22:	f7ff ff73 	bl	8004a0c <__NVIC_EnableIRQ>


}
 8004b26:	bf00      	nop
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	40010000 	.word	0x40010000
 8004b34:	40010400 	.word	0x40010400

08004b38 <gpioPeriphClockControl>:
 */

#include <gpio.h>

// clock control api for GPIO
void gpioPeriphClockControl(GPIO_TypeDef *pGPIOx , uint8_t EnorDi) {
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d12b      	bne.n	8004ba2 <gpioPeriphClockControl+0x6a>

		if (pGPIOx == GPIOA) {
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b50:	d106      	bne.n	8004b60 <gpioPeriphClockControl+0x28>
			GPIOA_CLOCK_ENABLE();
 8004b52:	4b2c      	ldr	r3, [pc, #176]	; (8004c04 <gpioPeriphClockControl+0xcc>)
 8004b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b56:	4a2b      	ldr	r2, [pc, #172]	; (8004c04 <gpioPeriphClockControl+0xcc>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
			GPIOC_CLOCK_DISABLE();
		}else if (pGPIOx == GPIOH){
			GPIOH_CLOCK_DISABLE();
		}
	}
}
 8004b5e:	e04b      	b.n	8004bf8 <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOB) {
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a29      	ldr	r2, [pc, #164]	; (8004c08 <gpioPeriphClockControl+0xd0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d106      	bne.n	8004b76 <gpioPeriphClockControl+0x3e>
			GPIOB_CLOCK_ENABLE();
 8004b68:	4b26      	ldr	r3, [pc, #152]	; (8004c04 <gpioPeriphClockControl+0xcc>)
 8004b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6c:	4a25      	ldr	r2, [pc, #148]	; (8004c04 <gpioPeriphClockControl+0xcc>)
 8004b6e:	f043 0302 	orr.w	r3, r3, #2
 8004b72:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8004b74:	e040      	b.n	8004bf8 <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOC){
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a24      	ldr	r2, [pc, #144]	; (8004c0c <gpioPeriphClockControl+0xd4>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d106      	bne.n	8004b8c <gpioPeriphClockControl+0x54>
			GPIOC_CLOCK_ENABLE();
 8004b7e:	4b21      	ldr	r3, [pc, #132]	; (8004c04 <gpioPeriphClockControl+0xcc>)
 8004b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b82:	4a20      	ldr	r2, [pc, #128]	; (8004c04 <gpioPeriphClockControl+0xcc>)
 8004b84:	f043 0304 	orr.w	r3, r3, #4
 8004b88:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8004b8a:	e035      	b.n	8004bf8 <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOH){
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a20      	ldr	r2, [pc, #128]	; (8004c10 <gpioPeriphClockControl+0xd8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d131      	bne.n	8004bf8 <gpioPeriphClockControl+0xc0>
			GPIOH_CLOCK_ENABLE();
 8004b94:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <gpioPeriphClockControl+0xcc>)
 8004b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b98:	4a1a      	ldr	r2, [pc, #104]	; (8004c04 <gpioPeriphClockControl+0xcc>)
 8004b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b9e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8004ba0:	e02a      	b.n	8004bf8 <gpioPeriphClockControl+0xc0>
		if (pGPIOx == GPIOA) {
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ba8:	d106      	bne.n	8004bb8 <gpioPeriphClockControl+0x80>
			GPIOA_CLOCK_DISABLE();
 8004baa:	4b16      	ldr	r3, [pc, #88]	; (8004c04 <gpioPeriphClockControl+0xcc>)
 8004bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bae:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <gpioPeriphClockControl+0xcc>)
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8004bb6:	e01f      	b.n	8004bf8 <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOB) {
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a13      	ldr	r2, [pc, #76]	; (8004c08 <gpioPeriphClockControl+0xd0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d106      	bne.n	8004bce <gpioPeriphClockControl+0x96>
			GPIOB_CLOCK_DISABLE();
 8004bc0:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <gpioPeriphClockControl+0xcc>)
 8004bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc4:	4a0f      	ldr	r2, [pc, #60]	; (8004c04 <gpioPeriphClockControl+0xcc>)
 8004bc6:	f023 0302 	bic.w	r3, r3, #2
 8004bca:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8004bcc:	e014      	b.n	8004bf8 <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOC){
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a0e      	ldr	r2, [pc, #56]	; (8004c0c <gpioPeriphClockControl+0xd4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d106      	bne.n	8004be4 <gpioPeriphClockControl+0xac>
			GPIOC_CLOCK_DISABLE();
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <gpioPeriphClockControl+0xcc>)
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bda:	4a0a      	ldr	r2, [pc, #40]	; (8004c04 <gpioPeriphClockControl+0xcc>)
 8004bdc:	f023 0304 	bic.w	r3, r3, #4
 8004be0:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8004be2:	e009      	b.n	8004bf8 <gpioPeriphClockControl+0xc0>
		}else if (pGPIOx == GPIOH){
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <gpioPeriphClockControl+0xd8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d105      	bne.n	8004bf8 <gpioPeriphClockControl+0xc0>
			GPIOH_CLOCK_DISABLE();
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <gpioPeriphClockControl+0xcc>)
 8004bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf0:	4a04      	ldr	r2, [pc, #16]	; (8004c04 <gpioPeriphClockControl+0xcc>)
 8004bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	40021000 	.word	0x40021000
 8004c08:	48000400 	.word	0x48000400
 8004c0c:	48000800 	.word	0x48000800
 8004c10:	48001c00 	.word	0x48001c00

08004c14 <gpio_Init>:

// GPIO Initialization
void gpio_Init(GPIO_Handle_t* pNewGPIOPin)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0 ;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]

	//enable the peripheral clock
	gpioPeriphClockControl(pNewGPIOPin->pGPIOx, ENABLE) ;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2101      	movs	r1, #1
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff ff86 	bl	8004b38 <gpioPeriphClockControl>
	// configure the modes of a GPIO pin
	temp = (pNewGPIOPin->pinMode << (2 * pNewGPIOPin->pinNumber)) ;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	795b      	ldrb	r3, [r3, #5]
 8004c30:	461a      	mov	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	791b      	ldrb	r3, [r3, #4]
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	60fb      	str	r3, [r7, #12]
	pNewGPIOPin->pGPIOx->MODER &= ~(0x3 << (2 * pNewGPIOPin->pinNumber) );
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	791b      	ldrb	r3, [r3, #4]
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	2103      	movs	r1, #3
 8004c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	4619      	mov	r1, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	400a      	ands	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]
	pNewGPIOPin->pGPIOx->MODER |= temp ;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6819      	ldr	r1, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]

	temp = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]

	// configure the speed
	temp = (pNewGPIOPin->pinSpeed << (2 * pNewGPIOPin->pinNumber) ) ;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	799b      	ldrb	r3, [r3, #6]
 8004c74:	461a      	mov	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	791b      	ldrb	r3, [r3, #4]
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	60fb      	str	r3, [r7, #12]
	pNewGPIOPin->pGPIOx->OSPEEDR  &= ~(0x3 << (2 * pNewGPIOPin->pinNumber)) ;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	791b      	ldrb	r3, [r3, #4]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	2103      	movs	r1, #3
 8004c90:	fa01 f303 	lsl.w	r3, r1, r3
 8004c94:	43db      	mvns	r3, r3
 8004c96:	4619      	mov	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	400a      	ands	r2, r1
 8004c9e:	609a      	str	r2, [r3, #8]
	pNewGPIOPin->pGPIOx->OSPEEDR  |= temp ;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6899      	ldr	r1, [r3, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	609a      	str	r2, [r3, #8]

	temp = 0 ;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]

	// configure the pull up/down control
	temp = (pNewGPIOPin->pinPUPDControl << (2 * pNewGPIOPin->pinNumber) ) ;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	79db      	ldrb	r3, [r3, #7]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	791b      	ldrb	r3, [r3, #4]
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	60fb      	str	r3, [r7, #12]
	pNewGPIOPin->pGPIOx->PUPDR  &= ~(0x3 << (2 * pNewGPIOPin->pinNumber));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	791b      	ldrb	r3, [r3, #4]
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	2103      	movs	r1, #3
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	4619      	mov	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	60da      	str	r2, [r3, #12]
	pNewGPIOPin->pGPIOx->PUPDR  |= temp ;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68d9      	ldr	r1, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	60da      	str	r2, [r3, #12]

	temp = 0 ;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]

	// configure the output type
	temp = (pNewGPIOPin->pinOutputType << ( pNewGPIOPin->pinNumber) ) ;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	7a1b      	ldrb	r3, [r3, #8]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	791b      	ldrb	r3, [r3, #4]
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	60fb      	str	r3, [r7, #12]
	pNewGPIOPin->pGPIOx->OTYPER &= ~(0x1 << pNewGPIOPin->pinNumber) ;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	791b      	ldrb	r3, [r3, #4]
 8004d12:	4619      	mov	r1, r3
 8004d14:	2301      	movs	r3, #1
 8004d16:	408b      	lsls	r3, r1
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	400a      	ands	r2, r1
 8004d22:	605a      	str	r2, [r3, #4]
	pNewGPIOPin->pGPIOx->OTYPER |= temp ;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	605a      	str	r2, [r3, #4]

	temp = 0 ;
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]

	// configure the alternate functionality
	if (pNewGPIOPin->pinMode == PIN_MODE_ALTFN)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	795b      	ldrb	r3, [r3, #5]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d131      	bne.n	8004da4 <gpio_Init+0x190>
	{
		// configure the alternate function registers
		uint8_t temp1;
		uint8_t temp2;
		temp1 = pNewGPIOPin->pinNumber  / 8 ;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	791b      	ldrb	r3, [r3, #4]
 8004d44:	08db      	lsrs	r3, r3, #3
 8004d46:	72fb      	strb	r3, [r7, #11]
		temp2 = pNewGPIOPin->pinNumber % 8 ;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	791b      	ldrb	r3, [r3, #4]
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	72bb      	strb	r3, [r7, #10]
		pNewGPIOPin->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)) ;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	7afa      	ldrb	r2, [r7, #11]
 8004d58:	3208      	adds	r2, #8
 8004d5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d5e:	7abb      	ldrb	r3, [r7, #10]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	220f      	movs	r2, #15
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	7afa      	ldrb	r2, [r7, #11]
 8004d72:	4001      	ands	r1, r0
 8004d74:	3208      	adds	r2, #8
 8004d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pNewGPIOPin->pGPIOx->AFR[temp1] |= (pNewGPIOPin->pinAltFunMode << (4 * temp2)) ;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	7afa      	ldrb	r2, [r7, #11]
 8004d80:	3208      	adds	r2, #8
 8004d82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	7a5b      	ldrb	r3, [r3, #9]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	7abb      	ldrb	r3, [r7, #10]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	4618      	mov	r0, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	7afa      	ldrb	r2, [r7, #11]
 8004d9c:	4301      	orrs	r1, r0
 8004d9e:	3208      	adds	r2, #8
 8004da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <gpio_LED_config>:

/*
 * Brief LEDs GPIO Configuration PB3(On-board Led 3(Green))
 */
void gpio_LED_config(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  //Enable GPIO port B clock
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 8004db0:	4b14      	ldr	r3, [pc, #80]	; (8004e04 <gpio_LED_config+0x58>)
 8004db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db4:	4a13      	ldr	r2, [pc, #76]	; (8004e04 <gpio_LED_config+0x58>)
 8004db6:	f043 0302 	orr.w	r3, r3, #2
 8004dba:	64d3      	str	r3, [r2, #76]	; 0x4c
  //Pin mode to output
  GPIOB->MODER &= ~(GPIO_MODER_MODE3);
 8004dbc:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <gpio_LED_config+0x5c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a11      	ldr	r2, [pc, #68]	; (8004e08 <gpio_LED_config+0x5c>)
 8004dc2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004dc6:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= (GPIO_MODER_MODE3_0);
 8004dc8:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <gpio_LED_config+0x5c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a0e      	ldr	r2, [pc, #56]	; (8004e08 <gpio_LED_config+0x5c>)
 8004dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dd2:	6013      	str	r3, [r2, #0]
  //Seting output as PushPull
  GPIOB->OTYPER &= ~(GPIO_OTYPER_ODR_3);
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <gpio_LED_config+0x5c>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	4a0b      	ldr	r2, [pc, #44]	; (8004e08 <gpio_LED_config+0x5c>)
 8004dda:	f023 0308 	bic.w	r3, r3, #8
 8004dde:	6053      	str	r3, [r2, #4]
  //Setting as High Speed Output
  GPIOB->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR3);
 8004de0:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <gpio_LED_config+0x5c>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4a08      	ldr	r2, [pc, #32]	; (8004e08 <gpio_LED_config+0x5c>)
 8004de6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004dea:	6093      	str	r3, [r2, #8]
  GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR3_1);
 8004dec:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <gpio_LED_config+0x5c>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4a05      	ldr	r2, [pc, #20]	; (8004e08 <gpio_LED_config+0x5c>)
 8004df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df6:	6093      	str	r3, [r2, #8]
}
 8004df8:	bf00      	nop
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40021000 	.word	0x40021000
 8004e08:	48000400 	.word	0x48000400

08004e0c <gpio_LED_toggleGreen>:
      GPIOB->ODR &= ~(GPIO_ODR_OD3);
    }
}

void gpio_LED_toggleGreen(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
    GPIOB->ODR ^= (GPIO_ODR_OD3);
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <gpio_LED_toggleGreen+0x1c>)
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <gpio_LED_toggleGreen+0x1c>)
 8004e16:	f083 0308 	eor.w	r3, r3, #8
 8004e1a:	6153      	str	r3, [r2, #20]
}
 8004e1c:	bf00      	nop
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	48000400 	.word	0x48000400

08004e2c <i2c_I2C1_GPIO_Config>:
I2C_HandleTypeDef hi2c1;

/*
 * @brief I2C GPIO Configuration PA9(D1)->SCL and PA10(D0)->SDA
 */
void i2c_I2C1_GPIO_Config(void){
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
	//I2C1 AF GPIO pins configuration
	GPIO_Handle_t i2cPins;
	i2cPins.pGPIOx=GPIOA;
 8004e32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e36:	607b      	str	r3, [r7, #4]
	i2cPins.pinMode=PIN_MODE_ALTFN;
 8004e38:	2302      	movs	r3, #2
 8004e3a:	727b      	strb	r3, [r7, #9]
	i2cPins.pinOutputType=PIN_OP_TYPE_OD;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	733b      	strb	r3, [r7, #12]
	i2cPins.pinPUPDControl=PIN_NO_PUPD;
 8004e40:	2300      	movs	r3, #0
 8004e42:	72fb      	strb	r3, [r7, #11]
	i2cPins.pinSpeed=PIN_SPEED_HIGH;
 8004e44:	2303      	movs	r3, #3
 8004e46:	72bb      	strb	r3, [r7, #10]
	i2cPins.pinAltFunMode=AF4;
 8004e48:	2304      	movs	r3, #4
 8004e4a:	737b      	strb	r3, [r7, #13]
	i2cPins.pinNumber=PIN_NO_9;//SCL
 8004e4c:	2309      	movs	r3, #9
 8004e4e:	723b      	strb	r3, [r7, #8]
	gpio_Init(&i2cPins);
 8004e50:	1d3b      	adds	r3, r7, #4
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fede 	bl	8004c14 <gpio_Init>
	i2cPins.pinNumber=PIN_NO_10;//SDA
 8004e58:	230a      	movs	r3, #10
 8004e5a:	723b      	strb	r3, [r7, #8]
	gpio_Init(&i2cPins);
 8004e5c:	1d3b      	adds	r3, r7, #4
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff fed8 	bl	8004c14 <gpio_Init>
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <i2c_I2C1_Config>:

/*
 * @brief I2C Peripheral Config
 */
void i2c_I2C1_Config(void){
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
	//Enable I2C1 CLK
	RCC->APB1ENR1 &= ~(RCC_APB1ENR1_I2C1EN);
 8004e70:	4b29      	ldr	r3, [pc, #164]	; (8004f18 <i2c_I2C1_Config+0xac>)
 8004e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e74:	4a28      	ldr	r2, [pc, #160]	; (8004f18 <i2c_I2C1_Config+0xac>)
 8004e76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e7a:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB1ENR1 |=  (RCC_APB1ENR1_I2C1EN);
 8004e7c:	4b26      	ldr	r3, [pc, #152]	; (8004f18 <i2c_I2C1_Config+0xac>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e80:	4a25      	ldr	r2, [pc, #148]	; (8004f18 <i2c_I2C1_Config+0xac>)
 8004e82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e86:	6593      	str	r3, [r2, #88]	; 0x58
	//Select SystemCLK as I2C1 Clock Source
	RCC-> CCIPR &= ~(RCC_CCIPR_I2C1SEL);
 8004e88:	4b23      	ldr	r3, [pc, #140]	; (8004f18 <i2c_I2C1_Config+0xac>)
 8004e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8e:	4a22      	ldr	r2, [pc, #136]	; (8004f18 <i2c_I2C1_Config+0xac>)
 8004e90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC-> CCIPR |=  (RCC_CCIPR_I2C1SEL_0);
 8004e98:	4b1f      	ldr	r3, [pc, #124]	; (8004f18 <i2c_I2C1_Config+0xac>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <i2c_I2C1_Config+0xac>)
 8004ea0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88



	hi2c1.Instance = I2C1;
 8004ea8:	4b1c      	ldr	r3, [pc, #112]	; (8004f1c <i2c_I2C1_Config+0xb0>)
 8004eaa:	4a1d      	ldr	r2, [pc, #116]	; (8004f20 <i2c_I2C1_Config+0xb4>)
 8004eac:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10C09CD5;
 8004eae:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <i2c_I2C1_Config+0xb0>)
 8004eb0:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <i2c_I2C1_Config+0xb8>)
 8004eb2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8004eb4:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <i2c_I2C1_Config+0xb0>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004eba:	4b18      	ldr	r3, [pc, #96]	; (8004f1c <i2c_I2C1_Config+0xb0>)
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ec0:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <i2c_I2C1_Config+0xb0>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8004ec6:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <i2c_I2C1_Config+0xb0>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004ecc:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <i2c_I2C1_Config+0xb0>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ed2:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <i2c_I2C1_Config+0xb0>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ed8:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <i2c_I2C1_Config+0xb0>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004ede:	480f      	ldr	r0, [pc, #60]	; (8004f1c <i2c_I2C1_Config+0xb0>)
 8004ee0:	f7fd fefc 	bl	8002cdc <HAL_I2C_Init>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <i2c_I2C1_Config+0x82>
	{
		Error_Handler();
 8004eea:	f7fd fa25 	bl	8002338 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004eee:	2100      	movs	r1, #0
 8004ef0:	480a      	ldr	r0, [pc, #40]	; (8004f1c <i2c_I2C1_Config+0xb0>)
 8004ef2:	f7fd ff98 	bl	8002e26 <HAL_I2CEx_ConfigAnalogFilter>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <i2c_I2C1_Config+0x94>
	{
		Error_Handler();
 8004efc:	f7fd fa1c 	bl	8002338 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004f00:	2100      	movs	r1, #0
 8004f02:	4806      	ldr	r0, [pc, #24]	; (8004f1c <i2c_I2C1_Config+0xb0>)
 8004f04:	f7fd ffda 	bl	8002ebc <HAL_I2CEx_ConfigDigitalFilter>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <i2c_I2C1_Config+0xa6>
	{
		Error_Handler();
 8004f0e:	f7fd fa13 	bl	8002338 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */
}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	20002234 	.word	0x20002234
 8004f20:	40005400 	.word	0x40005400
 8004f24:	10c09cd5 	.word	0x10c09cd5

08004f28 <spi_GPIO_config>:
 * @Brief SPI1 GPIO pins configuration
 * (PA5(A4)->SP1_SCK,PA6(A5)->SP1_MISO,PA7(A6)->SP1_MOSI)
 * (PA4(A3)->CS)
 */
void spi_GPIO_config(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
	//SPI AF GPIO pins configuration
	GPIO_Handle_t spiPins;
	spiPins.pGPIOx=GPIOA;
 8004f2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f32:	607b      	str	r3, [r7, #4]
	spiPins.pinMode=PIN_MODE_ALTFN;
 8004f34:	2302      	movs	r3, #2
 8004f36:	727b      	strb	r3, [r7, #9]
	spiPins.pinOutputType=PIN_OP_TYPE_PP;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	733b      	strb	r3, [r7, #12]
	spiPins.pinPUPDControl=PIN_NO_PUPD;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	72fb      	strb	r3, [r7, #11]
	spiPins.pinSpeed=PIN_SPEED_HIGH;
 8004f40:	2303      	movs	r3, #3
 8004f42:	72bb      	strb	r3, [r7, #10]
	spiPins.pinAltFunMode=AF5;
 8004f44:	2305      	movs	r3, #5
 8004f46:	737b      	strb	r3, [r7, #13]
	spiPins.pinNumber=PIN_NO_7;//MOSI
 8004f48:	2307      	movs	r3, #7
 8004f4a:	723b      	strb	r3, [r7, #8]
	gpio_Init(&spiPins);
 8004f4c:	1d3b      	adds	r3, r7, #4
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff fe60 	bl	8004c14 <gpio_Init>
	spiPins.pinNumber=PIN_NO_6;//MISO
 8004f54:	2306      	movs	r3, #6
 8004f56:	723b      	strb	r3, [r7, #8]
	spiPins.pinPUPDControl=PIN_PULL_UP;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	72fb      	strb	r3, [r7, #11]
	gpio_Init(&spiPins);
 8004f5c:	1d3b      	adds	r3, r7, #4
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff fe58 	bl	8004c14 <gpio_Init>
	spiPins.pinNumber=PIN_NO_5;//SCLK
 8004f64:	2305      	movs	r3, #5
 8004f66:	723b      	strb	r3, [r7, #8]
	spiPins.pinPUPDControl=PIN_NO_PUPD;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	72fb      	strb	r3, [r7, #11]
	gpio_Init(&spiPins);
 8004f6c:	1d3b      	adds	r3, r7, #4
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff fe50 	bl	8004c14 <gpio_Init>
	spiPins.pinNumber=PIN_NO_4;//CS
 8004f74:	2304      	movs	r3, #4
 8004f76:	723b      	strb	r3, [r7, #8]
	spiPins.pinMode=PIN_MODE_OUTPUT;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	727b      	strb	r3, [r7, #9]
	gpio_Init(&spiPins);
 8004f7c:	1d3b      	adds	r3, r7, #4
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fe48 	bl	8004c14 <gpio_Init>
	//Default value of CS is HIGH
	GPIOA->BSRR |= (GPIO_BSRR_BS4);
 8004f84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004f8e:	f043 0310 	orr.w	r3, r3, #16
 8004f92:	6193      	str	r3, [r2, #24]
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8004fa0:	4b1b      	ldr	r3, [pc, #108]	; (8005010 <MX_SPI1_Init+0x74>)
 8004fa2:	4a1c      	ldr	r2, [pc, #112]	; (8005014 <MX_SPI1_Init+0x78>)
 8004fa4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8004fa6:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <MX_SPI1_Init+0x74>)
 8004fa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004fac:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004fae:	4b18      	ldr	r3, [pc, #96]	; (8005010 <MX_SPI1_Init+0x74>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004fb4:	4b16      	ldr	r3, [pc, #88]	; (8005010 <MX_SPI1_Init+0x74>)
 8004fb6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004fba:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fbc:	4b14      	ldr	r3, [pc, #80]	; (8005010 <MX_SPI1_Init+0x74>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004fc2:	4b13      	ldr	r3, [pc, #76]	; (8005010 <MX_SPI1_Init+0x74>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8004fc8:	4b11      	ldr	r3, [pc, #68]	; (8005010 <MX_SPI1_Init+0x74>)
 8004fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fce:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004fd0:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <MX_SPI1_Init+0x74>)
 8004fd2:	2208      	movs	r2, #8
 8004fd4:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <MX_SPI1_Init+0x74>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004fdc:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <MX_SPI1_Init+0x74>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <MX_SPI1_Init+0x74>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8004fe8:	4b09      	ldr	r3, [pc, #36]	; (8005010 <MX_SPI1_Init+0x74>)
 8004fea:	2207      	movs	r2, #7
 8004fec:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004fee:	4b08      	ldr	r3, [pc, #32]	; (8005010 <MX_SPI1_Init+0x74>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004ff4:	4b06      	ldr	r3, [pc, #24]	; (8005010 <MX_SPI1_Init+0x74>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004ffa:	4805      	ldr	r0, [pc, #20]	; (8005010 <MX_SPI1_Init+0x74>)
 8004ffc:	f7fe fe0e 	bl	8003c1c <HAL_SPI_Init>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8005006:	f7fd f997 	bl	8002338 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800500a:	bf00      	nop
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20002288 	.word	0x20002288
 8005014:	40013000 	.word	0x40013000

08005018 <spi_cs_sd_write>:

/**
 * @Brief SD Chip Select Set/Reset
 */
void spi_cs_sd_write(bool state)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	71fb      	strb	r3, [r7, #7]
	if (state)
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <spi_cs_sd_write+0x22>
	{
		GPIOA->BSRR |= (GPIO_BSRR_BS4);
 8005028:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005032:	f043 0310 	orr.w	r3, r3, #16
 8005036:	6193      	str	r3, [r2, #24]
	}
	else
	{
		GPIOA->BSRR |= (GPIO_BSRR_BR4);
	}
}
 8005038:	e007      	b.n	800504a <spi_cs_sd_write+0x32>
		GPIOA->BSRR |= (GPIO_BSRR_BR4);
 800503a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005048:	6193      	str	r3, [r2, #24]
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
	...

08005058 <tim_TIM6_MIC_config>:
/**
 * @Brief TIM6 as ADC MIC
 * Generate a 48kHz Sample Rate
 */
void tim_TIM6_MIC_config(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
	//We are working with a SYSTEM Source of 16MHz
	//Enable TIM6 clock
	RCC->APB1ENR1 |=(RCC_APB1ENR1_TIM6EN);
 800505c:	4b13      	ldr	r3, [pc, #76]	; (80050ac <tim_TIM6_MIC_config+0x54>)
 800505e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005060:	4a12      	ldr	r2, [pc, #72]	; (80050ac <tim_TIM6_MIC_config+0x54>)
 8005062:	f043 0310 	orr.w	r3, r3, #16
 8005066:	6593      	str	r3, [r2, #88]	; 0x58
	//Periodic
	TIM6->CR1 &=~ (TIM_CR1_OPM);
 8005068:	4b11      	ldr	r3, [pc, #68]	; (80050b0 <tim_TIM6_MIC_config+0x58>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a10      	ldr	r2, [pc, #64]	; (80050b0 <tim_TIM6_MIC_config+0x58>)
 800506e:	f023 0308 	bic.w	r3, r3, #8
 8005072:	6013      	str	r3, [r2, #0]
	//Mode-->TRGO
	TIM6->CR2 &=~ (TIM_CR2_MMS);
 8005074:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <tim_TIM6_MIC_config+0x58>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	4a0d      	ldr	r2, [pc, #52]	; (80050b0 <tim_TIM6_MIC_config+0x58>)
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	6053      	str	r3, [r2, #4]
	TIM6->CR2 |= (TIM_CR2_MMS_1);
 8005080:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <tim_TIM6_MIC_config+0x58>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4a0a      	ldr	r2, [pc, #40]	; (80050b0 <tim_TIM6_MIC_config+0x58>)
 8005086:	f043 0320 	orr.w	r3, r3, #32
 800508a:	6053      	str	r3, [r2, #4]
	//f=44.1kHz
	TIM6->PSC = 0;//Keep APB clock Frequency
 800508c:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <tim_TIM6_MIC_config+0x58>)
 800508e:	2200      	movs	r2, #0
 8005090:	629a      	str	r2, [r3, #40]	; 0x28
	//Period
	TIM6->ARR=791-1;//76MHz/1583.3= 48kHz
 8005092:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <tim_TIM6_MIC_config+0x58>)
 8005094:	f240 3216 	movw	r2, #790	; 0x316
 8005098:	62da      	str	r2, [r3, #44]	; 0x2c
	//Update register on event
	TIM6->EGR=1;
 800509a:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <tim_TIM6_MIC_config+0x58>)
 800509c:	2201      	movs	r2, #1
 800509e:	615a      	str	r2, [r3, #20]
//	//Start timer
//	TIM6->CR1 |= (TIM_CR1_CEN);
}
 80050a0:	bf00      	nop
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40021000 	.word	0x40021000
 80050b0:	40001000 	.word	0x40001000

080050b4 <__NVIC_SetPriorityGrouping>:
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050c4:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <__NVIC_SetPriorityGrouping+0x44>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050d0:	4013      	ands	r3, r2
 80050d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050e6:	4a04      	ldr	r2, [pc, #16]	; (80050f8 <__NVIC_SetPriorityGrouping+0x44>)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	60d3      	str	r3, [r2, #12]
}
 80050ec:	bf00      	nop
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	e000ed00 	.word	0xe000ed00

080050fc <__NVIC_EnableIRQ>:
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510a:	2b00      	cmp	r3, #0
 800510c:	db0b      	blt.n	8005126 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	f003 021f 	and.w	r2, r3, #31
 8005114:	4907      	ldr	r1, [pc, #28]	; (8005134 <__NVIC_EnableIRQ+0x38>)
 8005116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	2001      	movs	r0, #1
 800511e:	fa00 f202 	lsl.w	r2, r0, r2
 8005122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	e000e100 	.word	0xe000e100

08005138 <__NVIC_SetPriority>:
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	6039      	str	r1, [r7, #0]
 8005142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005148:	2b00      	cmp	r3, #0
 800514a:	db0a      	blt.n	8005162 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	b2da      	uxtb	r2, r3
 8005150:	490c      	ldr	r1, [pc, #48]	; (8005184 <__NVIC_SetPriority+0x4c>)
 8005152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005156:	0112      	lsls	r2, r2, #4
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	440b      	add	r3, r1
 800515c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005160:	e00a      	b.n	8005178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	b2da      	uxtb	r2, r3
 8005166:	4908      	ldr	r1, [pc, #32]	; (8005188 <__NVIC_SetPriority+0x50>)
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	3b04      	subs	r3, #4
 8005170:	0112      	lsls	r2, r2, #4
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	440b      	add	r3, r1
 8005176:	761a      	strb	r2, [r3, #24]
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	e000e100 	.word	0xe000e100
 8005188:	e000ed00 	.word	0xe000ed00

0800518c <uart_UART2_GPIO_config>:
}
/*
 * @Brief UART2 GPIO Config(PA2(Tx);PA15(Rx))
 */
void uart_UART2_GPIO_config(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  // Enable PortA Clock
  RCC->AHB2ENR  |= ( RCC_AHB2ENR_GPIOAEN );
 8005190:	4b2e      	ldr	r3, [pc, #184]	; (800524c <uart_UART2_GPIO_config+0xc0>)
 8005192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005194:	4a2d      	ldr	r2, [pc, #180]	; (800524c <uart_UART2_GPIO_config+0xc0>)
 8005196:	f043 0301 	orr.w	r3, r3, #1
 800519a:	64d3      	str	r3, [r2, #76]	; 0x4c
  // Configure pins PA2, PA15 for USART2 .
  GPIOA->MODER    &= ~( ( 0x3 << ( 2 * 2 ) ) |
 800519c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80051a6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80051aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80051ae:	6013      	str	r3, [r2, #0]
      ( 0x3 << ( 15 * 2 ) ) );
  GPIOA->MODER    |=  ( ( 0x2 << ( 2 * 2 ) ) |
 80051b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80051ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051be:	f043 0320 	orr.w	r3, r3, #32
 80051c2:	6013      	str	r3, [r2, #0]
      ( 0x2 << ( 15 * 2 ) ) );
  GPIOA->OTYPER   &= ~( ( 0x1 << 2 ) |
 80051c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80051ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051d2:	f023 0304 	bic.w	r3, r3, #4
 80051d6:	6053      	str	r3, [r2, #4]
      ( 0x1 << 15 ) );
  GPIOA->OSPEEDR  &= ~( ( 0x3 << ( 2 * 2 ) ) |
 80051d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80051e2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80051e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80051ea:	6093      	str	r3, [r2, #8]
      ( 0x3 << ( 15 * 2 ) ) );
  GPIOA->OSPEEDR  |=  ( ( 0x2 << ( 2 * 2 ) ) |
 80051ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80051f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051fa:	f043 0320 	orr.w	r3, r3, #32
 80051fe:	6093      	str	r3, [r2, #8]
      ( 0x2 << ( 15 * 2 ) ) );
  GPIOA->AFR[ 0 ] &= ~( ( 0xF << ( 2 * 4 ) ) );
 8005200:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800520a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800520e:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[ 0 ] |=  ( ( 0x7 << ( 2 * 4 ) ) );
 8005210:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800521a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800521e:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[ 1 ] &= ~( ( 0xF << ( ( 15 - 8 ) * 4 ) ) );
 8005220:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800522a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800522e:	6253      	str	r3, [r2, #36]	; 0x24
  GPIOA->AFR[ 1 ] |=  ( ( 0x3 << ( ( 15 - 8 ) * 4 ) ) );
 8005230:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800523a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800523e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8005240:	bf00      	nop
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40021000 	.word	0x40021000

08005250 <uart_UART2_config>:
/*
 * @Brief UART2 Peripheral Config
 */
void uart_UART2_config(uint32_t SYSTEM_CLK)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  //// Enable floating-point unit.
  //SCB->CPACR    |=  ( 0xFUL << (20U) );
  // Enable UART2 Clock
  RCC->APB1ENR1 |= ( RCC_APB1ENR1_USART2EN );
 8005258:	4b28      	ldr	r3, [pc, #160]	; (80052fc <uart_UART2_config+0xac>)
 800525a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525c:	4a27      	ldr	r2, [pc, #156]	; (80052fc <uart_UART2_config+0xac>)
 800525e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005262:	6593      	str	r3, [r2, #88]	; 0x58
  // Set word length to 8-bits
  USART2->CR1  &= ~(USART_CR1_M1);
 8005264:	4b26      	ldr	r3, [pc, #152]	; (8005300 <uart_UART2_config+0xb0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a25      	ldr	r2, [pc, #148]	; (8005300 <uart_UART2_config+0xb0>)
 800526a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800526e:	6013      	str	r3, [r2, #0]
  // Set baud rate to 9600 Hz
  USART2->BRR = SYSTEM_CLK/9600;
 8005270:	4a23      	ldr	r2, [pc, #140]	; (8005300 <uart_UART2_config+0xb0>)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4923      	ldr	r1, [pc, #140]	; (8005304 <uart_UART2_config+0xb4>)
 8005276:	fba1 1303 	umull	r1, r3, r1, r3
 800527a:	0a9b      	lsrs	r3, r3, #10
 800527c:	60d3      	str	r3, [r2, #12]
  // Parity control disabled
  USART2->CR1  &= ~(USART_CR1_PCE);
 800527e:	4b20      	ldr	r3, [pc, #128]	; (8005300 <uart_UART2_config+0xb0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1f      	ldr	r2, [pc, #124]	; (8005300 <uart_UART2_config+0xb0>)
 8005284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005288:	6013      	str	r3, [r2, #0]
  // Stop bits to 1
  USART2->CR2  &= ~(USART_CR2_STOP);
 800528a:	4b1d      	ldr	r3, [pc, #116]	; (8005300 <uart_UART2_config+0xb0>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	4a1c      	ldr	r2, [pc, #112]	; (8005300 <uart_UART2_config+0xb0>)
 8005290:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005294:	6053      	str	r3, [r2, #4]
  // Disable HW flow control
  USART2->CR3  &= ~(USART_CR3_CTSE);
 8005296:	4b1a      	ldr	r3, [pc, #104]	; (8005300 <uart_UART2_config+0xb0>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	4a19      	ldr	r2, [pc, #100]	; (8005300 <uart_UART2_config+0xb0>)
 800529c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052a0:	6093      	str	r3, [r2, #8]
  USART2->CR3  &= ~(USART_CR3_RTSE);
 80052a2:	4b17      	ldr	r3, [pc, #92]	; (8005300 <uart_UART2_config+0xb0>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	4a16      	ldr	r2, [pc, #88]	; (8005300 <uart_UART2_config+0xb0>)
 80052a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ac:	6093      	str	r3, [r2, #8]
  // Clear flags
  USART2->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80052ae:	4b14      	ldr	r3, [pc, #80]	; (8005300 <uart_UART2_config+0xb0>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	4a13      	ldr	r2, [pc, #76]	; (8005300 <uart_UART2_config+0xb0>)
 80052b4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80052b8:	6053      	str	r3, [r2, #4]
  USART2->CR3 &= ~(USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN );
 80052ba:	4b11      	ldr	r3, [pc, #68]	; (8005300 <uart_UART2_config+0xb0>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	4a10      	ldr	r2, [pc, #64]	; (8005300 <uart_UART2_config+0xb0>)
 80052c0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80052c4:	6093      	str	r3, [r2, #8]
  // Enable UART2 peripheral
  USART2->CR1 |= ( USART_CR1_RE | USART_CR1_TE | USART_CR1_UE );
 80052c6:	4b0e      	ldr	r3, [pc, #56]	; (8005300 <uart_UART2_config+0xb0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a0d      	ldr	r2, [pc, #52]	; (8005300 <uart_UART2_config+0xb0>)
 80052cc:	f043 030d 	orr.w	r3, r3, #13
 80052d0:	6013      	str	r3, [r2, #0]
  // Enable Rx ready to read interruption
  USART2->CR1 |= ( USART_CR1_RXNEIE );
 80052d2:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <uart_UART2_config+0xb0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a0a      	ldr	r2, [pc, #40]	; (8005300 <uart_UART2_config+0xb0>)
 80052d8:	f043 0320 	orr.w	r3, r3, #32
 80052dc:	6013      	str	r3, [r2, #0]
  //All priority bits assigned to the preempt priority group
  NVIC_SetPriorityGrouping(0U);
 80052de:	2000      	movs	r0, #0
 80052e0:	f7ff fee8 	bl	80050b4 <__NVIC_SetPriorityGrouping>
  //Priority of the interrupt (NVIC)
  NVIC_SetPriority(USART2_IRQn,1);
 80052e4:	2101      	movs	r1, #1
 80052e6:	2026      	movs	r0, #38	; 0x26
 80052e8:	f7ff ff26 	bl	8005138 <__NVIC_SetPriority>
  //Enable the interrupt
  NVIC_EnableIRQ(USART2_IRQn);
 80052ec:	2026      	movs	r0, #38	; 0x26
 80052ee:	f7ff ff05 	bl	80050fc <__NVIC_EnableIRQ>

}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40021000 	.word	0x40021000
 8005300:	40004400 	.word	0x40004400
 8005304:	1b4e81b5 	.word	0x1b4e81b5

08005308 <uart_UART2_TX>:
/*
 * @Brief UART2 Transmit
 */
bool uart_UART2_TX(uint8_t *data,uint8_t len,uint32_t timeout)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	460b      	mov	r3, r1
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	72fb      	strb	r3, [r7, #11]
  //Write to DR as TXE flag is HIGH (Tx buffer Empty)
  uint8_t dataIdx = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	75fb      	strb	r3, [r7, #23]
  uint32_t startTick = HAL_GetTick();
 800531a:	f7fd fa5f 	bl	80027dc <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]
  while(dataIdx<len)
 8005320:	e01a      	b.n	8005358 <uart_UART2_TX+0x50>
  {
    if(USART2->ISR & USART_ISR_TXE) //Tx buffer empty
 8005322:	4b1a      	ldr	r3, [pc, #104]	; (800538c <uart_UART2_TX+0x84>)
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <uart_UART2_TX+0x3c>
    {
      USART2->TDR = data[dataIdx];
 800532e:	7dfb      	ldrb	r3, [r7, #23]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	781a      	ldrb	r2, [r3, #0]
 8005336:	4b15      	ldr	r3, [pc, #84]	; (800538c <uart_UART2_TX+0x84>)
 8005338:	b292      	uxth	r2, r2
 800533a:	851a      	strh	r2, [r3, #40]	; 0x28
      dataIdx++;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
 800533e:	3301      	adds	r3, #1
 8005340:	75fb      	strb	r3, [r7, #23]
 8005342:	e009      	b.n	8005358 <uart_UART2_TX+0x50>
    }
    else //Manage timeout
    {
      if((HAL_GetTick() - startTick)>= timeout) return false;
 8005344:	f7fd fa4a 	bl	80027dc <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	429a      	cmp	r2, r3
 8005352:	d801      	bhi.n	8005358 <uart_UART2_TX+0x50>
 8005354:	2300      	movs	r3, #0
 8005356:	e015      	b.n	8005384 <uart_UART2_TX+0x7c>
  while(dataIdx<len)
 8005358:	7dfa      	ldrb	r2, [r7, #23]
 800535a:	7afb      	ldrb	r3, [r7, #11]
 800535c:	429a      	cmp	r2, r3
 800535e:	d3e0      	bcc.n	8005322 <uart_UART2_TX+0x1a>
    }
  }
  //Wait for busy flag
  while((USART2->ISR & USART_ISR_TC))
 8005360:	e009      	b.n	8005376 <uart_UART2_TX+0x6e>
  {
    if((HAL_GetTick() - startTick)>= timeout) return false;
 8005362:	f7fd fa3b 	bl	80027dc <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	429a      	cmp	r2, r3
 8005370:	d801      	bhi.n	8005376 <uart_UART2_TX+0x6e>
 8005372:	2300      	movs	r3, #0
 8005374:	e006      	b.n	8005384 <uart_UART2_TX+0x7c>
  while((USART2->ISR & USART_ISR_TC))
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <uart_UART2_TX+0x84>)
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1ef      	bne.n	8005362 <uart_UART2_TX+0x5a>
  }
  return true;
 8005382:	2301      	movs	r3, #1

}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40004400 	.word	0x40004400

08005390 <__errno>:
 8005390:	4b01      	ldr	r3, [pc, #4]	; (8005398 <__errno+0x8>)
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	20000018 	.word	0x20000018

0800539c <__libc_init_array>:
 800539c:	b570      	push	{r4, r5, r6, lr}
 800539e:	4d0d      	ldr	r5, [pc, #52]	; (80053d4 <__libc_init_array+0x38>)
 80053a0:	4c0d      	ldr	r4, [pc, #52]	; (80053d8 <__libc_init_array+0x3c>)
 80053a2:	1b64      	subs	r4, r4, r5
 80053a4:	10a4      	asrs	r4, r4, #2
 80053a6:	2600      	movs	r6, #0
 80053a8:	42a6      	cmp	r6, r4
 80053aa:	d109      	bne.n	80053c0 <__libc_init_array+0x24>
 80053ac:	4d0b      	ldr	r5, [pc, #44]	; (80053dc <__libc_init_array+0x40>)
 80053ae:	4c0c      	ldr	r4, [pc, #48]	; (80053e0 <__libc_init_array+0x44>)
 80053b0:	f002 fdc2 	bl	8007f38 <_init>
 80053b4:	1b64      	subs	r4, r4, r5
 80053b6:	10a4      	asrs	r4, r4, #2
 80053b8:	2600      	movs	r6, #0
 80053ba:	42a6      	cmp	r6, r4
 80053bc:	d105      	bne.n	80053ca <__libc_init_array+0x2e>
 80053be:	bd70      	pop	{r4, r5, r6, pc}
 80053c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c4:	4798      	blx	r3
 80053c6:	3601      	adds	r6, #1
 80053c8:	e7ee      	b.n	80053a8 <__libc_init_array+0xc>
 80053ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ce:	4798      	blx	r3
 80053d0:	3601      	adds	r6, #1
 80053d2:	e7f2      	b.n	80053ba <__libc_init_array+0x1e>
 80053d4:	08008a2c 	.word	0x08008a2c
 80053d8:	08008a2c 	.word	0x08008a2c
 80053dc:	08008a2c 	.word	0x08008a2c
 80053e0:	08008a30 	.word	0x08008a30

080053e4 <memcpy>:
 80053e4:	440a      	add	r2, r1
 80053e6:	4291      	cmp	r1, r2
 80053e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80053ec:	d100      	bne.n	80053f0 <memcpy+0xc>
 80053ee:	4770      	bx	lr
 80053f0:	b510      	push	{r4, lr}
 80053f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053fa:	4291      	cmp	r1, r2
 80053fc:	d1f9      	bne.n	80053f2 <memcpy+0xe>
 80053fe:	bd10      	pop	{r4, pc}

08005400 <memset>:
 8005400:	4402      	add	r2, r0
 8005402:	4603      	mov	r3, r0
 8005404:	4293      	cmp	r3, r2
 8005406:	d100      	bne.n	800540a <memset+0xa>
 8005408:	4770      	bx	lr
 800540a:	f803 1b01 	strb.w	r1, [r3], #1
 800540e:	e7f9      	b.n	8005404 <memset+0x4>

08005410 <__cvt>:
 8005410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005414:	ec55 4b10 	vmov	r4, r5, d0
 8005418:	2d00      	cmp	r5, #0
 800541a:	460e      	mov	r6, r1
 800541c:	4619      	mov	r1, r3
 800541e:	462b      	mov	r3, r5
 8005420:	bfbb      	ittet	lt
 8005422:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005426:	461d      	movlt	r5, r3
 8005428:	2300      	movge	r3, #0
 800542a:	232d      	movlt	r3, #45	; 0x2d
 800542c:	700b      	strb	r3, [r1, #0]
 800542e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005430:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005434:	4691      	mov	r9, r2
 8005436:	f023 0820 	bic.w	r8, r3, #32
 800543a:	bfbc      	itt	lt
 800543c:	4622      	movlt	r2, r4
 800543e:	4614      	movlt	r4, r2
 8005440:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005444:	d005      	beq.n	8005452 <__cvt+0x42>
 8005446:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800544a:	d100      	bne.n	800544e <__cvt+0x3e>
 800544c:	3601      	adds	r6, #1
 800544e:	2102      	movs	r1, #2
 8005450:	e000      	b.n	8005454 <__cvt+0x44>
 8005452:	2103      	movs	r1, #3
 8005454:	ab03      	add	r3, sp, #12
 8005456:	9301      	str	r3, [sp, #4]
 8005458:	ab02      	add	r3, sp, #8
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	ec45 4b10 	vmov	d0, r4, r5
 8005460:	4653      	mov	r3, sl
 8005462:	4632      	mov	r2, r6
 8005464:	f000 fe18 	bl	8006098 <_dtoa_r>
 8005468:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800546c:	4607      	mov	r7, r0
 800546e:	d102      	bne.n	8005476 <__cvt+0x66>
 8005470:	f019 0f01 	tst.w	r9, #1
 8005474:	d022      	beq.n	80054bc <__cvt+0xac>
 8005476:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800547a:	eb07 0906 	add.w	r9, r7, r6
 800547e:	d110      	bne.n	80054a2 <__cvt+0x92>
 8005480:	783b      	ldrb	r3, [r7, #0]
 8005482:	2b30      	cmp	r3, #48	; 0x30
 8005484:	d10a      	bne.n	800549c <__cvt+0x8c>
 8005486:	2200      	movs	r2, #0
 8005488:	2300      	movs	r3, #0
 800548a:	4620      	mov	r0, r4
 800548c:	4629      	mov	r1, r5
 800548e:	f7fb fb1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005492:	b918      	cbnz	r0, 800549c <__cvt+0x8c>
 8005494:	f1c6 0601 	rsb	r6, r6, #1
 8005498:	f8ca 6000 	str.w	r6, [sl]
 800549c:	f8da 3000 	ldr.w	r3, [sl]
 80054a0:	4499      	add	r9, r3
 80054a2:	2200      	movs	r2, #0
 80054a4:	2300      	movs	r3, #0
 80054a6:	4620      	mov	r0, r4
 80054a8:	4629      	mov	r1, r5
 80054aa:	f7fb fb0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80054ae:	b108      	cbz	r0, 80054b4 <__cvt+0xa4>
 80054b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80054b4:	2230      	movs	r2, #48	; 0x30
 80054b6:	9b03      	ldr	r3, [sp, #12]
 80054b8:	454b      	cmp	r3, r9
 80054ba:	d307      	bcc.n	80054cc <__cvt+0xbc>
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054c0:	1bdb      	subs	r3, r3, r7
 80054c2:	4638      	mov	r0, r7
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	b004      	add	sp, #16
 80054c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054cc:	1c59      	adds	r1, r3, #1
 80054ce:	9103      	str	r1, [sp, #12]
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	e7f0      	b.n	80054b6 <__cvt+0xa6>

080054d4 <__exponent>:
 80054d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054d6:	4603      	mov	r3, r0
 80054d8:	2900      	cmp	r1, #0
 80054da:	bfb8      	it	lt
 80054dc:	4249      	neglt	r1, r1
 80054de:	f803 2b02 	strb.w	r2, [r3], #2
 80054e2:	bfb4      	ite	lt
 80054e4:	222d      	movlt	r2, #45	; 0x2d
 80054e6:	222b      	movge	r2, #43	; 0x2b
 80054e8:	2909      	cmp	r1, #9
 80054ea:	7042      	strb	r2, [r0, #1]
 80054ec:	dd2a      	ble.n	8005544 <__exponent+0x70>
 80054ee:	f10d 0407 	add.w	r4, sp, #7
 80054f2:	46a4      	mov	ip, r4
 80054f4:	270a      	movs	r7, #10
 80054f6:	46a6      	mov	lr, r4
 80054f8:	460a      	mov	r2, r1
 80054fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80054fe:	fb07 1516 	mls	r5, r7, r6, r1
 8005502:	3530      	adds	r5, #48	; 0x30
 8005504:	2a63      	cmp	r2, #99	; 0x63
 8005506:	f104 34ff 	add.w	r4, r4, #4294967295
 800550a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800550e:	4631      	mov	r1, r6
 8005510:	dcf1      	bgt.n	80054f6 <__exponent+0x22>
 8005512:	3130      	adds	r1, #48	; 0x30
 8005514:	f1ae 0502 	sub.w	r5, lr, #2
 8005518:	f804 1c01 	strb.w	r1, [r4, #-1]
 800551c:	1c44      	adds	r4, r0, #1
 800551e:	4629      	mov	r1, r5
 8005520:	4561      	cmp	r1, ip
 8005522:	d30a      	bcc.n	800553a <__exponent+0x66>
 8005524:	f10d 0209 	add.w	r2, sp, #9
 8005528:	eba2 020e 	sub.w	r2, r2, lr
 800552c:	4565      	cmp	r5, ip
 800552e:	bf88      	it	hi
 8005530:	2200      	movhi	r2, #0
 8005532:	4413      	add	r3, r2
 8005534:	1a18      	subs	r0, r3, r0
 8005536:	b003      	add	sp, #12
 8005538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800553a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800553e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005542:	e7ed      	b.n	8005520 <__exponent+0x4c>
 8005544:	2330      	movs	r3, #48	; 0x30
 8005546:	3130      	adds	r1, #48	; 0x30
 8005548:	7083      	strb	r3, [r0, #2]
 800554a:	70c1      	strb	r1, [r0, #3]
 800554c:	1d03      	adds	r3, r0, #4
 800554e:	e7f1      	b.n	8005534 <__exponent+0x60>

08005550 <_printf_float>:
 8005550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005554:	ed2d 8b02 	vpush	{d8}
 8005558:	b08d      	sub	sp, #52	; 0x34
 800555a:	460c      	mov	r4, r1
 800555c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005560:	4616      	mov	r6, r2
 8005562:	461f      	mov	r7, r3
 8005564:	4605      	mov	r5, r0
 8005566:	f001 fd3d 	bl	8006fe4 <_localeconv_r>
 800556a:	f8d0 a000 	ldr.w	sl, [r0]
 800556e:	4650      	mov	r0, sl
 8005570:	f7fa fe2e 	bl	80001d0 <strlen>
 8005574:	2300      	movs	r3, #0
 8005576:	930a      	str	r3, [sp, #40]	; 0x28
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	9305      	str	r3, [sp, #20]
 800557c:	f8d8 3000 	ldr.w	r3, [r8]
 8005580:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005584:	3307      	adds	r3, #7
 8005586:	f023 0307 	bic.w	r3, r3, #7
 800558a:	f103 0208 	add.w	r2, r3, #8
 800558e:	f8c8 2000 	str.w	r2, [r8]
 8005592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005596:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800559a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800559e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055a2:	9307      	str	r3, [sp, #28]
 80055a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80055a8:	ee08 0a10 	vmov	s16, r0
 80055ac:	4b9f      	ldr	r3, [pc, #636]	; (800582c <_printf_float+0x2dc>)
 80055ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055b2:	f04f 32ff 	mov.w	r2, #4294967295
 80055b6:	f7fb fab9 	bl	8000b2c <__aeabi_dcmpun>
 80055ba:	bb88      	cbnz	r0, 8005620 <_printf_float+0xd0>
 80055bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055c0:	4b9a      	ldr	r3, [pc, #616]	; (800582c <_printf_float+0x2dc>)
 80055c2:	f04f 32ff 	mov.w	r2, #4294967295
 80055c6:	f7fb fa93 	bl	8000af0 <__aeabi_dcmple>
 80055ca:	bb48      	cbnz	r0, 8005620 <_printf_float+0xd0>
 80055cc:	2200      	movs	r2, #0
 80055ce:	2300      	movs	r3, #0
 80055d0:	4640      	mov	r0, r8
 80055d2:	4649      	mov	r1, r9
 80055d4:	f7fb fa82 	bl	8000adc <__aeabi_dcmplt>
 80055d8:	b110      	cbz	r0, 80055e0 <_printf_float+0x90>
 80055da:	232d      	movs	r3, #45	; 0x2d
 80055dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055e0:	4b93      	ldr	r3, [pc, #588]	; (8005830 <_printf_float+0x2e0>)
 80055e2:	4894      	ldr	r0, [pc, #592]	; (8005834 <_printf_float+0x2e4>)
 80055e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80055e8:	bf94      	ite	ls
 80055ea:	4698      	movls	r8, r3
 80055ec:	4680      	movhi	r8, r0
 80055ee:	2303      	movs	r3, #3
 80055f0:	6123      	str	r3, [r4, #16]
 80055f2:	9b05      	ldr	r3, [sp, #20]
 80055f4:	f023 0204 	bic.w	r2, r3, #4
 80055f8:	6022      	str	r2, [r4, #0]
 80055fa:	f04f 0900 	mov.w	r9, #0
 80055fe:	9700      	str	r7, [sp, #0]
 8005600:	4633      	mov	r3, r6
 8005602:	aa0b      	add	r2, sp, #44	; 0x2c
 8005604:	4621      	mov	r1, r4
 8005606:	4628      	mov	r0, r5
 8005608:	f000 f9d8 	bl	80059bc <_printf_common>
 800560c:	3001      	adds	r0, #1
 800560e:	f040 8090 	bne.w	8005732 <_printf_float+0x1e2>
 8005612:	f04f 30ff 	mov.w	r0, #4294967295
 8005616:	b00d      	add	sp, #52	; 0x34
 8005618:	ecbd 8b02 	vpop	{d8}
 800561c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005620:	4642      	mov	r2, r8
 8005622:	464b      	mov	r3, r9
 8005624:	4640      	mov	r0, r8
 8005626:	4649      	mov	r1, r9
 8005628:	f7fb fa80 	bl	8000b2c <__aeabi_dcmpun>
 800562c:	b140      	cbz	r0, 8005640 <_printf_float+0xf0>
 800562e:	464b      	mov	r3, r9
 8005630:	2b00      	cmp	r3, #0
 8005632:	bfbc      	itt	lt
 8005634:	232d      	movlt	r3, #45	; 0x2d
 8005636:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800563a:	487f      	ldr	r0, [pc, #508]	; (8005838 <_printf_float+0x2e8>)
 800563c:	4b7f      	ldr	r3, [pc, #508]	; (800583c <_printf_float+0x2ec>)
 800563e:	e7d1      	b.n	80055e4 <_printf_float+0x94>
 8005640:	6863      	ldr	r3, [r4, #4]
 8005642:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005646:	9206      	str	r2, [sp, #24]
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	d13f      	bne.n	80056cc <_printf_float+0x17c>
 800564c:	2306      	movs	r3, #6
 800564e:	6063      	str	r3, [r4, #4]
 8005650:	9b05      	ldr	r3, [sp, #20]
 8005652:	6861      	ldr	r1, [r4, #4]
 8005654:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005658:	2300      	movs	r3, #0
 800565a:	9303      	str	r3, [sp, #12]
 800565c:	ab0a      	add	r3, sp, #40	; 0x28
 800565e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005662:	ab09      	add	r3, sp, #36	; 0x24
 8005664:	ec49 8b10 	vmov	d0, r8, r9
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	6022      	str	r2, [r4, #0]
 800566c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005670:	4628      	mov	r0, r5
 8005672:	f7ff fecd 	bl	8005410 <__cvt>
 8005676:	9b06      	ldr	r3, [sp, #24]
 8005678:	9909      	ldr	r1, [sp, #36]	; 0x24
 800567a:	2b47      	cmp	r3, #71	; 0x47
 800567c:	4680      	mov	r8, r0
 800567e:	d108      	bne.n	8005692 <_printf_float+0x142>
 8005680:	1cc8      	adds	r0, r1, #3
 8005682:	db02      	blt.n	800568a <_printf_float+0x13a>
 8005684:	6863      	ldr	r3, [r4, #4]
 8005686:	4299      	cmp	r1, r3
 8005688:	dd41      	ble.n	800570e <_printf_float+0x1be>
 800568a:	f1ab 0b02 	sub.w	fp, fp, #2
 800568e:	fa5f fb8b 	uxtb.w	fp, fp
 8005692:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005696:	d820      	bhi.n	80056da <_printf_float+0x18a>
 8005698:	3901      	subs	r1, #1
 800569a:	465a      	mov	r2, fp
 800569c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056a0:	9109      	str	r1, [sp, #36]	; 0x24
 80056a2:	f7ff ff17 	bl	80054d4 <__exponent>
 80056a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056a8:	1813      	adds	r3, r2, r0
 80056aa:	2a01      	cmp	r2, #1
 80056ac:	4681      	mov	r9, r0
 80056ae:	6123      	str	r3, [r4, #16]
 80056b0:	dc02      	bgt.n	80056b8 <_printf_float+0x168>
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	07d2      	lsls	r2, r2, #31
 80056b6:	d501      	bpl.n	80056bc <_printf_float+0x16c>
 80056b8:	3301      	adds	r3, #1
 80056ba:	6123      	str	r3, [r4, #16]
 80056bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d09c      	beq.n	80055fe <_printf_float+0xae>
 80056c4:	232d      	movs	r3, #45	; 0x2d
 80056c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ca:	e798      	b.n	80055fe <_printf_float+0xae>
 80056cc:	9a06      	ldr	r2, [sp, #24]
 80056ce:	2a47      	cmp	r2, #71	; 0x47
 80056d0:	d1be      	bne.n	8005650 <_printf_float+0x100>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1bc      	bne.n	8005650 <_printf_float+0x100>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e7b9      	b.n	800564e <_printf_float+0xfe>
 80056da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056de:	d118      	bne.n	8005712 <_printf_float+0x1c2>
 80056e0:	2900      	cmp	r1, #0
 80056e2:	6863      	ldr	r3, [r4, #4]
 80056e4:	dd0b      	ble.n	80056fe <_printf_float+0x1ae>
 80056e6:	6121      	str	r1, [r4, #16]
 80056e8:	b913      	cbnz	r3, 80056f0 <_printf_float+0x1a0>
 80056ea:	6822      	ldr	r2, [r4, #0]
 80056ec:	07d0      	lsls	r0, r2, #31
 80056ee:	d502      	bpl.n	80056f6 <_printf_float+0x1a6>
 80056f0:	3301      	adds	r3, #1
 80056f2:	440b      	add	r3, r1
 80056f4:	6123      	str	r3, [r4, #16]
 80056f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80056f8:	f04f 0900 	mov.w	r9, #0
 80056fc:	e7de      	b.n	80056bc <_printf_float+0x16c>
 80056fe:	b913      	cbnz	r3, 8005706 <_printf_float+0x1b6>
 8005700:	6822      	ldr	r2, [r4, #0]
 8005702:	07d2      	lsls	r2, r2, #31
 8005704:	d501      	bpl.n	800570a <_printf_float+0x1ba>
 8005706:	3302      	adds	r3, #2
 8005708:	e7f4      	b.n	80056f4 <_printf_float+0x1a4>
 800570a:	2301      	movs	r3, #1
 800570c:	e7f2      	b.n	80056f4 <_printf_float+0x1a4>
 800570e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005714:	4299      	cmp	r1, r3
 8005716:	db05      	blt.n	8005724 <_printf_float+0x1d4>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	6121      	str	r1, [r4, #16]
 800571c:	07d8      	lsls	r0, r3, #31
 800571e:	d5ea      	bpl.n	80056f6 <_printf_float+0x1a6>
 8005720:	1c4b      	adds	r3, r1, #1
 8005722:	e7e7      	b.n	80056f4 <_printf_float+0x1a4>
 8005724:	2900      	cmp	r1, #0
 8005726:	bfd4      	ite	le
 8005728:	f1c1 0202 	rsble	r2, r1, #2
 800572c:	2201      	movgt	r2, #1
 800572e:	4413      	add	r3, r2
 8005730:	e7e0      	b.n	80056f4 <_printf_float+0x1a4>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	055a      	lsls	r2, r3, #21
 8005736:	d407      	bmi.n	8005748 <_printf_float+0x1f8>
 8005738:	6923      	ldr	r3, [r4, #16]
 800573a:	4642      	mov	r2, r8
 800573c:	4631      	mov	r1, r6
 800573e:	4628      	mov	r0, r5
 8005740:	47b8      	blx	r7
 8005742:	3001      	adds	r0, #1
 8005744:	d12c      	bne.n	80057a0 <_printf_float+0x250>
 8005746:	e764      	b.n	8005612 <_printf_float+0xc2>
 8005748:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800574c:	f240 80e0 	bls.w	8005910 <_printf_float+0x3c0>
 8005750:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005754:	2200      	movs	r2, #0
 8005756:	2300      	movs	r3, #0
 8005758:	f7fb f9b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800575c:	2800      	cmp	r0, #0
 800575e:	d034      	beq.n	80057ca <_printf_float+0x27a>
 8005760:	4a37      	ldr	r2, [pc, #220]	; (8005840 <_printf_float+0x2f0>)
 8005762:	2301      	movs	r3, #1
 8005764:	4631      	mov	r1, r6
 8005766:	4628      	mov	r0, r5
 8005768:	47b8      	blx	r7
 800576a:	3001      	adds	r0, #1
 800576c:	f43f af51 	beq.w	8005612 <_printf_float+0xc2>
 8005770:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005774:	429a      	cmp	r2, r3
 8005776:	db02      	blt.n	800577e <_printf_float+0x22e>
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	07d8      	lsls	r0, r3, #31
 800577c:	d510      	bpl.n	80057a0 <_printf_float+0x250>
 800577e:	ee18 3a10 	vmov	r3, s16
 8005782:	4652      	mov	r2, sl
 8005784:	4631      	mov	r1, r6
 8005786:	4628      	mov	r0, r5
 8005788:	47b8      	blx	r7
 800578a:	3001      	adds	r0, #1
 800578c:	f43f af41 	beq.w	8005612 <_printf_float+0xc2>
 8005790:	f04f 0800 	mov.w	r8, #0
 8005794:	f104 091a 	add.w	r9, r4, #26
 8005798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800579a:	3b01      	subs	r3, #1
 800579c:	4543      	cmp	r3, r8
 800579e:	dc09      	bgt.n	80057b4 <_printf_float+0x264>
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	079b      	lsls	r3, r3, #30
 80057a4:	f100 8105 	bmi.w	80059b2 <_printf_float+0x462>
 80057a8:	68e0      	ldr	r0, [r4, #12]
 80057aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057ac:	4298      	cmp	r0, r3
 80057ae:	bfb8      	it	lt
 80057b0:	4618      	movlt	r0, r3
 80057b2:	e730      	b.n	8005616 <_printf_float+0xc6>
 80057b4:	2301      	movs	r3, #1
 80057b6:	464a      	mov	r2, r9
 80057b8:	4631      	mov	r1, r6
 80057ba:	4628      	mov	r0, r5
 80057bc:	47b8      	blx	r7
 80057be:	3001      	adds	r0, #1
 80057c0:	f43f af27 	beq.w	8005612 <_printf_float+0xc2>
 80057c4:	f108 0801 	add.w	r8, r8, #1
 80057c8:	e7e6      	b.n	8005798 <_printf_float+0x248>
 80057ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	dc39      	bgt.n	8005844 <_printf_float+0x2f4>
 80057d0:	4a1b      	ldr	r2, [pc, #108]	; (8005840 <_printf_float+0x2f0>)
 80057d2:	2301      	movs	r3, #1
 80057d4:	4631      	mov	r1, r6
 80057d6:	4628      	mov	r0, r5
 80057d8:	47b8      	blx	r7
 80057da:	3001      	adds	r0, #1
 80057dc:	f43f af19 	beq.w	8005612 <_printf_float+0xc2>
 80057e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057e4:	4313      	orrs	r3, r2
 80057e6:	d102      	bne.n	80057ee <_printf_float+0x29e>
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	07d9      	lsls	r1, r3, #31
 80057ec:	d5d8      	bpl.n	80057a0 <_printf_float+0x250>
 80057ee:	ee18 3a10 	vmov	r3, s16
 80057f2:	4652      	mov	r2, sl
 80057f4:	4631      	mov	r1, r6
 80057f6:	4628      	mov	r0, r5
 80057f8:	47b8      	blx	r7
 80057fa:	3001      	adds	r0, #1
 80057fc:	f43f af09 	beq.w	8005612 <_printf_float+0xc2>
 8005800:	f04f 0900 	mov.w	r9, #0
 8005804:	f104 0a1a 	add.w	sl, r4, #26
 8005808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800580a:	425b      	negs	r3, r3
 800580c:	454b      	cmp	r3, r9
 800580e:	dc01      	bgt.n	8005814 <_printf_float+0x2c4>
 8005810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005812:	e792      	b.n	800573a <_printf_float+0x1ea>
 8005814:	2301      	movs	r3, #1
 8005816:	4652      	mov	r2, sl
 8005818:	4631      	mov	r1, r6
 800581a:	4628      	mov	r0, r5
 800581c:	47b8      	blx	r7
 800581e:	3001      	adds	r0, #1
 8005820:	f43f aef7 	beq.w	8005612 <_printf_float+0xc2>
 8005824:	f109 0901 	add.w	r9, r9, #1
 8005828:	e7ee      	b.n	8005808 <_printf_float+0x2b8>
 800582a:	bf00      	nop
 800582c:	7fefffff 	.word	0x7fefffff
 8005830:	08008654 	.word	0x08008654
 8005834:	08008658 	.word	0x08008658
 8005838:	08008660 	.word	0x08008660
 800583c:	0800865c 	.word	0x0800865c
 8005840:	08008664 	.word	0x08008664
 8005844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005846:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005848:	429a      	cmp	r2, r3
 800584a:	bfa8      	it	ge
 800584c:	461a      	movge	r2, r3
 800584e:	2a00      	cmp	r2, #0
 8005850:	4691      	mov	r9, r2
 8005852:	dc37      	bgt.n	80058c4 <_printf_float+0x374>
 8005854:	f04f 0b00 	mov.w	fp, #0
 8005858:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800585c:	f104 021a 	add.w	r2, r4, #26
 8005860:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005862:	9305      	str	r3, [sp, #20]
 8005864:	eba3 0309 	sub.w	r3, r3, r9
 8005868:	455b      	cmp	r3, fp
 800586a:	dc33      	bgt.n	80058d4 <_printf_float+0x384>
 800586c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005870:	429a      	cmp	r2, r3
 8005872:	db3b      	blt.n	80058ec <_printf_float+0x39c>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	07da      	lsls	r2, r3, #31
 8005878:	d438      	bmi.n	80058ec <_printf_float+0x39c>
 800587a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800587c:	9a05      	ldr	r2, [sp, #20]
 800587e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005880:	1a9a      	subs	r2, r3, r2
 8005882:	eba3 0901 	sub.w	r9, r3, r1
 8005886:	4591      	cmp	r9, r2
 8005888:	bfa8      	it	ge
 800588a:	4691      	movge	r9, r2
 800588c:	f1b9 0f00 	cmp.w	r9, #0
 8005890:	dc35      	bgt.n	80058fe <_printf_float+0x3ae>
 8005892:	f04f 0800 	mov.w	r8, #0
 8005896:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800589a:	f104 0a1a 	add.w	sl, r4, #26
 800589e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	eba3 0309 	sub.w	r3, r3, r9
 80058a8:	4543      	cmp	r3, r8
 80058aa:	f77f af79 	ble.w	80057a0 <_printf_float+0x250>
 80058ae:	2301      	movs	r3, #1
 80058b0:	4652      	mov	r2, sl
 80058b2:	4631      	mov	r1, r6
 80058b4:	4628      	mov	r0, r5
 80058b6:	47b8      	blx	r7
 80058b8:	3001      	adds	r0, #1
 80058ba:	f43f aeaa 	beq.w	8005612 <_printf_float+0xc2>
 80058be:	f108 0801 	add.w	r8, r8, #1
 80058c2:	e7ec      	b.n	800589e <_printf_float+0x34e>
 80058c4:	4613      	mov	r3, r2
 80058c6:	4631      	mov	r1, r6
 80058c8:	4642      	mov	r2, r8
 80058ca:	4628      	mov	r0, r5
 80058cc:	47b8      	blx	r7
 80058ce:	3001      	adds	r0, #1
 80058d0:	d1c0      	bne.n	8005854 <_printf_float+0x304>
 80058d2:	e69e      	b.n	8005612 <_printf_float+0xc2>
 80058d4:	2301      	movs	r3, #1
 80058d6:	4631      	mov	r1, r6
 80058d8:	4628      	mov	r0, r5
 80058da:	9205      	str	r2, [sp, #20]
 80058dc:	47b8      	blx	r7
 80058de:	3001      	adds	r0, #1
 80058e0:	f43f ae97 	beq.w	8005612 <_printf_float+0xc2>
 80058e4:	9a05      	ldr	r2, [sp, #20]
 80058e6:	f10b 0b01 	add.w	fp, fp, #1
 80058ea:	e7b9      	b.n	8005860 <_printf_float+0x310>
 80058ec:	ee18 3a10 	vmov	r3, s16
 80058f0:	4652      	mov	r2, sl
 80058f2:	4631      	mov	r1, r6
 80058f4:	4628      	mov	r0, r5
 80058f6:	47b8      	blx	r7
 80058f8:	3001      	adds	r0, #1
 80058fa:	d1be      	bne.n	800587a <_printf_float+0x32a>
 80058fc:	e689      	b.n	8005612 <_printf_float+0xc2>
 80058fe:	9a05      	ldr	r2, [sp, #20]
 8005900:	464b      	mov	r3, r9
 8005902:	4442      	add	r2, r8
 8005904:	4631      	mov	r1, r6
 8005906:	4628      	mov	r0, r5
 8005908:	47b8      	blx	r7
 800590a:	3001      	adds	r0, #1
 800590c:	d1c1      	bne.n	8005892 <_printf_float+0x342>
 800590e:	e680      	b.n	8005612 <_printf_float+0xc2>
 8005910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005912:	2a01      	cmp	r2, #1
 8005914:	dc01      	bgt.n	800591a <_printf_float+0x3ca>
 8005916:	07db      	lsls	r3, r3, #31
 8005918:	d538      	bpl.n	800598c <_printf_float+0x43c>
 800591a:	2301      	movs	r3, #1
 800591c:	4642      	mov	r2, r8
 800591e:	4631      	mov	r1, r6
 8005920:	4628      	mov	r0, r5
 8005922:	47b8      	blx	r7
 8005924:	3001      	adds	r0, #1
 8005926:	f43f ae74 	beq.w	8005612 <_printf_float+0xc2>
 800592a:	ee18 3a10 	vmov	r3, s16
 800592e:	4652      	mov	r2, sl
 8005930:	4631      	mov	r1, r6
 8005932:	4628      	mov	r0, r5
 8005934:	47b8      	blx	r7
 8005936:	3001      	adds	r0, #1
 8005938:	f43f ae6b 	beq.w	8005612 <_printf_float+0xc2>
 800593c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005940:	2200      	movs	r2, #0
 8005942:	2300      	movs	r3, #0
 8005944:	f7fb f8c0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005948:	b9d8      	cbnz	r0, 8005982 <_printf_float+0x432>
 800594a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800594c:	f108 0201 	add.w	r2, r8, #1
 8005950:	3b01      	subs	r3, #1
 8005952:	4631      	mov	r1, r6
 8005954:	4628      	mov	r0, r5
 8005956:	47b8      	blx	r7
 8005958:	3001      	adds	r0, #1
 800595a:	d10e      	bne.n	800597a <_printf_float+0x42a>
 800595c:	e659      	b.n	8005612 <_printf_float+0xc2>
 800595e:	2301      	movs	r3, #1
 8005960:	4652      	mov	r2, sl
 8005962:	4631      	mov	r1, r6
 8005964:	4628      	mov	r0, r5
 8005966:	47b8      	blx	r7
 8005968:	3001      	adds	r0, #1
 800596a:	f43f ae52 	beq.w	8005612 <_printf_float+0xc2>
 800596e:	f108 0801 	add.w	r8, r8, #1
 8005972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005974:	3b01      	subs	r3, #1
 8005976:	4543      	cmp	r3, r8
 8005978:	dcf1      	bgt.n	800595e <_printf_float+0x40e>
 800597a:	464b      	mov	r3, r9
 800597c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005980:	e6dc      	b.n	800573c <_printf_float+0x1ec>
 8005982:	f04f 0800 	mov.w	r8, #0
 8005986:	f104 0a1a 	add.w	sl, r4, #26
 800598a:	e7f2      	b.n	8005972 <_printf_float+0x422>
 800598c:	2301      	movs	r3, #1
 800598e:	4642      	mov	r2, r8
 8005990:	e7df      	b.n	8005952 <_printf_float+0x402>
 8005992:	2301      	movs	r3, #1
 8005994:	464a      	mov	r2, r9
 8005996:	4631      	mov	r1, r6
 8005998:	4628      	mov	r0, r5
 800599a:	47b8      	blx	r7
 800599c:	3001      	adds	r0, #1
 800599e:	f43f ae38 	beq.w	8005612 <_printf_float+0xc2>
 80059a2:	f108 0801 	add.w	r8, r8, #1
 80059a6:	68e3      	ldr	r3, [r4, #12]
 80059a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059aa:	1a5b      	subs	r3, r3, r1
 80059ac:	4543      	cmp	r3, r8
 80059ae:	dcf0      	bgt.n	8005992 <_printf_float+0x442>
 80059b0:	e6fa      	b.n	80057a8 <_printf_float+0x258>
 80059b2:	f04f 0800 	mov.w	r8, #0
 80059b6:	f104 0919 	add.w	r9, r4, #25
 80059ba:	e7f4      	b.n	80059a6 <_printf_float+0x456>

080059bc <_printf_common>:
 80059bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c0:	4616      	mov	r6, r2
 80059c2:	4699      	mov	r9, r3
 80059c4:	688a      	ldr	r2, [r1, #8]
 80059c6:	690b      	ldr	r3, [r1, #16]
 80059c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059cc:	4293      	cmp	r3, r2
 80059ce:	bfb8      	it	lt
 80059d0:	4613      	movlt	r3, r2
 80059d2:	6033      	str	r3, [r6, #0]
 80059d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059d8:	4607      	mov	r7, r0
 80059da:	460c      	mov	r4, r1
 80059dc:	b10a      	cbz	r2, 80059e2 <_printf_common+0x26>
 80059de:	3301      	adds	r3, #1
 80059e0:	6033      	str	r3, [r6, #0]
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	0699      	lsls	r1, r3, #26
 80059e6:	bf42      	ittt	mi
 80059e8:	6833      	ldrmi	r3, [r6, #0]
 80059ea:	3302      	addmi	r3, #2
 80059ec:	6033      	strmi	r3, [r6, #0]
 80059ee:	6825      	ldr	r5, [r4, #0]
 80059f0:	f015 0506 	ands.w	r5, r5, #6
 80059f4:	d106      	bne.n	8005a04 <_printf_common+0x48>
 80059f6:	f104 0a19 	add.w	sl, r4, #25
 80059fa:	68e3      	ldr	r3, [r4, #12]
 80059fc:	6832      	ldr	r2, [r6, #0]
 80059fe:	1a9b      	subs	r3, r3, r2
 8005a00:	42ab      	cmp	r3, r5
 8005a02:	dc26      	bgt.n	8005a52 <_printf_common+0x96>
 8005a04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a08:	1e13      	subs	r3, r2, #0
 8005a0a:	6822      	ldr	r2, [r4, #0]
 8005a0c:	bf18      	it	ne
 8005a0e:	2301      	movne	r3, #1
 8005a10:	0692      	lsls	r2, r2, #26
 8005a12:	d42b      	bmi.n	8005a6c <_printf_common+0xb0>
 8005a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a18:	4649      	mov	r1, r9
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	47c0      	blx	r8
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d01e      	beq.n	8005a60 <_printf_common+0xa4>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	68e5      	ldr	r5, [r4, #12]
 8005a26:	6832      	ldr	r2, [r6, #0]
 8005a28:	f003 0306 	and.w	r3, r3, #6
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	bf08      	it	eq
 8005a30:	1aad      	subeq	r5, r5, r2
 8005a32:	68a3      	ldr	r3, [r4, #8]
 8005a34:	6922      	ldr	r2, [r4, #16]
 8005a36:	bf0c      	ite	eq
 8005a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a3c:	2500      	movne	r5, #0
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	bfc4      	itt	gt
 8005a42:	1a9b      	subgt	r3, r3, r2
 8005a44:	18ed      	addgt	r5, r5, r3
 8005a46:	2600      	movs	r6, #0
 8005a48:	341a      	adds	r4, #26
 8005a4a:	42b5      	cmp	r5, r6
 8005a4c:	d11a      	bne.n	8005a84 <_printf_common+0xc8>
 8005a4e:	2000      	movs	r0, #0
 8005a50:	e008      	b.n	8005a64 <_printf_common+0xa8>
 8005a52:	2301      	movs	r3, #1
 8005a54:	4652      	mov	r2, sl
 8005a56:	4649      	mov	r1, r9
 8005a58:	4638      	mov	r0, r7
 8005a5a:	47c0      	blx	r8
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d103      	bne.n	8005a68 <_printf_common+0xac>
 8005a60:	f04f 30ff 	mov.w	r0, #4294967295
 8005a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a68:	3501      	adds	r5, #1
 8005a6a:	e7c6      	b.n	80059fa <_printf_common+0x3e>
 8005a6c:	18e1      	adds	r1, r4, r3
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	2030      	movs	r0, #48	; 0x30
 8005a72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a76:	4422      	add	r2, r4
 8005a78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a80:	3302      	adds	r3, #2
 8005a82:	e7c7      	b.n	8005a14 <_printf_common+0x58>
 8005a84:	2301      	movs	r3, #1
 8005a86:	4622      	mov	r2, r4
 8005a88:	4649      	mov	r1, r9
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	47c0      	blx	r8
 8005a8e:	3001      	adds	r0, #1
 8005a90:	d0e6      	beq.n	8005a60 <_printf_common+0xa4>
 8005a92:	3601      	adds	r6, #1
 8005a94:	e7d9      	b.n	8005a4a <_printf_common+0x8e>
	...

08005a98 <_printf_i>:
 8005a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a9c:	7e0f      	ldrb	r7, [r1, #24]
 8005a9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005aa0:	2f78      	cmp	r7, #120	; 0x78
 8005aa2:	4691      	mov	r9, r2
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	469a      	mov	sl, r3
 8005aaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005aae:	d807      	bhi.n	8005ac0 <_printf_i+0x28>
 8005ab0:	2f62      	cmp	r7, #98	; 0x62
 8005ab2:	d80a      	bhi.n	8005aca <_printf_i+0x32>
 8005ab4:	2f00      	cmp	r7, #0
 8005ab6:	f000 80d8 	beq.w	8005c6a <_printf_i+0x1d2>
 8005aba:	2f58      	cmp	r7, #88	; 0x58
 8005abc:	f000 80a3 	beq.w	8005c06 <_printf_i+0x16e>
 8005ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ac8:	e03a      	b.n	8005b40 <_printf_i+0xa8>
 8005aca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ace:	2b15      	cmp	r3, #21
 8005ad0:	d8f6      	bhi.n	8005ac0 <_printf_i+0x28>
 8005ad2:	a101      	add	r1, pc, #4	; (adr r1, 8005ad8 <_printf_i+0x40>)
 8005ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ad8:	08005b31 	.word	0x08005b31
 8005adc:	08005b45 	.word	0x08005b45
 8005ae0:	08005ac1 	.word	0x08005ac1
 8005ae4:	08005ac1 	.word	0x08005ac1
 8005ae8:	08005ac1 	.word	0x08005ac1
 8005aec:	08005ac1 	.word	0x08005ac1
 8005af0:	08005b45 	.word	0x08005b45
 8005af4:	08005ac1 	.word	0x08005ac1
 8005af8:	08005ac1 	.word	0x08005ac1
 8005afc:	08005ac1 	.word	0x08005ac1
 8005b00:	08005ac1 	.word	0x08005ac1
 8005b04:	08005c51 	.word	0x08005c51
 8005b08:	08005b75 	.word	0x08005b75
 8005b0c:	08005c33 	.word	0x08005c33
 8005b10:	08005ac1 	.word	0x08005ac1
 8005b14:	08005ac1 	.word	0x08005ac1
 8005b18:	08005c73 	.word	0x08005c73
 8005b1c:	08005ac1 	.word	0x08005ac1
 8005b20:	08005b75 	.word	0x08005b75
 8005b24:	08005ac1 	.word	0x08005ac1
 8005b28:	08005ac1 	.word	0x08005ac1
 8005b2c:	08005c3b 	.word	0x08005c3b
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	1d1a      	adds	r2, r3, #4
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	602a      	str	r2, [r5, #0]
 8005b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b40:	2301      	movs	r3, #1
 8005b42:	e0a3      	b.n	8005c8c <_printf_i+0x1f4>
 8005b44:	6820      	ldr	r0, [r4, #0]
 8005b46:	6829      	ldr	r1, [r5, #0]
 8005b48:	0606      	lsls	r6, r0, #24
 8005b4a:	f101 0304 	add.w	r3, r1, #4
 8005b4e:	d50a      	bpl.n	8005b66 <_printf_i+0xce>
 8005b50:	680e      	ldr	r6, [r1, #0]
 8005b52:	602b      	str	r3, [r5, #0]
 8005b54:	2e00      	cmp	r6, #0
 8005b56:	da03      	bge.n	8005b60 <_printf_i+0xc8>
 8005b58:	232d      	movs	r3, #45	; 0x2d
 8005b5a:	4276      	negs	r6, r6
 8005b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b60:	485e      	ldr	r0, [pc, #376]	; (8005cdc <_printf_i+0x244>)
 8005b62:	230a      	movs	r3, #10
 8005b64:	e019      	b.n	8005b9a <_printf_i+0x102>
 8005b66:	680e      	ldr	r6, [r1, #0]
 8005b68:	602b      	str	r3, [r5, #0]
 8005b6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b6e:	bf18      	it	ne
 8005b70:	b236      	sxthne	r6, r6
 8005b72:	e7ef      	b.n	8005b54 <_printf_i+0xbc>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	6820      	ldr	r0, [r4, #0]
 8005b78:	1d19      	adds	r1, r3, #4
 8005b7a:	6029      	str	r1, [r5, #0]
 8005b7c:	0601      	lsls	r1, r0, #24
 8005b7e:	d501      	bpl.n	8005b84 <_printf_i+0xec>
 8005b80:	681e      	ldr	r6, [r3, #0]
 8005b82:	e002      	b.n	8005b8a <_printf_i+0xf2>
 8005b84:	0646      	lsls	r6, r0, #25
 8005b86:	d5fb      	bpl.n	8005b80 <_printf_i+0xe8>
 8005b88:	881e      	ldrh	r6, [r3, #0]
 8005b8a:	4854      	ldr	r0, [pc, #336]	; (8005cdc <_printf_i+0x244>)
 8005b8c:	2f6f      	cmp	r7, #111	; 0x6f
 8005b8e:	bf0c      	ite	eq
 8005b90:	2308      	moveq	r3, #8
 8005b92:	230a      	movne	r3, #10
 8005b94:	2100      	movs	r1, #0
 8005b96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b9a:	6865      	ldr	r5, [r4, #4]
 8005b9c:	60a5      	str	r5, [r4, #8]
 8005b9e:	2d00      	cmp	r5, #0
 8005ba0:	bfa2      	ittt	ge
 8005ba2:	6821      	ldrge	r1, [r4, #0]
 8005ba4:	f021 0104 	bicge.w	r1, r1, #4
 8005ba8:	6021      	strge	r1, [r4, #0]
 8005baa:	b90e      	cbnz	r6, 8005bb0 <_printf_i+0x118>
 8005bac:	2d00      	cmp	r5, #0
 8005bae:	d04d      	beq.n	8005c4c <_printf_i+0x1b4>
 8005bb0:	4615      	mov	r5, r2
 8005bb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bb6:	fb03 6711 	mls	r7, r3, r1, r6
 8005bba:	5dc7      	ldrb	r7, [r0, r7]
 8005bbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bc0:	4637      	mov	r7, r6
 8005bc2:	42bb      	cmp	r3, r7
 8005bc4:	460e      	mov	r6, r1
 8005bc6:	d9f4      	bls.n	8005bb2 <_printf_i+0x11a>
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d10b      	bne.n	8005be4 <_printf_i+0x14c>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	07de      	lsls	r6, r3, #31
 8005bd0:	d508      	bpl.n	8005be4 <_printf_i+0x14c>
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	6861      	ldr	r1, [r4, #4]
 8005bd6:	4299      	cmp	r1, r3
 8005bd8:	bfde      	ittt	le
 8005bda:	2330      	movle	r3, #48	; 0x30
 8005bdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005be0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005be4:	1b52      	subs	r2, r2, r5
 8005be6:	6122      	str	r2, [r4, #16]
 8005be8:	f8cd a000 	str.w	sl, [sp]
 8005bec:	464b      	mov	r3, r9
 8005bee:	aa03      	add	r2, sp, #12
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	4640      	mov	r0, r8
 8005bf4:	f7ff fee2 	bl	80059bc <_printf_common>
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d14c      	bne.n	8005c96 <_printf_i+0x1fe>
 8005bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005c00:	b004      	add	sp, #16
 8005c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c06:	4835      	ldr	r0, [pc, #212]	; (8005cdc <_printf_i+0x244>)
 8005c08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c0c:	6829      	ldr	r1, [r5, #0]
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c14:	6029      	str	r1, [r5, #0]
 8005c16:	061d      	lsls	r5, r3, #24
 8005c18:	d514      	bpl.n	8005c44 <_printf_i+0x1ac>
 8005c1a:	07df      	lsls	r7, r3, #31
 8005c1c:	bf44      	itt	mi
 8005c1e:	f043 0320 	orrmi.w	r3, r3, #32
 8005c22:	6023      	strmi	r3, [r4, #0]
 8005c24:	b91e      	cbnz	r6, 8005c2e <_printf_i+0x196>
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	f023 0320 	bic.w	r3, r3, #32
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	2310      	movs	r3, #16
 8005c30:	e7b0      	b.n	8005b94 <_printf_i+0xfc>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	f043 0320 	orr.w	r3, r3, #32
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	2378      	movs	r3, #120	; 0x78
 8005c3c:	4828      	ldr	r0, [pc, #160]	; (8005ce0 <_printf_i+0x248>)
 8005c3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c42:	e7e3      	b.n	8005c0c <_printf_i+0x174>
 8005c44:	0659      	lsls	r1, r3, #25
 8005c46:	bf48      	it	mi
 8005c48:	b2b6      	uxthmi	r6, r6
 8005c4a:	e7e6      	b.n	8005c1a <_printf_i+0x182>
 8005c4c:	4615      	mov	r5, r2
 8005c4e:	e7bb      	b.n	8005bc8 <_printf_i+0x130>
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	6826      	ldr	r6, [r4, #0]
 8005c54:	6961      	ldr	r1, [r4, #20]
 8005c56:	1d18      	adds	r0, r3, #4
 8005c58:	6028      	str	r0, [r5, #0]
 8005c5a:	0635      	lsls	r5, r6, #24
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	d501      	bpl.n	8005c64 <_printf_i+0x1cc>
 8005c60:	6019      	str	r1, [r3, #0]
 8005c62:	e002      	b.n	8005c6a <_printf_i+0x1d2>
 8005c64:	0670      	lsls	r0, r6, #25
 8005c66:	d5fb      	bpl.n	8005c60 <_printf_i+0x1c8>
 8005c68:	8019      	strh	r1, [r3, #0]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	6123      	str	r3, [r4, #16]
 8005c6e:	4615      	mov	r5, r2
 8005c70:	e7ba      	b.n	8005be8 <_printf_i+0x150>
 8005c72:	682b      	ldr	r3, [r5, #0]
 8005c74:	1d1a      	adds	r2, r3, #4
 8005c76:	602a      	str	r2, [r5, #0]
 8005c78:	681d      	ldr	r5, [r3, #0]
 8005c7a:	6862      	ldr	r2, [r4, #4]
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f7fa faae 	bl	80001e0 <memchr>
 8005c84:	b108      	cbz	r0, 8005c8a <_printf_i+0x1f2>
 8005c86:	1b40      	subs	r0, r0, r5
 8005c88:	6060      	str	r0, [r4, #4]
 8005c8a:	6863      	ldr	r3, [r4, #4]
 8005c8c:	6123      	str	r3, [r4, #16]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c94:	e7a8      	b.n	8005be8 <_printf_i+0x150>
 8005c96:	6923      	ldr	r3, [r4, #16]
 8005c98:	462a      	mov	r2, r5
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	4640      	mov	r0, r8
 8005c9e:	47d0      	blx	sl
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d0ab      	beq.n	8005bfc <_printf_i+0x164>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	079b      	lsls	r3, r3, #30
 8005ca8:	d413      	bmi.n	8005cd2 <_printf_i+0x23a>
 8005caa:	68e0      	ldr	r0, [r4, #12]
 8005cac:	9b03      	ldr	r3, [sp, #12]
 8005cae:	4298      	cmp	r0, r3
 8005cb0:	bfb8      	it	lt
 8005cb2:	4618      	movlt	r0, r3
 8005cb4:	e7a4      	b.n	8005c00 <_printf_i+0x168>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4632      	mov	r2, r6
 8005cba:	4649      	mov	r1, r9
 8005cbc:	4640      	mov	r0, r8
 8005cbe:	47d0      	blx	sl
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d09b      	beq.n	8005bfc <_printf_i+0x164>
 8005cc4:	3501      	adds	r5, #1
 8005cc6:	68e3      	ldr	r3, [r4, #12]
 8005cc8:	9903      	ldr	r1, [sp, #12]
 8005cca:	1a5b      	subs	r3, r3, r1
 8005ccc:	42ab      	cmp	r3, r5
 8005cce:	dcf2      	bgt.n	8005cb6 <_printf_i+0x21e>
 8005cd0:	e7eb      	b.n	8005caa <_printf_i+0x212>
 8005cd2:	2500      	movs	r5, #0
 8005cd4:	f104 0619 	add.w	r6, r4, #25
 8005cd8:	e7f5      	b.n	8005cc6 <_printf_i+0x22e>
 8005cda:	bf00      	nop
 8005cdc:	08008666 	.word	0x08008666
 8005ce0:	08008677 	.word	0x08008677

08005ce4 <iprintf>:
 8005ce4:	b40f      	push	{r0, r1, r2, r3}
 8005ce6:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <iprintf+0x2c>)
 8005ce8:	b513      	push	{r0, r1, r4, lr}
 8005cea:	681c      	ldr	r4, [r3, #0]
 8005cec:	b124      	cbz	r4, 8005cf8 <iprintf+0x14>
 8005cee:	69a3      	ldr	r3, [r4, #24]
 8005cf0:	b913      	cbnz	r3, 8005cf8 <iprintf+0x14>
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f001 f8d8 	bl	8006ea8 <__sinit>
 8005cf8:	ab05      	add	r3, sp, #20
 8005cfa:	9a04      	ldr	r2, [sp, #16]
 8005cfc:	68a1      	ldr	r1, [r4, #8]
 8005cfe:	9301      	str	r3, [sp, #4]
 8005d00:	4620      	mov	r0, r4
 8005d02:	f001 fe87 	bl	8007a14 <_vfiprintf_r>
 8005d06:	b002      	add	sp, #8
 8005d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d0c:	b004      	add	sp, #16
 8005d0e:	4770      	bx	lr
 8005d10:	20000018 	.word	0x20000018

08005d14 <_puts_r>:
 8005d14:	b570      	push	{r4, r5, r6, lr}
 8005d16:	460e      	mov	r6, r1
 8005d18:	4605      	mov	r5, r0
 8005d1a:	b118      	cbz	r0, 8005d24 <_puts_r+0x10>
 8005d1c:	6983      	ldr	r3, [r0, #24]
 8005d1e:	b90b      	cbnz	r3, 8005d24 <_puts_r+0x10>
 8005d20:	f001 f8c2 	bl	8006ea8 <__sinit>
 8005d24:	69ab      	ldr	r3, [r5, #24]
 8005d26:	68ac      	ldr	r4, [r5, #8]
 8005d28:	b913      	cbnz	r3, 8005d30 <_puts_r+0x1c>
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	f001 f8bc 	bl	8006ea8 <__sinit>
 8005d30:	4b2c      	ldr	r3, [pc, #176]	; (8005de4 <_puts_r+0xd0>)
 8005d32:	429c      	cmp	r4, r3
 8005d34:	d120      	bne.n	8005d78 <_puts_r+0x64>
 8005d36:	686c      	ldr	r4, [r5, #4]
 8005d38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d3a:	07db      	lsls	r3, r3, #31
 8005d3c:	d405      	bmi.n	8005d4a <_puts_r+0x36>
 8005d3e:	89a3      	ldrh	r3, [r4, #12]
 8005d40:	0598      	lsls	r0, r3, #22
 8005d42:	d402      	bmi.n	8005d4a <_puts_r+0x36>
 8005d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d46:	f001 f952 	bl	8006fee <__retarget_lock_acquire_recursive>
 8005d4a:	89a3      	ldrh	r3, [r4, #12]
 8005d4c:	0719      	lsls	r1, r3, #28
 8005d4e:	d51d      	bpl.n	8005d8c <_puts_r+0x78>
 8005d50:	6923      	ldr	r3, [r4, #16]
 8005d52:	b1db      	cbz	r3, 8005d8c <_puts_r+0x78>
 8005d54:	3e01      	subs	r6, #1
 8005d56:	68a3      	ldr	r3, [r4, #8]
 8005d58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	60a3      	str	r3, [r4, #8]
 8005d60:	bb39      	cbnz	r1, 8005db2 <_puts_r+0x9e>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	da38      	bge.n	8005dd8 <_puts_r+0xc4>
 8005d66:	4622      	mov	r2, r4
 8005d68:	210a      	movs	r1, #10
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	f000 f848 	bl	8005e00 <__swbuf_r>
 8005d70:	3001      	adds	r0, #1
 8005d72:	d011      	beq.n	8005d98 <_puts_r+0x84>
 8005d74:	250a      	movs	r5, #10
 8005d76:	e011      	b.n	8005d9c <_puts_r+0x88>
 8005d78:	4b1b      	ldr	r3, [pc, #108]	; (8005de8 <_puts_r+0xd4>)
 8005d7a:	429c      	cmp	r4, r3
 8005d7c:	d101      	bne.n	8005d82 <_puts_r+0x6e>
 8005d7e:	68ac      	ldr	r4, [r5, #8]
 8005d80:	e7da      	b.n	8005d38 <_puts_r+0x24>
 8005d82:	4b1a      	ldr	r3, [pc, #104]	; (8005dec <_puts_r+0xd8>)
 8005d84:	429c      	cmp	r4, r3
 8005d86:	bf08      	it	eq
 8005d88:	68ec      	ldreq	r4, [r5, #12]
 8005d8a:	e7d5      	b.n	8005d38 <_puts_r+0x24>
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f000 f888 	bl	8005ea4 <__swsetup_r>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d0dd      	beq.n	8005d54 <_puts_r+0x40>
 8005d98:	f04f 35ff 	mov.w	r5, #4294967295
 8005d9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d9e:	07da      	lsls	r2, r3, #31
 8005da0:	d405      	bmi.n	8005dae <_puts_r+0x9a>
 8005da2:	89a3      	ldrh	r3, [r4, #12]
 8005da4:	059b      	lsls	r3, r3, #22
 8005da6:	d402      	bmi.n	8005dae <_puts_r+0x9a>
 8005da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005daa:	f001 f921 	bl	8006ff0 <__retarget_lock_release_recursive>
 8005dae:	4628      	mov	r0, r5
 8005db0:	bd70      	pop	{r4, r5, r6, pc}
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	da04      	bge.n	8005dc0 <_puts_r+0xac>
 8005db6:	69a2      	ldr	r2, [r4, #24]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	dc06      	bgt.n	8005dca <_puts_r+0xb6>
 8005dbc:	290a      	cmp	r1, #10
 8005dbe:	d004      	beq.n	8005dca <_puts_r+0xb6>
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	6022      	str	r2, [r4, #0]
 8005dc6:	7019      	strb	r1, [r3, #0]
 8005dc8:	e7c5      	b.n	8005d56 <_puts_r+0x42>
 8005dca:	4622      	mov	r2, r4
 8005dcc:	4628      	mov	r0, r5
 8005dce:	f000 f817 	bl	8005e00 <__swbuf_r>
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d1bf      	bne.n	8005d56 <_puts_r+0x42>
 8005dd6:	e7df      	b.n	8005d98 <_puts_r+0x84>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	250a      	movs	r5, #10
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	6022      	str	r2, [r4, #0]
 8005de0:	701d      	strb	r5, [r3, #0]
 8005de2:	e7db      	b.n	8005d9c <_puts_r+0x88>
 8005de4:	08008738 	.word	0x08008738
 8005de8:	08008758 	.word	0x08008758
 8005dec:	08008718 	.word	0x08008718

08005df0 <puts>:
 8005df0:	4b02      	ldr	r3, [pc, #8]	; (8005dfc <puts+0xc>)
 8005df2:	4601      	mov	r1, r0
 8005df4:	6818      	ldr	r0, [r3, #0]
 8005df6:	f7ff bf8d 	b.w	8005d14 <_puts_r>
 8005dfa:	bf00      	nop
 8005dfc:	20000018 	.word	0x20000018

08005e00 <__swbuf_r>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	460e      	mov	r6, r1
 8005e04:	4614      	mov	r4, r2
 8005e06:	4605      	mov	r5, r0
 8005e08:	b118      	cbz	r0, 8005e12 <__swbuf_r+0x12>
 8005e0a:	6983      	ldr	r3, [r0, #24]
 8005e0c:	b90b      	cbnz	r3, 8005e12 <__swbuf_r+0x12>
 8005e0e:	f001 f84b 	bl	8006ea8 <__sinit>
 8005e12:	4b21      	ldr	r3, [pc, #132]	; (8005e98 <__swbuf_r+0x98>)
 8005e14:	429c      	cmp	r4, r3
 8005e16:	d12b      	bne.n	8005e70 <__swbuf_r+0x70>
 8005e18:	686c      	ldr	r4, [r5, #4]
 8005e1a:	69a3      	ldr	r3, [r4, #24]
 8005e1c:	60a3      	str	r3, [r4, #8]
 8005e1e:	89a3      	ldrh	r3, [r4, #12]
 8005e20:	071a      	lsls	r2, r3, #28
 8005e22:	d52f      	bpl.n	8005e84 <__swbuf_r+0x84>
 8005e24:	6923      	ldr	r3, [r4, #16]
 8005e26:	b36b      	cbz	r3, 8005e84 <__swbuf_r+0x84>
 8005e28:	6923      	ldr	r3, [r4, #16]
 8005e2a:	6820      	ldr	r0, [r4, #0]
 8005e2c:	1ac0      	subs	r0, r0, r3
 8005e2e:	6963      	ldr	r3, [r4, #20]
 8005e30:	b2f6      	uxtb	r6, r6
 8005e32:	4283      	cmp	r3, r0
 8005e34:	4637      	mov	r7, r6
 8005e36:	dc04      	bgt.n	8005e42 <__swbuf_r+0x42>
 8005e38:	4621      	mov	r1, r4
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f000 ffa0 	bl	8006d80 <_fflush_r>
 8005e40:	bb30      	cbnz	r0, 8005e90 <__swbuf_r+0x90>
 8005e42:	68a3      	ldr	r3, [r4, #8]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	60a3      	str	r3, [r4, #8]
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	6022      	str	r2, [r4, #0]
 8005e4e:	701e      	strb	r6, [r3, #0]
 8005e50:	6963      	ldr	r3, [r4, #20]
 8005e52:	3001      	adds	r0, #1
 8005e54:	4283      	cmp	r3, r0
 8005e56:	d004      	beq.n	8005e62 <__swbuf_r+0x62>
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	07db      	lsls	r3, r3, #31
 8005e5c:	d506      	bpl.n	8005e6c <__swbuf_r+0x6c>
 8005e5e:	2e0a      	cmp	r6, #10
 8005e60:	d104      	bne.n	8005e6c <__swbuf_r+0x6c>
 8005e62:	4621      	mov	r1, r4
 8005e64:	4628      	mov	r0, r5
 8005e66:	f000 ff8b 	bl	8006d80 <_fflush_r>
 8005e6a:	b988      	cbnz	r0, 8005e90 <__swbuf_r+0x90>
 8005e6c:	4638      	mov	r0, r7
 8005e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e70:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <__swbuf_r+0x9c>)
 8005e72:	429c      	cmp	r4, r3
 8005e74:	d101      	bne.n	8005e7a <__swbuf_r+0x7a>
 8005e76:	68ac      	ldr	r4, [r5, #8]
 8005e78:	e7cf      	b.n	8005e1a <__swbuf_r+0x1a>
 8005e7a:	4b09      	ldr	r3, [pc, #36]	; (8005ea0 <__swbuf_r+0xa0>)
 8005e7c:	429c      	cmp	r4, r3
 8005e7e:	bf08      	it	eq
 8005e80:	68ec      	ldreq	r4, [r5, #12]
 8005e82:	e7ca      	b.n	8005e1a <__swbuf_r+0x1a>
 8005e84:	4621      	mov	r1, r4
 8005e86:	4628      	mov	r0, r5
 8005e88:	f000 f80c 	bl	8005ea4 <__swsetup_r>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d0cb      	beq.n	8005e28 <__swbuf_r+0x28>
 8005e90:	f04f 37ff 	mov.w	r7, #4294967295
 8005e94:	e7ea      	b.n	8005e6c <__swbuf_r+0x6c>
 8005e96:	bf00      	nop
 8005e98:	08008738 	.word	0x08008738
 8005e9c:	08008758 	.word	0x08008758
 8005ea0:	08008718 	.word	0x08008718

08005ea4 <__swsetup_r>:
 8005ea4:	4b32      	ldr	r3, [pc, #200]	; (8005f70 <__swsetup_r+0xcc>)
 8005ea6:	b570      	push	{r4, r5, r6, lr}
 8005ea8:	681d      	ldr	r5, [r3, #0]
 8005eaa:	4606      	mov	r6, r0
 8005eac:	460c      	mov	r4, r1
 8005eae:	b125      	cbz	r5, 8005eba <__swsetup_r+0x16>
 8005eb0:	69ab      	ldr	r3, [r5, #24]
 8005eb2:	b913      	cbnz	r3, 8005eba <__swsetup_r+0x16>
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f000 fff7 	bl	8006ea8 <__sinit>
 8005eba:	4b2e      	ldr	r3, [pc, #184]	; (8005f74 <__swsetup_r+0xd0>)
 8005ebc:	429c      	cmp	r4, r3
 8005ebe:	d10f      	bne.n	8005ee0 <__swsetup_r+0x3c>
 8005ec0:	686c      	ldr	r4, [r5, #4]
 8005ec2:	89a3      	ldrh	r3, [r4, #12]
 8005ec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ec8:	0719      	lsls	r1, r3, #28
 8005eca:	d42c      	bmi.n	8005f26 <__swsetup_r+0x82>
 8005ecc:	06dd      	lsls	r5, r3, #27
 8005ece:	d411      	bmi.n	8005ef4 <__swsetup_r+0x50>
 8005ed0:	2309      	movs	r3, #9
 8005ed2:	6033      	str	r3, [r6, #0]
 8005ed4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ed8:	81a3      	strh	r3, [r4, #12]
 8005eda:	f04f 30ff 	mov.w	r0, #4294967295
 8005ede:	e03e      	b.n	8005f5e <__swsetup_r+0xba>
 8005ee0:	4b25      	ldr	r3, [pc, #148]	; (8005f78 <__swsetup_r+0xd4>)
 8005ee2:	429c      	cmp	r4, r3
 8005ee4:	d101      	bne.n	8005eea <__swsetup_r+0x46>
 8005ee6:	68ac      	ldr	r4, [r5, #8]
 8005ee8:	e7eb      	b.n	8005ec2 <__swsetup_r+0x1e>
 8005eea:	4b24      	ldr	r3, [pc, #144]	; (8005f7c <__swsetup_r+0xd8>)
 8005eec:	429c      	cmp	r4, r3
 8005eee:	bf08      	it	eq
 8005ef0:	68ec      	ldreq	r4, [r5, #12]
 8005ef2:	e7e6      	b.n	8005ec2 <__swsetup_r+0x1e>
 8005ef4:	0758      	lsls	r0, r3, #29
 8005ef6:	d512      	bpl.n	8005f1e <__swsetup_r+0x7a>
 8005ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005efa:	b141      	cbz	r1, 8005f0e <__swsetup_r+0x6a>
 8005efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f00:	4299      	cmp	r1, r3
 8005f02:	d002      	beq.n	8005f0a <__swsetup_r+0x66>
 8005f04:	4630      	mov	r0, r6
 8005f06:	f001 fc7b 	bl	8007800 <_free_r>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	6363      	str	r3, [r4, #52]	; 0x34
 8005f0e:	89a3      	ldrh	r3, [r4, #12]
 8005f10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f14:	81a3      	strh	r3, [r4, #12]
 8005f16:	2300      	movs	r3, #0
 8005f18:	6063      	str	r3, [r4, #4]
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	89a3      	ldrh	r3, [r4, #12]
 8005f20:	f043 0308 	orr.w	r3, r3, #8
 8005f24:	81a3      	strh	r3, [r4, #12]
 8005f26:	6923      	ldr	r3, [r4, #16]
 8005f28:	b94b      	cbnz	r3, 8005f3e <__swsetup_r+0x9a>
 8005f2a:	89a3      	ldrh	r3, [r4, #12]
 8005f2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f34:	d003      	beq.n	8005f3e <__swsetup_r+0x9a>
 8005f36:	4621      	mov	r1, r4
 8005f38:	4630      	mov	r0, r6
 8005f3a:	f001 f87f 	bl	800703c <__smakebuf_r>
 8005f3e:	89a0      	ldrh	r0, [r4, #12]
 8005f40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f44:	f010 0301 	ands.w	r3, r0, #1
 8005f48:	d00a      	beq.n	8005f60 <__swsetup_r+0xbc>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60a3      	str	r3, [r4, #8]
 8005f4e:	6963      	ldr	r3, [r4, #20]
 8005f50:	425b      	negs	r3, r3
 8005f52:	61a3      	str	r3, [r4, #24]
 8005f54:	6923      	ldr	r3, [r4, #16]
 8005f56:	b943      	cbnz	r3, 8005f6a <__swsetup_r+0xc6>
 8005f58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f5c:	d1ba      	bne.n	8005ed4 <__swsetup_r+0x30>
 8005f5e:	bd70      	pop	{r4, r5, r6, pc}
 8005f60:	0781      	lsls	r1, r0, #30
 8005f62:	bf58      	it	pl
 8005f64:	6963      	ldrpl	r3, [r4, #20]
 8005f66:	60a3      	str	r3, [r4, #8]
 8005f68:	e7f4      	b.n	8005f54 <__swsetup_r+0xb0>
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	e7f7      	b.n	8005f5e <__swsetup_r+0xba>
 8005f6e:	bf00      	nop
 8005f70:	20000018 	.word	0x20000018
 8005f74:	08008738 	.word	0x08008738
 8005f78:	08008758 	.word	0x08008758
 8005f7c:	08008718 	.word	0x08008718

08005f80 <quorem>:
 8005f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	6903      	ldr	r3, [r0, #16]
 8005f86:	690c      	ldr	r4, [r1, #16]
 8005f88:	42a3      	cmp	r3, r4
 8005f8a:	4607      	mov	r7, r0
 8005f8c:	f2c0 8081 	blt.w	8006092 <quorem+0x112>
 8005f90:	3c01      	subs	r4, #1
 8005f92:	f101 0814 	add.w	r8, r1, #20
 8005f96:	f100 0514 	add.w	r5, r0, #20
 8005f9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f9e:	9301      	str	r3, [sp, #4]
 8005fa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005fa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	429a      	cmp	r2, r3
 8005fac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005fb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005fb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005fb8:	d331      	bcc.n	800601e <quorem+0x9e>
 8005fba:	f04f 0e00 	mov.w	lr, #0
 8005fbe:	4640      	mov	r0, r8
 8005fc0:	46ac      	mov	ip, r5
 8005fc2:	46f2      	mov	sl, lr
 8005fc4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fc8:	b293      	uxth	r3, r2
 8005fca:	fb06 e303 	mla	r3, r6, r3, lr
 8005fce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	ebaa 0303 	sub.w	r3, sl, r3
 8005fd8:	f8dc a000 	ldr.w	sl, [ip]
 8005fdc:	0c12      	lsrs	r2, r2, #16
 8005fde:	fa13 f38a 	uxtah	r3, r3, sl
 8005fe2:	fb06 e202 	mla	r2, r6, r2, lr
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	9b00      	ldr	r3, [sp, #0]
 8005fea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005fee:	b292      	uxth	r2, r2
 8005ff0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ff4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ff8:	f8bd 3000 	ldrh.w	r3, [sp]
 8005ffc:	4581      	cmp	r9, r0
 8005ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006002:	f84c 3b04 	str.w	r3, [ip], #4
 8006006:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800600a:	d2db      	bcs.n	8005fc4 <quorem+0x44>
 800600c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006010:	b92b      	cbnz	r3, 800601e <quorem+0x9e>
 8006012:	9b01      	ldr	r3, [sp, #4]
 8006014:	3b04      	subs	r3, #4
 8006016:	429d      	cmp	r5, r3
 8006018:	461a      	mov	r2, r3
 800601a:	d32e      	bcc.n	800607a <quorem+0xfa>
 800601c:	613c      	str	r4, [r7, #16]
 800601e:	4638      	mov	r0, r7
 8006020:	f001 fad6 	bl	80075d0 <__mcmp>
 8006024:	2800      	cmp	r0, #0
 8006026:	db24      	blt.n	8006072 <quorem+0xf2>
 8006028:	3601      	adds	r6, #1
 800602a:	4628      	mov	r0, r5
 800602c:	f04f 0c00 	mov.w	ip, #0
 8006030:	f858 2b04 	ldr.w	r2, [r8], #4
 8006034:	f8d0 e000 	ldr.w	lr, [r0]
 8006038:	b293      	uxth	r3, r2
 800603a:	ebac 0303 	sub.w	r3, ip, r3
 800603e:	0c12      	lsrs	r2, r2, #16
 8006040:	fa13 f38e 	uxtah	r3, r3, lr
 8006044:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006048:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800604c:	b29b      	uxth	r3, r3
 800604e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006052:	45c1      	cmp	r9, r8
 8006054:	f840 3b04 	str.w	r3, [r0], #4
 8006058:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800605c:	d2e8      	bcs.n	8006030 <quorem+0xb0>
 800605e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006062:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006066:	b922      	cbnz	r2, 8006072 <quorem+0xf2>
 8006068:	3b04      	subs	r3, #4
 800606a:	429d      	cmp	r5, r3
 800606c:	461a      	mov	r2, r3
 800606e:	d30a      	bcc.n	8006086 <quorem+0x106>
 8006070:	613c      	str	r4, [r7, #16]
 8006072:	4630      	mov	r0, r6
 8006074:	b003      	add	sp, #12
 8006076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800607a:	6812      	ldr	r2, [r2, #0]
 800607c:	3b04      	subs	r3, #4
 800607e:	2a00      	cmp	r2, #0
 8006080:	d1cc      	bne.n	800601c <quorem+0x9c>
 8006082:	3c01      	subs	r4, #1
 8006084:	e7c7      	b.n	8006016 <quorem+0x96>
 8006086:	6812      	ldr	r2, [r2, #0]
 8006088:	3b04      	subs	r3, #4
 800608a:	2a00      	cmp	r2, #0
 800608c:	d1f0      	bne.n	8006070 <quorem+0xf0>
 800608e:	3c01      	subs	r4, #1
 8006090:	e7eb      	b.n	800606a <quorem+0xea>
 8006092:	2000      	movs	r0, #0
 8006094:	e7ee      	b.n	8006074 <quorem+0xf4>
	...

08006098 <_dtoa_r>:
 8006098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	ed2d 8b04 	vpush	{d8-d9}
 80060a0:	ec57 6b10 	vmov	r6, r7, d0
 80060a4:	b093      	sub	sp, #76	; 0x4c
 80060a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80060ac:	9106      	str	r1, [sp, #24]
 80060ae:	ee10 aa10 	vmov	sl, s0
 80060b2:	4604      	mov	r4, r0
 80060b4:	9209      	str	r2, [sp, #36]	; 0x24
 80060b6:	930c      	str	r3, [sp, #48]	; 0x30
 80060b8:	46bb      	mov	fp, r7
 80060ba:	b975      	cbnz	r5, 80060da <_dtoa_r+0x42>
 80060bc:	2010      	movs	r0, #16
 80060be:	f000 fffd 	bl	80070bc <malloc>
 80060c2:	4602      	mov	r2, r0
 80060c4:	6260      	str	r0, [r4, #36]	; 0x24
 80060c6:	b920      	cbnz	r0, 80060d2 <_dtoa_r+0x3a>
 80060c8:	4ba7      	ldr	r3, [pc, #668]	; (8006368 <_dtoa_r+0x2d0>)
 80060ca:	21ea      	movs	r1, #234	; 0xea
 80060cc:	48a7      	ldr	r0, [pc, #668]	; (800636c <_dtoa_r+0x2d4>)
 80060ce:	f001 fe37 	bl	8007d40 <__assert_func>
 80060d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80060d6:	6005      	str	r5, [r0, #0]
 80060d8:	60c5      	str	r5, [r0, #12]
 80060da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060dc:	6819      	ldr	r1, [r3, #0]
 80060de:	b151      	cbz	r1, 80060f6 <_dtoa_r+0x5e>
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	604a      	str	r2, [r1, #4]
 80060e4:	2301      	movs	r3, #1
 80060e6:	4093      	lsls	r3, r2
 80060e8:	608b      	str	r3, [r1, #8]
 80060ea:	4620      	mov	r0, r4
 80060ec:	f001 f82e 	bl	800714c <_Bfree>
 80060f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	1e3b      	subs	r3, r7, #0
 80060f8:	bfaa      	itet	ge
 80060fa:	2300      	movge	r3, #0
 80060fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006100:	f8c8 3000 	strge.w	r3, [r8]
 8006104:	4b9a      	ldr	r3, [pc, #616]	; (8006370 <_dtoa_r+0x2d8>)
 8006106:	bfbc      	itt	lt
 8006108:	2201      	movlt	r2, #1
 800610a:	f8c8 2000 	strlt.w	r2, [r8]
 800610e:	ea33 030b 	bics.w	r3, r3, fp
 8006112:	d11b      	bne.n	800614c <_dtoa_r+0xb4>
 8006114:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006116:	f242 730f 	movw	r3, #9999	; 0x270f
 800611a:	6013      	str	r3, [r2, #0]
 800611c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006120:	4333      	orrs	r3, r6
 8006122:	f000 8592 	beq.w	8006c4a <_dtoa_r+0xbb2>
 8006126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006128:	b963      	cbnz	r3, 8006144 <_dtoa_r+0xac>
 800612a:	4b92      	ldr	r3, [pc, #584]	; (8006374 <_dtoa_r+0x2dc>)
 800612c:	e022      	b.n	8006174 <_dtoa_r+0xdc>
 800612e:	4b92      	ldr	r3, [pc, #584]	; (8006378 <_dtoa_r+0x2e0>)
 8006130:	9301      	str	r3, [sp, #4]
 8006132:	3308      	adds	r3, #8
 8006134:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006136:	6013      	str	r3, [r2, #0]
 8006138:	9801      	ldr	r0, [sp, #4]
 800613a:	b013      	add	sp, #76	; 0x4c
 800613c:	ecbd 8b04 	vpop	{d8-d9}
 8006140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006144:	4b8b      	ldr	r3, [pc, #556]	; (8006374 <_dtoa_r+0x2dc>)
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	3303      	adds	r3, #3
 800614a:	e7f3      	b.n	8006134 <_dtoa_r+0x9c>
 800614c:	2200      	movs	r2, #0
 800614e:	2300      	movs	r3, #0
 8006150:	4650      	mov	r0, sl
 8006152:	4659      	mov	r1, fp
 8006154:	f7fa fcb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006158:	ec4b ab19 	vmov	d9, sl, fp
 800615c:	4680      	mov	r8, r0
 800615e:	b158      	cbz	r0, 8006178 <_dtoa_r+0xe0>
 8006160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006162:	2301      	movs	r3, #1
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 856b 	beq.w	8006c44 <_dtoa_r+0xbac>
 800616e:	4883      	ldr	r0, [pc, #524]	; (800637c <_dtoa_r+0x2e4>)
 8006170:	6018      	str	r0, [r3, #0]
 8006172:	1e43      	subs	r3, r0, #1
 8006174:	9301      	str	r3, [sp, #4]
 8006176:	e7df      	b.n	8006138 <_dtoa_r+0xa0>
 8006178:	ec4b ab10 	vmov	d0, sl, fp
 800617c:	aa10      	add	r2, sp, #64	; 0x40
 800617e:	a911      	add	r1, sp, #68	; 0x44
 8006180:	4620      	mov	r0, r4
 8006182:	f001 facb 	bl	800771c <__d2b>
 8006186:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800618a:	ee08 0a10 	vmov	s16, r0
 800618e:	2d00      	cmp	r5, #0
 8006190:	f000 8084 	beq.w	800629c <_dtoa_r+0x204>
 8006194:	ee19 3a90 	vmov	r3, s19
 8006198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800619c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80061a0:	4656      	mov	r6, sl
 80061a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80061a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80061aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80061ae:	4b74      	ldr	r3, [pc, #464]	; (8006380 <_dtoa_r+0x2e8>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	4630      	mov	r0, r6
 80061b4:	4639      	mov	r1, r7
 80061b6:	f7fa f867 	bl	8000288 <__aeabi_dsub>
 80061ba:	a365      	add	r3, pc, #404	; (adr r3, 8006350 <_dtoa_r+0x2b8>)
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f7fa fa1a 	bl	80005f8 <__aeabi_dmul>
 80061c4:	a364      	add	r3, pc, #400	; (adr r3, 8006358 <_dtoa_r+0x2c0>)
 80061c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ca:	f7fa f85f 	bl	800028c <__adddf3>
 80061ce:	4606      	mov	r6, r0
 80061d0:	4628      	mov	r0, r5
 80061d2:	460f      	mov	r7, r1
 80061d4:	f7fa f9a6 	bl	8000524 <__aeabi_i2d>
 80061d8:	a361      	add	r3, pc, #388	; (adr r3, 8006360 <_dtoa_r+0x2c8>)
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	f7fa fa0b 	bl	80005f8 <__aeabi_dmul>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4630      	mov	r0, r6
 80061e8:	4639      	mov	r1, r7
 80061ea:	f7fa f84f 	bl	800028c <__adddf3>
 80061ee:	4606      	mov	r6, r0
 80061f0:	460f      	mov	r7, r1
 80061f2:	f7fa fcb1 	bl	8000b58 <__aeabi_d2iz>
 80061f6:	2200      	movs	r2, #0
 80061f8:	9000      	str	r0, [sp, #0]
 80061fa:	2300      	movs	r3, #0
 80061fc:	4630      	mov	r0, r6
 80061fe:	4639      	mov	r1, r7
 8006200:	f7fa fc6c 	bl	8000adc <__aeabi_dcmplt>
 8006204:	b150      	cbz	r0, 800621c <_dtoa_r+0x184>
 8006206:	9800      	ldr	r0, [sp, #0]
 8006208:	f7fa f98c 	bl	8000524 <__aeabi_i2d>
 800620c:	4632      	mov	r2, r6
 800620e:	463b      	mov	r3, r7
 8006210:	f7fa fc5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006214:	b910      	cbnz	r0, 800621c <_dtoa_r+0x184>
 8006216:	9b00      	ldr	r3, [sp, #0]
 8006218:	3b01      	subs	r3, #1
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	9b00      	ldr	r3, [sp, #0]
 800621e:	2b16      	cmp	r3, #22
 8006220:	d85a      	bhi.n	80062d8 <_dtoa_r+0x240>
 8006222:	9a00      	ldr	r2, [sp, #0]
 8006224:	4b57      	ldr	r3, [pc, #348]	; (8006384 <_dtoa_r+0x2ec>)
 8006226:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	ec51 0b19 	vmov	r0, r1, d9
 8006232:	f7fa fc53 	bl	8000adc <__aeabi_dcmplt>
 8006236:	2800      	cmp	r0, #0
 8006238:	d050      	beq.n	80062dc <_dtoa_r+0x244>
 800623a:	9b00      	ldr	r3, [sp, #0]
 800623c:	3b01      	subs	r3, #1
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	2300      	movs	r3, #0
 8006242:	930b      	str	r3, [sp, #44]	; 0x2c
 8006244:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006246:	1b5d      	subs	r5, r3, r5
 8006248:	1e6b      	subs	r3, r5, #1
 800624a:	9305      	str	r3, [sp, #20]
 800624c:	bf45      	ittet	mi
 800624e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006252:	9304      	strmi	r3, [sp, #16]
 8006254:	2300      	movpl	r3, #0
 8006256:	2300      	movmi	r3, #0
 8006258:	bf4c      	ite	mi
 800625a:	9305      	strmi	r3, [sp, #20]
 800625c:	9304      	strpl	r3, [sp, #16]
 800625e:	9b00      	ldr	r3, [sp, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	db3d      	blt.n	80062e0 <_dtoa_r+0x248>
 8006264:	9b05      	ldr	r3, [sp, #20]
 8006266:	9a00      	ldr	r2, [sp, #0]
 8006268:	920a      	str	r2, [sp, #40]	; 0x28
 800626a:	4413      	add	r3, r2
 800626c:	9305      	str	r3, [sp, #20]
 800626e:	2300      	movs	r3, #0
 8006270:	9307      	str	r3, [sp, #28]
 8006272:	9b06      	ldr	r3, [sp, #24]
 8006274:	2b09      	cmp	r3, #9
 8006276:	f200 8089 	bhi.w	800638c <_dtoa_r+0x2f4>
 800627a:	2b05      	cmp	r3, #5
 800627c:	bfc4      	itt	gt
 800627e:	3b04      	subgt	r3, #4
 8006280:	9306      	strgt	r3, [sp, #24]
 8006282:	9b06      	ldr	r3, [sp, #24]
 8006284:	f1a3 0302 	sub.w	r3, r3, #2
 8006288:	bfcc      	ite	gt
 800628a:	2500      	movgt	r5, #0
 800628c:	2501      	movle	r5, #1
 800628e:	2b03      	cmp	r3, #3
 8006290:	f200 8087 	bhi.w	80063a2 <_dtoa_r+0x30a>
 8006294:	e8df f003 	tbb	[pc, r3]
 8006298:	59383a2d 	.word	0x59383a2d
 800629c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80062a0:	441d      	add	r5, r3
 80062a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	bfc1      	itttt	gt
 80062aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80062ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80062b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80062b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80062ba:	bfda      	itte	le
 80062bc:	f1c3 0320 	rsble	r3, r3, #32
 80062c0:	fa06 f003 	lslle.w	r0, r6, r3
 80062c4:	4318      	orrgt	r0, r3
 80062c6:	f7fa f91d 	bl	8000504 <__aeabi_ui2d>
 80062ca:	2301      	movs	r3, #1
 80062cc:	4606      	mov	r6, r0
 80062ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80062d2:	3d01      	subs	r5, #1
 80062d4:	930e      	str	r3, [sp, #56]	; 0x38
 80062d6:	e76a      	b.n	80061ae <_dtoa_r+0x116>
 80062d8:	2301      	movs	r3, #1
 80062da:	e7b2      	b.n	8006242 <_dtoa_r+0x1aa>
 80062dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80062de:	e7b1      	b.n	8006244 <_dtoa_r+0x1ac>
 80062e0:	9b04      	ldr	r3, [sp, #16]
 80062e2:	9a00      	ldr	r2, [sp, #0]
 80062e4:	1a9b      	subs	r3, r3, r2
 80062e6:	9304      	str	r3, [sp, #16]
 80062e8:	4253      	negs	r3, r2
 80062ea:	9307      	str	r3, [sp, #28]
 80062ec:	2300      	movs	r3, #0
 80062ee:	930a      	str	r3, [sp, #40]	; 0x28
 80062f0:	e7bf      	b.n	8006272 <_dtoa_r+0x1da>
 80062f2:	2300      	movs	r3, #0
 80062f4:	9308      	str	r3, [sp, #32]
 80062f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	dc55      	bgt.n	80063a8 <_dtoa_r+0x310>
 80062fc:	2301      	movs	r3, #1
 80062fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006302:	461a      	mov	r2, r3
 8006304:	9209      	str	r2, [sp, #36]	; 0x24
 8006306:	e00c      	b.n	8006322 <_dtoa_r+0x28a>
 8006308:	2301      	movs	r3, #1
 800630a:	e7f3      	b.n	80062f4 <_dtoa_r+0x25c>
 800630c:	2300      	movs	r3, #0
 800630e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006310:	9308      	str	r3, [sp, #32]
 8006312:	9b00      	ldr	r3, [sp, #0]
 8006314:	4413      	add	r3, r2
 8006316:	9302      	str	r3, [sp, #8]
 8006318:	3301      	adds	r3, #1
 800631a:	2b01      	cmp	r3, #1
 800631c:	9303      	str	r3, [sp, #12]
 800631e:	bfb8      	it	lt
 8006320:	2301      	movlt	r3, #1
 8006322:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006324:	2200      	movs	r2, #0
 8006326:	6042      	str	r2, [r0, #4]
 8006328:	2204      	movs	r2, #4
 800632a:	f102 0614 	add.w	r6, r2, #20
 800632e:	429e      	cmp	r6, r3
 8006330:	6841      	ldr	r1, [r0, #4]
 8006332:	d93d      	bls.n	80063b0 <_dtoa_r+0x318>
 8006334:	4620      	mov	r0, r4
 8006336:	f000 fec9 	bl	80070cc <_Balloc>
 800633a:	9001      	str	r0, [sp, #4]
 800633c:	2800      	cmp	r0, #0
 800633e:	d13b      	bne.n	80063b8 <_dtoa_r+0x320>
 8006340:	4b11      	ldr	r3, [pc, #68]	; (8006388 <_dtoa_r+0x2f0>)
 8006342:	4602      	mov	r2, r0
 8006344:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006348:	e6c0      	b.n	80060cc <_dtoa_r+0x34>
 800634a:	2301      	movs	r3, #1
 800634c:	e7df      	b.n	800630e <_dtoa_r+0x276>
 800634e:	bf00      	nop
 8006350:	636f4361 	.word	0x636f4361
 8006354:	3fd287a7 	.word	0x3fd287a7
 8006358:	8b60c8b3 	.word	0x8b60c8b3
 800635c:	3fc68a28 	.word	0x3fc68a28
 8006360:	509f79fb 	.word	0x509f79fb
 8006364:	3fd34413 	.word	0x3fd34413
 8006368:	08008695 	.word	0x08008695
 800636c:	080086ac 	.word	0x080086ac
 8006370:	7ff00000 	.word	0x7ff00000
 8006374:	08008691 	.word	0x08008691
 8006378:	08008688 	.word	0x08008688
 800637c:	08008665 	.word	0x08008665
 8006380:	3ff80000 	.word	0x3ff80000
 8006384:	08008800 	.word	0x08008800
 8006388:	08008707 	.word	0x08008707
 800638c:	2501      	movs	r5, #1
 800638e:	2300      	movs	r3, #0
 8006390:	9306      	str	r3, [sp, #24]
 8006392:	9508      	str	r5, [sp, #32]
 8006394:	f04f 33ff 	mov.w	r3, #4294967295
 8006398:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800639c:	2200      	movs	r2, #0
 800639e:	2312      	movs	r3, #18
 80063a0:	e7b0      	b.n	8006304 <_dtoa_r+0x26c>
 80063a2:	2301      	movs	r3, #1
 80063a4:	9308      	str	r3, [sp, #32]
 80063a6:	e7f5      	b.n	8006394 <_dtoa_r+0x2fc>
 80063a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80063ae:	e7b8      	b.n	8006322 <_dtoa_r+0x28a>
 80063b0:	3101      	adds	r1, #1
 80063b2:	6041      	str	r1, [r0, #4]
 80063b4:	0052      	lsls	r2, r2, #1
 80063b6:	e7b8      	b.n	800632a <_dtoa_r+0x292>
 80063b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063ba:	9a01      	ldr	r2, [sp, #4]
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	9b03      	ldr	r3, [sp, #12]
 80063c0:	2b0e      	cmp	r3, #14
 80063c2:	f200 809d 	bhi.w	8006500 <_dtoa_r+0x468>
 80063c6:	2d00      	cmp	r5, #0
 80063c8:	f000 809a 	beq.w	8006500 <_dtoa_r+0x468>
 80063cc:	9b00      	ldr	r3, [sp, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	dd32      	ble.n	8006438 <_dtoa_r+0x3a0>
 80063d2:	4ab7      	ldr	r2, [pc, #732]	; (80066b0 <_dtoa_r+0x618>)
 80063d4:	f003 030f 	and.w	r3, r3, #15
 80063d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80063dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063e0:	9b00      	ldr	r3, [sp, #0]
 80063e2:	05d8      	lsls	r0, r3, #23
 80063e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80063e8:	d516      	bpl.n	8006418 <_dtoa_r+0x380>
 80063ea:	4bb2      	ldr	r3, [pc, #712]	; (80066b4 <_dtoa_r+0x61c>)
 80063ec:	ec51 0b19 	vmov	r0, r1, d9
 80063f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063f4:	f7fa fa2a 	bl	800084c <__aeabi_ddiv>
 80063f8:	f007 070f 	and.w	r7, r7, #15
 80063fc:	4682      	mov	sl, r0
 80063fe:	468b      	mov	fp, r1
 8006400:	2503      	movs	r5, #3
 8006402:	4eac      	ldr	r6, [pc, #688]	; (80066b4 <_dtoa_r+0x61c>)
 8006404:	b957      	cbnz	r7, 800641c <_dtoa_r+0x384>
 8006406:	4642      	mov	r2, r8
 8006408:	464b      	mov	r3, r9
 800640a:	4650      	mov	r0, sl
 800640c:	4659      	mov	r1, fp
 800640e:	f7fa fa1d 	bl	800084c <__aeabi_ddiv>
 8006412:	4682      	mov	sl, r0
 8006414:	468b      	mov	fp, r1
 8006416:	e028      	b.n	800646a <_dtoa_r+0x3d2>
 8006418:	2502      	movs	r5, #2
 800641a:	e7f2      	b.n	8006402 <_dtoa_r+0x36a>
 800641c:	07f9      	lsls	r1, r7, #31
 800641e:	d508      	bpl.n	8006432 <_dtoa_r+0x39a>
 8006420:	4640      	mov	r0, r8
 8006422:	4649      	mov	r1, r9
 8006424:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006428:	f7fa f8e6 	bl	80005f8 <__aeabi_dmul>
 800642c:	3501      	adds	r5, #1
 800642e:	4680      	mov	r8, r0
 8006430:	4689      	mov	r9, r1
 8006432:	107f      	asrs	r7, r7, #1
 8006434:	3608      	adds	r6, #8
 8006436:	e7e5      	b.n	8006404 <_dtoa_r+0x36c>
 8006438:	f000 809b 	beq.w	8006572 <_dtoa_r+0x4da>
 800643c:	9b00      	ldr	r3, [sp, #0]
 800643e:	4f9d      	ldr	r7, [pc, #628]	; (80066b4 <_dtoa_r+0x61c>)
 8006440:	425e      	negs	r6, r3
 8006442:	4b9b      	ldr	r3, [pc, #620]	; (80066b0 <_dtoa_r+0x618>)
 8006444:	f006 020f 	and.w	r2, r6, #15
 8006448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	ec51 0b19 	vmov	r0, r1, d9
 8006454:	f7fa f8d0 	bl	80005f8 <__aeabi_dmul>
 8006458:	1136      	asrs	r6, r6, #4
 800645a:	4682      	mov	sl, r0
 800645c:	468b      	mov	fp, r1
 800645e:	2300      	movs	r3, #0
 8006460:	2502      	movs	r5, #2
 8006462:	2e00      	cmp	r6, #0
 8006464:	d17a      	bne.n	800655c <_dtoa_r+0x4c4>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1d3      	bne.n	8006412 <_dtoa_r+0x37a>
 800646a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 8082 	beq.w	8006576 <_dtoa_r+0x4de>
 8006472:	4b91      	ldr	r3, [pc, #580]	; (80066b8 <_dtoa_r+0x620>)
 8006474:	2200      	movs	r2, #0
 8006476:	4650      	mov	r0, sl
 8006478:	4659      	mov	r1, fp
 800647a:	f7fa fb2f 	bl	8000adc <__aeabi_dcmplt>
 800647e:	2800      	cmp	r0, #0
 8006480:	d079      	beq.n	8006576 <_dtoa_r+0x4de>
 8006482:	9b03      	ldr	r3, [sp, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d076      	beq.n	8006576 <_dtoa_r+0x4de>
 8006488:	9b02      	ldr	r3, [sp, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	dd36      	ble.n	80064fc <_dtoa_r+0x464>
 800648e:	9b00      	ldr	r3, [sp, #0]
 8006490:	4650      	mov	r0, sl
 8006492:	4659      	mov	r1, fp
 8006494:	1e5f      	subs	r7, r3, #1
 8006496:	2200      	movs	r2, #0
 8006498:	4b88      	ldr	r3, [pc, #544]	; (80066bc <_dtoa_r+0x624>)
 800649a:	f7fa f8ad 	bl	80005f8 <__aeabi_dmul>
 800649e:	9e02      	ldr	r6, [sp, #8]
 80064a0:	4682      	mov	sl, r0
 80064a2:	468b      	mov	fp, r1
 80064a4:	3501      	adds	r5, #1
 80064a6:	4628      	mov	r0, r5
 80064a8:	f7fa f83c 	bl	8000524 <__aeabi_i2d>
 80064ac:	4652      	mov	r2, sl
 80064ae:	465b      	mov	r3, fp
 80064b0:	f7fa f8a2 	bl	80005f8 <__aeabi_dmul>
 80064b4:	4b82      	ldr	r3, [pc, #520]	; (80066c0 <_dtoa_r+0x628>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	f7f9 fee8 	bl	800028c <__adddf3>
 80064bc:	46d0      	mov	r8, sl
 80064be:	46d9      	mov	r9, fp
 80064c0:	4682      	mov	sl, r0
 80064c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80064c6:	2e00      	cmp	r6, #0
 80064c8:	d158      	bne.n	800657c <_dtoa_r+0x4e4>
 80064ca:	4b7e      	ldr	r3, [pc, #504]	; (80066c4 <_dtoa_r+0x62c>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	4640      	mov	r0, r8
 80064d0:	4649      	mov	r1, r9
 80064d2:	f7f9 fed9 	bl	8000288 <__aeabi_dsub>
 80064d6:	4652      	mov	r2, sl
 80064d8:	465b      	mov	r3, fp
 80064da:	4680      	mov	r8, r0
 80064dc:	4689      	mov	r9, r1
 80064de:	f7fa fb1b 	bl	8000b18 <__aeabi_dcmpgt>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	f040 8295 	bne.w	8006a12 <_dtoa_r+0x97a>
 80064e8:	4652      	mov	r2, sl
 80064ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80064ee:	4640      	mov	r0, r8
 80064f0:	4649      	mov	r1, r9
 80064f2:	f7fa faf3 	bl	8000adc <__aeabi_dcmplt>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	f040 8289 	bne.w	8006a0e <_dtoa_r+0x976>
 80064fc:	ec5b ab19 	vmov	sl, fp, d9
 8006500:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006502:	2b00      	cmp	r3, #0
 8006504:	f2c0 8148 	blt.w	8006798 <_dtoa_r+0x700>
 8006508:	9a00      	ldr	r2, [sp, #0]
 800650a:	2a0e      	cmp	r2, #14
 800650c:	f300 8144 	bgt.w	8006798 <_dtoa_r+0x700>
 8006510:	4b67      	ldr	r3, [pc, #412]	; (80066b0 <_dtoa_r+0x618>)
 8006512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006516:	e9d3 8900 	ldrd	r8, r9, [r3]
 800651a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800651c:	2b00      	cmp	r3, #0
 800651e:	f280 80d5 	bge.w	80066cc <_dtoa_r+0x634>
 8006522:	9b03      	ldr	r3, [sp, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	f300 80d1 	bgt.w	80066cc <_dtoa_r+0x634>
 800652a:	f040 826f 	bne.w	8006a0c <_dtoa_r+0x974>
 800652e:	4b65      	ldr	r3, [pc, #404]	; (80066c4 <_dtoa_r+0x62c>)
 8006530:	2200      	movs	r2, #0
 8006532:	4640      	mov	r0, r8
 8006534:	4649      	mov	r1, r9
 8006536:	f7fa f85f 	bl	80005f8 <__aeabi_dmul>
 800653a:	4652      	mov	r2, sl
 800653c:	465b      	mov	r3, fp
 800653e:	f7fa fae1 	bl	8000b04 <__aeabi_dcmpge>
 8006542:	9e03      	ldr	r6, [sp, #12]
 8006544:	4637      	mov	r7, r6
 8006546:	2800      	cmp	r0, #0
 8006548:	f040 8245 	bne.w	80069d6 <_dtoa_r+0x93e>
 800654c:	9d01      	ldr	r5, [sp, #4]
 800654e:	2331      	movs	r3, #49	; 0x31
 8006550:	f805 3b01 	strb.w	r3, [r5], #1
 8006554:	9b00      	ldr	r3, [sp, #0]
 8006556:	3301      	adds	r3, #1
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	e240      	b.n	80069de <_dtoa_r+0x946>
 800655c:	07f2      	lsls	r2, r6, #31
 800655e:	d505      	bpl.n	800656c <_dtoa_r+0x4d4>
 8006560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006564:	f7fa f848 	bl	80005f8 <__aeabi_dmul>
 8006568:	3501      	adds	r5, #1
 800656a:	2301      	movs	r3, #1
 800656c:	1076      	asrs	r6, r6, #1
 800656e:	3708      	adds	r7, #8
 8006570:	e777      	b.n	8006462 <_dtoa_r+0x3ca>
 8006572:	2502      	movs	r5, #2
 8006574:	e779      	b.n	800646a <_dtoa_r+0x3d2>
 8006576:	9f00      	ldr	r7, [sp, #0]
 8006578:	9e03      	ldr	r6, [sp, #12]
 800657a:	e794      	b.n	80064a6 <_dtoa_r+0x40e>
 800657c:	9901      	ldr	r1, [sp, #4]
 800657e:	4b4c      	ldr	r3, [pc, #304]	; (80066b0 <_dtoa_r+0x618>)
 8006580:	4431      	add	r1, r6
 8006582:	910d      	str	r1, [sp, #52]	; 0x34
 8006584:	9908      	ldr	r1, [sp, #32]
 8006586:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800658a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800658e:	2900      	cmp	r1, #0
 8006590:	d043      	beq.n	800661a <_dtoa_r+0x582>
 8006592:	494d      	ldr	r1, [pc, #308]	; (80066c8 <_dtoa_r+0x630>)
 8006594:	2000      	movs	r0, #0
 8006596:	f7fa f959 	bl	800084c <__aeabi_ddiv>
 800659a:	4652      	mov	r2, sl
 800659c:	465b      	mov	r3, fp
 800659e:	f7f9 fe73 	bl	8000288 <__aeabi_dsub>
 80065a2:	9d01      	ldr	r5, [sp, #4]
 80065a4:	4682      	mov	sl, r0
 80065a6:	468b      	mov	fp, r1
 80065a8:	4649      	mov	r1, r9
 80065aa:	4640      	mov	r0, r8
 80065ac:	f7fa fad4 	bl	8000b58 <__aeabi_d2iz>
 80065b0:	4606      	mov	r6, r0
 80065b2:	f7f9 ffb7 	bl	8000524 <__aeabi_i2d>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4640      	mov	r0, r8
 80065bc:	4649      	mov	r1, r9
 80065be:	f7f9 fe63 	bl	8000288 <__aeabi_dsub>
 80065c2:	3630      	adds	r6, #48	; 0x30
 80065c4:	f805 6b01 	strb.w	r6, [r5], #1
 80065c8:	4652      	mov	r2, sl
 80065ca:	465b      	mov	r3, fp
 80065cc:	4680      	mov	r8, r0
 80065ce:	4689      	mov	r9, r1
 80065d0:	f7fa fa84 	bl	8000adc <__aeabi_dcmplt>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d163      	bne.n	80066a0 <_dtoa_r+0x608>
 80065d8:	4642      	mov	r2, r8
 80065da:	464b      	mov	r3, r9
 80065dc:	4936      	ldr	r1, [pc, #216]	; (80066b8 <_dtoa_r+0x620>)
 80065de:	2000      	movs	r0, #0
 80065e0:	f7f9 fe52 	bl	8000288 <__aeabi_dsub>
 80065e4:	4652      	mov	r2, sl
 80065e6:	465b      	mov	r3, fp
 80065e8:	f7fa fa78 	bl	8000adc <__aeabi_dcmplt>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	f040 80b5 	bne.w	800675c <_dtoa_r+0x6c4>
 80065f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065f4:	429d      	cmp	r5, r3
 80065f6:	d081      	beq.n	80064fc <_dtoa_r+0x464>
 80065f8:	4b30      	ldr	r3, [pc, #192]	; (80066bc <_dtoa_r+0x624>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	4650      	mov	r0, sl
 80065fe:	4659      	mov	r1, fp
 8006600:	f7f9 fffa 	bl	80005f8 <__aeabi_dmul>
 8006604:	4b2d      	ldr	r3, [pc, #180]	; (80066bc <_dtoa_r+0x624>)
 8006606:	4682      	mov	sl, r0
 8006608:	468b      	mov	fp, r1
 800660a:	4640      	mov	r0, r8
 800660c:	4649      	mov	r1, r9
 800660e:	2200      	movs	r2, #0
 8006610:	f7f9 fff2 	bl	80005f8 <__aeabi_dmul>
 8006614:	4680      	mov	r8, r0
 8006616:	4689      	mov	r9, r1
 8006618:	e7c6      	b.n	80065a8 <_dtoa_r+0x510>
 800661a:	4650      	mov	r0, sl
 800661c:	4659      	mov	r1, fp
 800661e:	f7f9 ffeb 	bl	80005f8 <__aeabi_dmul>
 8006622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006624:	9d01      	ldr	r5, [sp, #4]
 8006626:	930f      	str	r3, [sp, #60]	; 0x3c
 8006628:	4682      	mov	sl, r0
 800662a:	468b      	mov	fp, r1
 800662c:	4649      	mov	r1, r9
 800662e:	4640      	mov	r0, r8
 8006630:	f7fa fa92 	bl	8000b58 <__aeabi_d2iz>
 8006634:	4606      	mov	r6, r0
 8006636:	f7f9 ff75 	bl	8000524 <__aeabi_i2d>
 800663a:	3630      	adds	r6, #48	; 0x30
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4640      	mov	r0, r8
 8006642:	4649      	mov	r1, r9
 8006644:	f7f9 fe20 	bl	8000288 <__aeabi_dsub>
 8006648:	f805 6b01 	strb.w	r6, [r5], #1
 800664c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800664e:	429d      	cmp	r5, r3
 8006650:	4680      	mov	r8, r0
 8006652:	4689      	mov	r9, r1
 8006654:	f04f 0200 	mov.w	r2, #0
 8006658:	d124      	bne.n	80066a4 <_dtoa_r+0x60c>
 800665a:	4b1b      	ldr	r3, [pc, #108]	; (80066c8 <_dtoa_r+0x630>)
 800665c:	4650      	mov	r0, sl
 800665e:	4659      	mov	r1, fp
 8006660:	f7f9 fe14 	bl	800028c <__adddf3>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4640      	mov	r0, r8
 800666a:	4649      	mov	r1, r9
 800666c:	f7fa fa54 	bl	8000b18 <__aeabi_dcmpgt>
 8006670:	2800      	cmp	r0, #0
 8006672:	d173      	bne.n	800675c <_dtoa_r+0x6c4>
 8006674:	4652      	mov	r2, sl
 8006676:	465b      	mov	r3, fp
 8006678:	4913      	ldr	r1, [pc, #76]	; (80066c8 <_dtoa_r+0x630>)
 800667a:	2000      	movs	r0, #0
 800667c:	f7f9 fe04 	bl	8000288 <__aeabi_dsub>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4640      	mov	r0, r8
 8006686:	4649      	mov	r1, r9
 8006688:	f7fa fa28 	bl	8000adc <__aeabi_dcmplt>
 800668c:	2800      	cmp	r0, #0
 800668e:	f43f af35 	beq.w	80064fc <_dtoa_r+0x464>
 8006692:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006694:	1e6b      	subs	r3, r5, #1
 8006696:	930f      	str	r3, [sp, #60]	; 0x3c
 8006698:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800669c:	2b30      	cmp	r3, #48	; 0x30
 800669e:	d0f8      	beq.n	8006692 <_dtoa_r+0x5fa>
 80066a0:	9700      	str	r7, [sp, #0]
 80066a2:	e049      	b.n	8006738 <_dtoa_r+0x6a0>
 80066a4:	4b05      	ldr	r3, [pc, #20]	; (80066bc <_dtoa_r+0x624>)
 80066a6:	f7f9 ffa7 	bl	80005f8 <__aeabi_dmul>
 80066aa:	4680      	mov	r8, r0
 80066ac:	4689      	mov	r9, r1
 80066ae:	e7bd      	b.n	800662c <_dtoa_r+0x594>
 80066b0:	08008800 	.word	0x08008800
 80066b4:	080087d8 	.word	0x080087d8
 80066b8:	3ff00000 	.word	0x3ff00000
 80066bc:	40240000 	.word	0x40240000
 80066c0:	401c0000 	.word	0x401c0000
 80066c4:	40140000 	.word	0x40140000
 80066c8:	3fe00000 	.word	0x3fe00000
 80066cc:	9d01      	ldr	r5, [sp, #4]
 80066ce:	4656      	mov	r6, sl
 80066d0:	465f      	mov	r7, fp
 80066d2:	4642      	mov	r2, r8
 80066d4:	464b      	mov	r3, r9
 80066d6:	4630      	mov	r0, r6
 80066d8:	4639      	mov	r1, r7
 80066da:	f7fa f8b7 	bl	800084c <__aeabi_ddiv>
 80066de:	f7fa fa3b 	bl	8000b58 <__aeabi_d2iz>
 80066e2:	4682      	mov	sl, r0
 80066e4:	f7f9 ff1e 	bl	8000524 <__aeabi_i2d>
 80066e8:	4642      	mov	r2, r8
 80066ea:	464b      	mov	r3, r9
 80066ec:	f7f9 ff84 	bl	80005f8 <__aeabi_dmul>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4630      	mov	r0, r6
 80066f6:	4639      	mov	r1, r7
 80066f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80066fc:	f7f9 fdc4 	bl	8000288 <__aeabi_dsub>
 8006700:	f805 6b01 	strb.w	r6, [r5], #1
 8006704:	9e01      	ldr	r6, [sp, #4]
 8006706:	9f03      	ldr	r7, [sp, #12]
 8006708:	1bae      	subs	r6, r5, r6
 800670a:	42b7      	cmp	r7, r6
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	d135      	bne.n	800677e <_dtoa_r+0x6e6>
 8006712:	f7f9 fdbb 	bl	800028c <__adddf3>
 8006716:	4642      	mov	r2, r8
 8006718:	464b      	mov	r3, r9
 800671a:	4606      	mov	r6, r0
 800671c:	460f      	mov	r7, r1
 800671e:	f7fa f9fb 	bl	8000b18 <__aeabi_dcmpgt>
 8006722:	b9d0      	cbnz	r0, 800675a <_dtoa_r+0x6c2>
 8006724:	4642      	mov	r2, r8
 8006726:	464b      	mov	r3, r9
 8006728:	4630      	mov	r0, r6
 800672a:	4639      	mov	r1, r7
 800672c:	f7fa f9cc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006730:	b110      	cbz	r0, 8006738 <_dtoa_r+0x6a0>
 8006732:	f01a 0f01 	tst.w	sl, #1
 8006736:	d110      	bne.n	800675a <_dtoa_r+0x6c2>
 8006738:	4620      	mov	r0, r4
 800673a:	ee18 1a10 	vmov	r1, s16
 800673e:	f000 fd05 	bl	800714c <_Bfree>
 8006742:	2300      	movs	r3, #0
 8006744:	9800      	ldr	r0, [sp, #0]
 8006746:	702b      	strb	r3, [r5, #0]
 8006748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800674a:	3001      	adds	r0, #1
 800674c:	6018      	str	r0, [r3, #0]
 800674e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006750:	2b00      	cmp	r3, #0
 8006752:	f43f acf1 	beq.w	8006138 <_dtoa_r+0xa0>
 8006756:	601d      	str	r5, [r3, #0]
 8006758:	e4ee      	b.n	8006138 <_dtoa_r+0xa0>
 800675a:	9f00      	ldr	r7, [sp, #0]
 800675c:	462b      	mov	r3, r5
 800675e:	461d      	mov	r5, r3
 8006760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006764:	2a39      	cmp	r2, #57	; 0x39
 8006766:	d106      	bne.n	8006776 <_dtoa_r+0x6de>
 8006768:	9a01      	ldr	r2, [sp, #4]
 800676a:	429a      	cmp	r2, r3
 800676c:	d1f7      	bne.n	800675e <_dtoa_r+0x6c6>
 800676e:	9901      	ldr	r1, [sp, #4]
 8006770:	2230      	movs	r2, #48	; 0x30
 8006772:	3701      	adds	r7, #1
 8006774:	700a      	strb	r2, [r1, #0]
 8006776:	781a      	ldrb	r2, [r3, #0]
 8006778:	3201      	adds	r2, #1
 800677a:	701a      	strb	r2, [r3, #0]
 800677c:	e790      	b.n	80066a0 <_dtoa_r+0x608>
 800677e:	4ba6      	ldr	r3, [pc, #664]	; (8006a18 <_dtoa_r+0x980>)
 8006780:	2200      	movs	r2, #0
 8006782:	f7f9 ff39 	bl	80005f8 <__aeabi_dmul>
 8006786:	2200      	movs	r2, #0
 8006788:	2300      	movs	r3, #0
 800678a:	4606      	mov	r6, r0
 800678c:	460f      	mov	r7, r1
 800678e:	f7fa f99b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006792:	2800      	cmp	r0, #0
 8006794:	d09d      	beq.n	80066d2 <_dtoa_r+0x63a>
 8006796:	e7cf      	b.n	8006738 <_dtoa_r+0x6a0>
 8006798:	9a08      	ldr	r2, [sp, #32]
 800679a:	2a00      	cmp	r2, #0
 800679c:	f000 80d7 	beq.w	800694e <_dtoa_r+0x8b6>
 80067a0:	9a06      	ldr	r2, [sp, #24]
 80067a2:	2a01      	cmp	r2, #1
 80067a4:	f300 80ba 	bgt.w	800691c <_dtoa_r+0x884>
 80067a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067aa:	2a00      	cmp	r2, #0
 80067ac:	f000 80b2 	beq.w	8006914 <_dtoa_r+0x87c>
 80067b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067b4:	9e07      	ldr	r6, [sp, #28]
 80067b6:	9d04      	ldr	r5, [sp, #16]
 80067b8:	9a04      	ldr	r2, [sp, #16]
 80067ba:	441a      	add	r2, r3
 80067bc:	9204      	str	r2, [sp, #16]
 80067be:	9a05      	ldr	r2, [sp, #20]
 80067c0:	2101      	movs	r1, #1
 80067c2:	441a      	add	r2, r3
 80067c4:	4620      	mov	r0, r4
 80067c6:	9205      	str	r2, [sp, #20]
 80067c8:	f000 fd78 	bl	80072bc <__i2b>
 80067cc:	4607      	mov	r7, r0
 80067ce:	2d00      	cmp	r5, #0
 80067d0:	dd0c      	ble.n	80067ec <_dtoa_r+0x754>
 80067d2:	9b05      	ldr	r3, [sp, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	dd09      	ble.n	80067ec <_dtoa_r+0x754>
 80067d8:	42ab      	cmp	r3, r5
 80067da:	9a04      	ldr	r2, [sp, #16]
 80067dc:	bfa8      	it	ge
 80067de:	462b      	movge	r3, r5
 80067e0:	1ad2      	subs	r2, r2, r3
 80067e2:	9204      	str	r2, [sp, #16]
 80067e4:	9a05      	ldr	r2, [sp, #20]
 80067e6:	1aed      	subs	r5, r5, r3
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	9305      	str	r3, [sp, #20]
 80067ec:	9b07      	ldr	r3, [sp, #28]
 80067ee:	b31b      	cbz	r3, 8006838 <_dtoa_r+0x7a0>
 80067f0:	9b08      	ldr	r3, [sp, #32]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 80af 	beq.w	8006956 <_dtoa_r+0x8be>
 80067f8:	2e00      	cmp	r6, #0
 80067fa:	dd13      	ble.n	8006824 <_dtoa_r+0x78c>
 80067fc:	4639      	mov	r1, r7
 80067fe:	4632      	mov	r2, r6
 8006800:	4620      	mov	r0, r4
 8006802:	f000 fe1b 	bl	800743c <__pow5mult>
 8006806:	ee18 2a10 	vmov	r2, s16
 800680a:	4601      	mov	r1, r0
 800680c:	4607      	mov	r7, r0
 800680e:	4620      	mov	r0, r4
 8006810:	f000 fd6a 	bl	80072e8 <__multiply>
 8006814:	ee18 1a10 	vmov	r1, s16
 8006818:	4680      	mov	r8, r0
 800681a:	4620      	mov	r0, r4
 800681c:	f000 fc96 	bl	800714c <_Bfree>
 8006820:	ee08 8a10 	vmov	s16, r8
 8006824:	9b07      	ldr	r3, [sp, #28]
 8006826:	1b9a      	subs	r2, r3, r6
 8006828:	d006      	beq.n	8006838 <_dtoa_r+0x7a0>
 800682a:	ee18 1a10 	vmov	r1, s16
 800682e:	4620      	mov	r0, r4
 8006830:	f000 fe04 	bl	800743c <__pow5mult>
 8006834:	ee08 0a10 	vmov	s16, r0
 8006838:	2101      	movs	r1, #1
 800683a:	4620      	mov	r0, r4
 800683c:	f000 fd3e 	bl	80072bc <__i2b>
 8006840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006842:	2b00      	cmp	r3, #0
 8006844:	4606      	mov	r6, r0
 8006846:	f340 8088 	ble.w	800695a <_dtoa_r+0x8c2>
 800684a:	461a      	mov	r2, r3
 800684c:	4601      	mov	r1, r0
 800684e:	4620      	mov	r0, r4
 8006850:	f000 fdf4 	bl	800743c <__pow5mult>
 8006854:	9b06      	ldr	r3, [sp, #24]
 8006856:	2b01      	cmp	r3, #1
 8006858:	4606      	mov	r6, r0
 800685a:	f340 8081 	ble.w	8006960 <_dtoa_r+0x8c8>
 800685e:	f04f 0800 	mov.w	r8, #0
 8006862:	6933      	ldr	r3, [r6, #16]
 8006864:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006868:	6918      	ldr	r0, [r3, #16]
 800686a:	f000 fcd7 	bl	800721c <__hi0bits>
 800686e:	f1c0 0020 	rsb	r0, r0, #32
 8006872:	9b05      	ldr	r3, [sp, #20]
 8006874:	4418      	add	r0, r3
 8006876:	f010 001f 	ands.w	r0, r0, #31
 800687a:	f000 8092 	beq.w	80069a2 <_dtoa_r+0x90a>
 800687e:	f1c0 0320 	rsb	r3, r0, #32
 8006882:	2b04      	cmp	r3, #4
 8006884:	f340 808a 	ble.w	800699c <_dtoa_r+0x904>
 8006888:	f1c0 001c 	rsb	r0, r0, #28
 800688c:	9b04      	ldr	r3, [sp, #16]
 800688e:	4403      	add	r3, r0
 8006890:	9304      	str	r3, [sp, #16]
 8006892:	9b05      	ldr	r3, [sp, #20]
 8006894:	4403      	add	r3, r0
 8006896:	4405      	add	r5, r0
 8006898:	9305      	str	r3, [sp, #20]
 800689a:	9b04      	ldr	r3, [sp, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	dd07      	ble.n	80068b0 <_dtoa_r+0x818>
 80068a0:	ee18 1a10 	vmov	r1, s16
 80068a4:	461a      	mov	r2, r3
 80068a6:	4620      	mov	r0, r4
 80068a8:	f000 fe22 	bl	80074f0 <__lshift>
 80068ac:	ee08 0a10 	vmov	s16, r0
 80068b0:	9b05      	ldr	r3, [sp, #20]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	dd05      	ble.n	80068c2 <_dtoa_r+0x82a>
 80068b6:	4631      	mov	r1, r6
 80068b8:	461a      	mov	r2, r3
 80068ba:	4620      	mov	r0, r4
 80068bc:	f000 fe18 	bl	80074f0 <__lshift>
 80068c0:	4606      	mov	r6, r0
 80068c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d06e      	beq.n	80069a6 <_dtoa_r+0x90e>
 80068c8:	ee18 0a10 	vmov	r0, s16
 80068cc:	4631      	mov	r1, r6
 80068ce:	f000 fe7f 	bl	80075d0 <__mcmp>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	da67      	bge.n	80069a6 <_dtoa_r+0x90e>
 80068d6:	9b00      	ldr	r3, [sp, #0]
 80068d8:	3b01      	subs	r3, #1
 80068da:	ee18 1a10 	vmov	r1, s16
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	220a      	movs	r2, #10
 80068e2:	2300      	movs	r3, #0
 80068e4:	4620      	mov	r0, r4
 80068e6:	f000 fc53 	bl	8007190 <__multadd>
 80068ea:	9b08      	ldr	r3, [sp, #32]
 80068ec:	ee08 0a10 	vmov	s16, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 81b1 	beq.w	8006c58 <_dtoa_r+0xbc0>
 80068f6:	2300      	movs	r3, #0
 80068f8:	4639      	mov	r1, r7
 80068fa:	220a      	movs	r2, #10
 80068fc:	4620      	mov	r0, r4
 80068fe:	f000 fc47 	bl	8007190 <__multadd>
 8006902:	9b02      	ldr	r3, [sp, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	4607      	mov	r7, r0
 8006908:	f300 808e 	bgt.w	8006a28 <_dtoa_r+0x990>
 800690c:	9b06      	ldr	r3, [sp, #24]
 800690e:	2b02      	cmp	r3, #2
 8006910:	dc51      	bgt.n	80069b6 <_dtoa_r+0x91e>
 8006912:	e089      	b.n	8006a28 <_dtoa_r+0x990>
 8006914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006916:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800691a:	e74b      	b.n	80067b4 <_dtoa_r+0x71c>
 800691c:	9b03      	ldr	r3, [sp, #12]
 800691e:	1e5e      	subs	r6, r3, #1
 8006920:	9b07      	ldr	r3, [sp, #28]
 8006922:	42b3      	cmp	r3, r6
 8006924:	bfbf      	itttt	lt
 8006926:	9b07      	ldrlt	r3, [sp, #28]
 8006928:	9607      	strlt	r6, [sp, #28]
 800692a:	1af2      	sublt	r2, r6, r3
 800692c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800692e:	bfb6      	itet	lt
 8006930:	189b      	addlt	r3, r3, r2
 8006932:	1b9e      	subge	r6, r3, r6
 8006934:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006936:	9b03      	ldr	r3, [sp, #12]
 8006938:	bfb8      	it	lt
 800693a:	2600      	movlt	r6, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	bfb7      	itett	lt
 8006940:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006944:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006948:	1a9d      	sublt	r5, r3, r2
 800694a:	2300      	movlt	r3, #0
 800694c:	e734      	b.n	80067b8 <_dtoa_r+0x720>
 800694e:	9e07      	ldr	r6, [sp, #28]
 8006950:	9d04      	ldr	r5, [sp, #16]
 8006952:	9f08      	ldr	r7, [sp, #32]
 8006954:	e73b      	b.n	80067ce <_dtoa_r+0x736>
 8006956:	9a07      	ldr	r2, [sp, #28]
 8006958:	e767      	b.n	800682a <_dtoa_r+0x792>
 800695a:	9b06      	ldr	r3, [sp, #24]
 800695c:	2b01      	cmp	r3, #1
 800695e:	dc18      	bgt.n	8006992 <_dtoa_r+0x8fa>
 8006960:	f1ba 0f00 	cmp.w	sl, #0
 8006964:	d115      	bne.n	8006992 <_dtoa_r+0x8fa>
 8006966:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800696a:	b993      	cbnz	r3, 8006992 <_dtoa_r+0x8fa>
 800696c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006970:	0d1b      	lsrs	r3, r3, #20
 8006972:	051b      	lsls	r3, r3, #20
 8006974:	b183      	cbz	r3, 8006998 <_dtoa_r+0x900>
 8006976:	9b04      	ldr	r3, [sp, #16]
 8006978:	3301      	adds	r3, #1
 800697a:	9304      	str	r3, [sp, #16]
 800697c:	9b05      	ldr	r3, [sp, #20]
 800697e:	3301      	adds	r3, #1
 8006980:	9305      	str	r3, [sp, #20]
 8006982:	f04f 0801 	mov.w	r8, #1
 8006986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006988:	2b00      	cmp	r3, #0
 800698a:	f47f af6a 	bne.w	8006862 <_dtoa_r+0x7ca>
 800698e:	2001      	movs	r0, #1
 8006990:	e76f      	b.n	8006872 <_dtoa_r+0x7da>
 8006992:	f04f 0800 	mov.w	r8, #0
 8006996:	e7f6      	b.n	8006986 <_dtoa_r+0x8ee>
 8006998:	4698      	mov	r8, r3
 800699a:	e7f4      	b.n	8006986 <_dtoa_r+0x8ee>
 800699c:	f43f af7d 	beq.w	800689a <_dtoa_r+0x802>
 80069a0:	4618      	mov	r0, r3
 80069a2:	301c      	adds	r0, #28
 80069a4:	e772      	b.n	800688c <_dtoa_r+0x7f4>
 80069a6:	9b03      	ldr	r3, [sp, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	dc37      	bgt.n	8006a1c <_dtoa_r+0x984>
 80069ac:	9b06      	ldr	r3, [sp, #24]
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	dd34      	ble.n	8006a1c <_dtoa_r+0x984>
 80069b2:	9b03      	ldr	r3, [sp, #12]
 80069b4:	9302      	str	r3, [sp, #8]
 80069b6:	9b02      	ldr	r3, [sp, #8]
 80069b8:	b96b      	cbnz	r3, 80069d6 <_dtoa_r+0x93e>
 80069ba:	4631      	mov	r1, r6
 80069bc:	2205      	movs	r2, #5
 80069be:	4620      	mov	r0, r4
 80069c0:	f000 fbe6 	bl	8007190 <__multadd>
 80069c4:	4601      	mov	r1, r0
 80069c6:	4606      	mov	r6, r0
 80069c8:	ee18 0a10 	vmov	r0, s16
 80069cc:	f000 fe00 	bl	80075d0 <__mcmp>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	f73f adbb 	bgt.w	800654c <_dtoa_r+0x4b4>
 80069d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d8:	9d01      	ldr	r5, [sp, #4]
 80069da:	43db      	mvns	r3, r3
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	f04f 0800 	mov.w	r8, #0
 80069e2:	4631      	mov	r1, r6
 80069e4:	4620      	mov	r0, r4
 80069e6:	f000 fbb1 	bl	800714c <_Bfree>
 80069ea:	2f00      	cmp	r7, #0
 80069ec:	f43f aea4 	beq.w	8006738 <_dtoa_r+0x6a0>
 80069f0:	f1b8 0f00 	cmp.w	r8, #0
 80069f4:	d005      	beq.n	8006a02 <_dtoa_r+0x96a>
 80069f6:	45b8      	cmp	r8, r7
 80069f8:	d003      	beq.n	8006a02 <_dtoa_r+0x96a>
 80069fa:	4641      	mov	r1, r8
 80069fc:	4620      	mov	r0, r4
 80069fe:	f000 fba5 	bl	800714c <_Bfree>
 8006a02:	4639      	mov	r1, r7
 8006a04:	4620      	mov	r0, r4
 8006a06:	f000 fba1 	bl	800714c <_Bfree>
 8006a0a:	e695      	b.n	8006738 <_dtoa_r+0x6a0>
 8006a0c:	2600      	movs	r6, #0
 8006a0e:	4637      	mov	r7, r6
 8006a10:	e7e1      	b.n	80069d6 <_dtoa_r+0x93e>
 8006a12:	9700      	str	r7, [sp, #0]
 8006a14:	4637      	mov	r7, r6
 8006a16:	e599      	b.n	800654c <_dtoa_r+0x4b4>
 8006a18:	40240000 	.word	0x40240000
 8006a1c:	9b08      	ldr	r3, [sp, #32]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 80ca 	beq.w	8006bb8 <_dtoa_r+0xb20>
 8006a24:	9b03      	ldr	r3, [sp, #12]
 8006a26:	9302      	str	r3, [sp, #8]
 8006a28:	2d00      	cmp	r5, #0
 8006a2a:	dd05      	ble.n	8006a38 <_dtoa_r+0x9a0>
 8006a2c:	4639      	mov	r1, r7
 8006a2e:	462a      	mov	r2, r5
 8006a30:	4620      	mov	r0, r4
 8006a32:	f000 fd5d 	bl	80074f0 <__lshift>
 8006a36:	4607      	mov	r7, r0
 8006a38:	f1b8 0f00 	cmp.w	r8, #0
 8006a3c:	d05b      	beq.n	8006af6 <_dtoa_r+0xa5e>
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	4620      	mov	r0, r4
 8006a42:	f000 fb43 	bl	80070cc <_Balloc>
 8006a46:	4605      	mov	r5, r0
 8006a48:	b928      	cbnz	r0, 8006a56 <_dtoa_r+0x9be>
 8006a4a:	4b87      	ldr	r3, [pc, #540]	; (8006c68 <_dtoa_r+0xbd0>)
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006a52:	f7ff bb3b 	b.w	80060cc <_dtoa_r+0x34>
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	3202      	adds	r2, #2
 8006a5a:	0092      	lsls	r2, r2, #2
 8006a5c:	f107 010c 	add.w	r1, r7, #12
 8006a60:	300c      	adds	r0, #12
 8006a62:	f7fe fcbf 	bl	80053e4 <memcpy>
 8006a66:	2201      	movs	r2, #1
 8006a68:	4629      	mov	r1, r5
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f000 fd40 	bl	80074f0 <__lshift>
 8006a70:	9b01      	ldr	r3, [sp, #4]
 8006a72:	f103 0901 	add.w	r9, r3, #1
 8006a76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	9305      	str	r3, [sp, #20]
 8006a7e:	f00a 0301 	and.w	r3, sl, #1
 8006a82:	46b8      	mov	r8, r7
 8006a84:	9304      	str	r3, [sp, #16]
 8006a86:	4607      	mov	r7, r0
 8006a88:	4631      	mov	r1, r6
 8006a8a:	ee18 0a10 	vmov	r0, s16
 8006a8e:	f7ff fa77 	bl	8005f80 <quorem>
 8006a92:	4641      	mov	r1, r8
 8006a94:	9002      	str	r0, [sp, #8]
 8006a96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006a9a:	ee18 0a10 	vmov	r0, s16
 8006a9e:	f000 fd97 	bl	80075d0 <__mcmp>
 8006aa2:	463a      	mov	r2, r7
 8006aa4:	9003      	str	r0, [sp, #12]
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f000 fdad 	bl	8007608 <__mdiff>
 8006aae:	68c2      	ldr	r2, [r0, #12]
 8006ab0:	f109 3bff 	add.w	fp, r9, #4294967295
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	bb02      	cbnz	r2, 8006afa <_dtoa_r+0xa62>
 8006ab8:	4601      	mov	r1, r0
 8006aba:	ee18 0a10 	vmov	r0, s16
 8006abe:	f000 fd87 	bl	80075d0 <__mcmp>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	9207      	str	r2, [sp, #28]
 8006aca:	f000 fb3f 	bl	800714c <_Bfree>
 8006ace:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006ad2:	ea43 0102 	orr.w	r1, r3, r2
 8006ad6:	9b04      	ldr	r3, [sp, #16]
 8006ad8:	430b      	orrs	r3, r1
 8006ada:	464d      	mov	r5, r9
 8006adc:	d10f      	bne.n	8006afe <_dtoa_r+0xa66>
 8006ade:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ae2:	d02a      	beq.n	8006b3a <_dtoa_r+0xaa2>
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	dd02      	ble.n	8006af0 <_dtoa_r+0xa58>
 8006aea:	9b02      	ldr	r3, [sp, #8]
 8006aec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006af0:	f88b a000 	strb.w	sl, [fp]
 8006af4:	e775      	b.n	80069e2 <_dtoa_r+0x94a>
 8006af6:	4638      	mov	r0, r7
 8006af8:	e7ba      	b.n	8006a70 <_dtoa_r+0x9d8>
 8006afa:	2201      	movs	r2, #1
 8006afc:	e7e2      	b.n	8006ac4 <_dtoa_r+0xa2c>
 8006afe:	9b03      	ldr	r3, [sp, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	db04      	blt.n	8006b0e <_dtoa_r+0xa76>
 8006b04:	9906      	ldr	r1, [sp, #24]
 8006b06:	430b      	orrs	r3, r1
 8006b08:	9904      	ldr	r1, [sp, #16]
 8006b0a:	430b      	orrs	r3, r1
 8006b0c:	d122      	bne.n	8006b54 <_dtoa_r+0xabc>
 8006b0e:	2a00      	cmp	r2, #0
 8006b10:	ddee      	ble.n	8006af0 <_dtoa_r+0xa58>
 8006b12:	ee18 1a10 	vmov	r1, s16
 8006b16:	2201      	movs	r2, #1
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f000 fce9 	bl	80074f0 <__lshift>
 8006b1e:	4631      	mov	r1, r6
 8006b20:	ee08 0a10 	vmov	s16, r0
 8006b24:	f000 fd54 	bl	80075d0 <__mcmp>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	dc03      	bgt.n	8006b34 <_dtoa_r+0xa9c>
 8006b2c:	d1e0      	bne.n	8006af0 <_dtoa_r+0xa58>
 8006b2e:	f01a 0f01 	tst.w	sl, #1
 8006b32:	d0dd      	beq.n	8006af0 <_dtoa_r+0xa58>
 8006b34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b38:	d1d7      	bne.n	8006aea <_dtoa_r+0xa52>
 8006b3a:	2339      	movs	r3, #57	; 0x39
 8006b3c:	f88b 3000 	strb.w	r3, [fp]
 8006b40:	462b      	mov	r3, r5
 8006b42:	461d      	mov	r5, r3
 8006b44:	3b01      	subs	r3, #1
 8006b46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b4a:	2a39      	cmp	r2, #57	; 0x39
 8006b4c:	d071      	beq.n	8006c32 <_dtoa_r+0xb9a>
 8006b4e:	3201      	adds	r2, #1
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	e746      	b.n	80069e2 <_dtoa_r+0x94a>
 8006b54:	2a00      	cmp	r2, #0
 8006b56:	dd07      	ble.n	8006b68 <_dtoa_r+0xad0>
 8006b58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b5c:	d0ed      	beq.n	8006b3a <_dtoa_r+0xaa2>
 8006b5e:	f10a 0301 	add.w	r3, sl, #1
 8006b62:	f88b 3000 	strb.w	r3, [fp]
 8006b66:	e73c      	b.n	80069e2 <_dtoa_r+0x94a>
 8006b68:	9b05      	ldr	r3, [sp, #20]
 8006b6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006b6e:	4599      	cmp	r9, r3
 8006b70:	d047      	beq.n	8006c02 <_dtoa_r+0xb6a>
 8006b72:	ee18 1a10 	vmov	r1, s16
 8006b76:	2300      	movs	r3, #0
 8006b78:	220a      	movs	r2, #10
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f000 fb08 	bl	8007190 <__multadd>
 8006b80:	45b8      	cmp	r8, r7
 8006b82:	ee08 0a10 	vmov	s16, r0
 8006b86:	f04f 0300 	mov.w	r3, #0
 8006b8a:	f04f 020a 	mov.w	r2, #10
 8006b8e:	4641      	mov	r1, r8
 8006b90:	4620      	mov	r0, r4
 8006b92:	d106      	bne.n	8006ba2 <_dtoa_r+0xb0a>
 8006b94:	f000 fafc 	bl	8007190 <__multadd>
 8006b98:	4680      	mov	r8, r0
 8006b9a:	4607      	mov	r7, r0
 8006b9c:	f109 0901 	add.w	r9, r9, #1
 8006ba0:	e772      	b.n	8006a88 <_dtoa_r+0x9f0>
 8006ba2:	f000 faf5 	bl	8007190 <__multadd>
 8006ba6:	4639      	mov	r1, r7
 8006ba8:	4680      	mov	r8, r0
 8006baa:	2300      	movs	r3, #0
 8006bac:	220a      	movs	r2, #10
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f000 faee 	bl	8007190 <__multadd>
 8006bb4:	4607      	mov	r7, r0
 8006bb6:	e7f1      	b.n	8006b9c <_dtoa_r+0xb04>
 8006bb8:	9b03      	ldr	r3, [sp, #12]
 8006bba:	9302      	str	r3, [sp, #8]
 8006bbc:	9d01      	ldr	r5, [sp, #4]
 8006bbe:	ee18 0a10 	vmov	r0, s16
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	f7ff f9dc 	bl	8005f80 <quorem>
 8006bc8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006bcc:	9b01      	ldr	r3, [sp, #4]
 8006bce:	f805 ab01 	strb.w	sl, [r5], #1
 8006bd2:	1aea      	subs	r2, r5, r3
 8006bd4:	9b02      	ldr	r3, [sp, #8]
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	dd09      	ble.n	8006bee <_dtoa_r+0xb56>
 8006bda:	ee18 1a10 	vmov	r1, s16
 8006bde:	2300      	movs	r3, #0
 8006be0:	220a      	movs	r2, #10
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 fad4 	bl	8007190 <__multadd>
 8006be8:	ee08 0a10 	vmov	s16, r0
 8006bec:	e7e7      	b.n	8006bbe <_dtoa_r+0xb26>
 8006bee:	9b02      	ldr	r3, [sp, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	bfc8      	it	gt
 8006bf4:	461d      	movgt	r5, r3
 8006bf6:	9b01      	ldr	r3, [sp, #4]
 8006bf8:	bfd8      	it	le
 8006bfa:	2501      	movle	r5, #1
 8006bfc:	441d      	add	r5, r3
 8006bfe:	f04f 0800 	mov.w	r8, #0
 8006c02:	ee18 1a10 	vmov	r1, s16
 8006c06:	2201      	movs	r2, #1
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f000 fc71 	bl	80074f0 <__lshift>
 8006c0e:	4631      	mov	r1, r6
 8006c10:	ee08 0a10 	vmov	s16, r0
 8006c14:	f000 fcdc 	bl	80075d0 <__mcmp>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	dc91      	bgt.n	8006b40 <_dtoa_r+0xaa8>
 8006c1c:	d102      	bne.n	8006c24 <_dtoa_r+0xb8c>
 8006c1e:	f01a 0f01 	tst.w	sl, #1
 8006c22:	d18d      	bne.n	8006b40 <_dtoa_r+0xaa8>
 8006c24:	462b      	mov	r3, r5
 8006c26:	461d      	mov	r5, r3
 8006c28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c2c:	2a30      	cmp	r2, #48	; 0x30
 8006c2e:	d0fa      	beq.n	8006c26 <_dtoa_r+0xb8e>
 8006c30:	e6d7      	b.n	80069e2 <_dtoa_r+0x94a>
 8006c32:	9a01      	ldr	r2, [sp, #4]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d184      	bne.n	8006b42 <_dtoa_r+0xaaa>
 8006c38:	9b00      	ldr	r3, [sp, #0]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	2331      	movs	r3, #49	; 0x31
 8006c40:	7013      	strb	r3, [r2, #0]
 8006c42:	e6ce      	b.n	80069e2 <_dtoa_r+0x94a>
 8006c44:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <_dtoa_r+0xbd4>)
 8006c46:	f7ff ba95 	b.w	8006174 <_dtoa_r+0xdc>
 8006c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f47f aa6e 	bne.w	800612e <_dtoa_r+0x96>
 8006c52:	4b07      	ldr	r3, [pc, #28]	; (8006c70 <_dtoa_r+0xbd8>)
 8006c54:	f7ff ba8e 	b.w	8006174 <_dtoa_r+0xdc>
 8006c58:	9b02      	ldr	r3, [sp, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	dcae      	bgt.n	8006bbc <_dtoa_r+0xb24>
 8006c5e:	9b06      	ldr	r3, [sp, #24]
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	f73f aea8 	bgt.w	80069b6 <_dtoa_r+0x91e>
 8006c66:	e7a9      	b.n	8006bbc <_dtoa_r+0xb24>
 8006c68:	08008707 	.word	0x08008707
 8006c6c:	08008664 	.word	0x08008664
 8006c70:	08008688 	.word	0x08008688

08006c74 <__sflush_r>:
 8006c74:	898a      	ldrh	r2, [r1, #12]
 8006c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	0710      	lsls	r0, r2, #28
 8006c7e:	460c      	mov	r4, r1
 8006c80:	d458      	bmi.n	8006d34 <__sflush_r+0xc0>
 8006c82:	684b      	ldr	r3, [r1, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	dc05      	bgt.n	8006c94 <__sflush_r+0x20>
 8006c88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	dc02      	bgt.n	8006c94 <__sflush_r+0x20>
 8006c8e:	2000      	movs	r0, #0
 8006c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c96:	2e00      	cmp	r6, #0
 8006c98:	d0f9      	beq.n	8006c8e <__sflush_r+0x1a>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ca0:	682f      	ldr	r7, [r5, #0]
 8006ca2:	602b      	str	r3, [r5, #0]
 8006ca4:	d032      	beq.n	8006d0c <__sflush_r+0x98>
 8006ca6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	075a      	lsls	r2, r3, #29
 8006cac:	d505      	bpl.n	8006cba <__sflush_r+0x46>
 8006cae:	6863      	ldr	r3, [r4, #4]
 8006cb0:	1ac0      	subs	r0, r0, r3
 8006cb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cb4:	b10b      	cbz	r3, 8006cba <__sflush_r+0x46>
 8006cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cb8:	1ac0      	subs	r0, r0, r3
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cc0:	6a21      	ldr	r1, [r4, #32]
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	47b0      	blx	r6
 8006cc6:	1c43      	adds	r3, r0, #1
 8006cc8:	89a3      	ldrh	r3, [r4, #12]
 8006cca:	d106      	bne.n	8006cda <__sflush_r+0x66>
 8006ccc:	6829      	ldr	r1, [r5, #0]
 8006cce:	291d      	cmp	r1, #29
 8006cd0:	d82c      	bhi.n	8006d2c <__sflush_r+0xb8>
 8006cd2:	4a2a      	ldr	r2, [pc, #168]	; (8006d7c <__sflush_r+0x108>)
 8006cd4:	40ca      	lsrs	r2, r1
 8006cd6:	07d6      	lsls	r6, r2, #31
 8006cd8:	d528      	bpl.n	8006d2c <__sflush_r+0xb8>
 8006cda:	2200      	movs	r2, #0
 8006cdc:	6062      	str	r2, [r4, #4]
 8006cde:	04d9      	lsls	r1, r3, #19
 8006ce0:	6922      	ldr	r2, [r4, #16]
 8006ce2:	6022      	str	r2, [r4, #0]
 8006ce4:	d504      	bpl.n	8006cf0 <__sflush_r+0x7c>
 8006ce6:	1c42      	adds	r2, r0, #1
 8006ce8:	d101      	bne.n	8006cee <__sflush_r+0x7a>
 8006cea:	682b      	ldr	r3, [r5, #0]
 8006cec:	b903      	cbnz	r3, 8006cf0 <__sflush_r+0x7c>
 8006cee:	6560      	str	r0, [r4, #84]	; 0x54
 8006cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cf2:	602f      	str	r7, [r5, #0]
 8006cf4:	2900      	cmp	r1, #0
 8006cf6:	d0ca      	beq.n	8006c8e <__sflush_r+0x1a>
 8006cf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cfc:	4299      	cmp	r1, r3
 8006cfe:	d002      	beq.n	8006d06 <__sflush_r+0x92>
 8006d00:	4628      	mov	r0, r5
 8006d02:	f000 fd7d 	bl	8007800 <_free_r>
 8006d06:	2000      	movs	r0, #0
 8006d08:	6360      	str	r0, [r4, #52]	; 0x34
 8006d0a:	e7c1      	b.n	8006c90 <__sflush_r+0x1c>
 8006d0c:	6a21      	ldr	r1, [r4, #32]
 8006d0e:	2301      	movs	r3, #1
 8006d10:	4628      	mov	r0, r5
 8006d12:	47b0      	blx	r6
 8006d14:	1c41      	adds	r1, r0, #1
 8006d16:	d1c7      	bne.n	8006ca8 <__sflush_r+0x34>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0c4      	beq.n	8006ca8 <__sflush_r+0x34>
 8006d1e:	2b1d      	cmp	r3, #29
 8006d20:	d001      	beq.n	8006d26 <__sflush_r+0xb2>
 8006d22:	2b16      	cmp	r3, #22
 8006d24:	d101      	bne.n	8006d2a <__sflush_r+0xb6>
 8006d26:	602f      	str	r7, [r5, #0]
 8006d28:	e7b1      	b.n	8006c8e <__sflush_r+0x1a>
 8006d2a:	89a3      	ldrh	r3, [r4, #12]
 8006d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d30:	81a3      	strh	r3, [r4, #12]
 8006d32:	e7ad      	b.n	8006c90 <__sflush_r+0x1c>
 8006d34:	690f      	ldr	r7, [r1, #16]
 8006d36:	2f00      	cmp	r7, #0
 8006d38:	d0a9      	beq.n	8006c8e <__sflush_r+0x1a>
 8006d3a:	0793      	lsls	r3, r2, #30
 8006d3c:	680e      	ldr	r6, [r1, #0]
 8006d3e:	bf08      	it	eq
 8006d40:	694b      	ldreq	r3, [r1, #20]
 8006d42:	600f      	str	r7, [r1, #0]
 8006d44:	bf18      	it	ne
 8006d46:	2300      	movne	r3, #0
 8006d48:	eba6 0807 	sub.w	r8, r6, r7
 8006d4c:	608b      	str	r3, [r1, #8]
 8006d4e:	f1b8 0f00 	cmp.w	r8, #0
 8006d52:	dd9c      	ble.n	8006c8e <__sflush_r+0x1a>
 8006d54:	6a21      	ldr	r1, [r4, #32]
 8006d56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d58:	4643      	mov	r3, r8
 8006d5a:	463a      	mov	r2, r7
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	47b0      	blx	r6
 8006d60:	2800      	cmp	r0, #0
 8006d62:	dc06      	bgt.n	8006d72 <__sflush_r+0xfe>
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6a:	81a3      	strh	r3, [r4, #12]
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	e78e      	b.n	8006c90 <__sflush_r+0x1c>
 8006d72:	4407      	add	r7, r0
 8006d74:	eba8 0800 	sub.w	r8, r8, r0
 8006d78:	e7e9      	b.n	8006d4e <__sflush_r+0xda>
 8006d7a:	bf00      	nop
 8006d7c:	20400001 	.word	0x20400001

08006d80 <_fflush_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	690b      	ldr	r3, [r1, #16]
 8006d84:	4605      	mov	r5, r0
 8006d86:	460c      	mov	r4, r1
 8006d88:	b913      	cbnz	r3, 8006d90 <_fflush_r+0x10>
 8006d8a:	2500      	movs	r5, #0
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	b118      	cbz	r0, 8006d9a <_fflush_r+0x1a>
 8006d92:	6983      	ldr	r3, [r0, #24]
 8006d94:	b90b      	cbnz	r3, 8006d9a <_fflush_r+0x1a>
 8006d96:	f000 f887 	bl	8006ea8 <__sinit>
 8006d9a:	4b14      	ldr	r3, [pc, #80]	; (8006dec <_fflush_r+0x6c>)
 8006d9c:	429c      	cmp	r4, r3
 8006d9e:	d11b      	bne.n	8006dd8 <_fflush_r+0x58>
 8006da0:	686c      	ldr	r4, [r5, #4]
 8006da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0ef      	beq.n	8006d8a <_fflush_r+0xa>
 8006daa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006dac:	07d0      	lsls	r0, r2, #31
 8006dae:	d404      	bmi.n	8006dba <_fflush_r+0x3a>
 8006db0:	0599      	lsls	r1, r3, #22
 8006db2:	d402      	bmi.n	8006dba <_fflush_r+0x3a>
 8006db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006db6:	f000 f91a 	bl	8006fee <__retarget_lock_acquire_recursive>
 8006dba:	4628      	mov	r0, r5
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	f7ff ff59 	bl	8006c74 <__sflush_r>
 8006dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dc4:	07da      	lsls	r2, r3, #31
 8006dc6:	4605      	mov	r5, r0
 8006dc8:	d4e0      	bmi.n	8006d8c <_fflush_r+0xc>
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	059b      	lsls	r3, r3, #22
 8006dce:	d4dd      	bmi.n	8006d8c <_fflush_r+0xc>
 8006dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dd2:	f000 f90d 	bl	8006ff0 <__retarget_lock_release_recursive>
 8006dd6:	e7d9      	b.n	8006d8c <_fflush_r+0xc>
 8006dd8:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <_fflush_r+0x70>)
 8006dda:	429c      	cmp	r4, r3
 8006ddc:	d101      	bne.n	8006de2 <_fflush_r+0x62>
 8006dde:	68ac      	ldr	r4, [r5, #8]
 8006de0:	e7df      	b.n	8006da2 <_fflush_r+0x22>
 8006de2:	4b04      	ldr	r3, [pc, #16]	; (8006df4 <_fflush_r+0x74>)
 8006de4:	429c      	cmp	r4, r3
 8006de6:	bf08      	it	eq
 8006de8:	68ec      	ldreq	r4, [r5, #12]
 8006dea:	e7da      	b.n	8006da2 <_fflush_r+0x22>
 8006dec:	08008738 	.word	0x08008738
 8006df0:	08008758 	.word	0x08008758
 8006df4:	08008718 	.word	0x08008718

08006df8 <std>:
 8006df8:	2300      	movs	r3, #0
 8006dfa:	b510      	push	{r4, lr}
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8006e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e06:	6083      	str	r3, [r0, #8]
 8006e08:	8181      	strh	r1, [r0, #12]
 8006e0a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e0c:	81c2      	strh	r2, [r0, #14]
 8006e0e:	6183      	str	r3, [r0, #24]
 8006e10:	4619      	mov	r1, r3
 8006e12:	2208      	movs	r2, #8
 8006e14:	305c      	adds	r0, #92	; 0x5c
 8006e16:	f7fe faf3 	bl	8005400 <memset>
 8006e1a:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <std+0x38>)
 8006e1c:	6263      	str	r3, [r4, #36]	; 0x24
 8006e1e:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <std+0x3c>)
 8006e20:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e22:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <std+0x40>)
 8006e24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e26:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <std+0x44>)
 8006e28:	6224      	str	r4, [r4, #32]
 8006e2a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e2c:	bd10      	pop	{r4, pc}
 8006e2e:	bf00      	nop
 8006e30:	08007c95 	.word	0x08007c95
 8006e34:	08007cb7 	.word	0x08007cb7
 8006e38:	08007cef 	.word	0x08007cef
 8006e3c:	08007d13 	.word	0x08007d13

08006e40 <_cleanup_r>:
 8006e40:	4901      	ldr	r1, [pc, #4]	; (8006e48 <_cleanup_r+0x8>)
 8006e42:	f000 b8af 	b.w	8006fa4 <_fwalk_reent>
 8006e46:	bf00      	nop
 8006e48:	08006d81 	.word	0x08006d81

08006e4c <__sfmoreglue>:
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	2268      	movs	r2, #104	; 0x68
 8006e50:	1e4d      	subs	r5, r1, #1
 8006e52:	4355      	muls	r5, r2
 8006e54:	460e      	mov	r6, r1
 8006e56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e5a:	f000 fd3d 	bl	80078d8 <_malloc_r>
 8006e5e:	4604      	mov	r4, r0
 8006e60:	b140      	cbz	r0, 8006e74 <__sfmoreglue+0x28>
 8006e62:	2100      	movs	r1, #0
 8006e64:	e9c0 1600 	strd	r1, r6, [r0]
 8006e68:	300c      	adds	r0, #12
 8006e6a:	60a0      	str	r0, [r4, #8]
 8006e6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e70:	f7fe fac6 	bl	8005400 <memset>
 8006e74:	4620      	mov	r0, r4
 8006e76:	bd70      	pop	{r4, r5, r6, pc}

08006e78 <__sfp_lock_acquire>:
 8006e78:	4801      	ldr	r0, [pc, #4]	; (8006e80 <__sfp_lock_acquire+0x8>)
 8006e7a:	f000 b8b8 	b.w	8006fee <__retarget_lock_acquire_recursive>
 8006e7e:	bf00      	nop
 8006e80:	200022ed 	.word	0x200022ed

08006e84 <__sfp_lock_release>:
 8006e84:	4801      	ldr	r0, [pc, #4]	; (8006e8c <__sfp_lock_release+0x8>)
 8006e86:	f000 b8b3 	b.w	8006ff0 <__retarget_lock_release_recursive>
 8006e8a:	bf00      	nop
 8006e8c:	200022ed 	.word	0x200022ed

08006e90 <__sinit_lock_acquire>:
 8006e90:	4801      	ldr	r0, [pc, #4]	; (8006e98 <__sinit_lock_acquire+0x8>)
 8006e92:	f000 b8ac 	b.w	8006fee <__retarget_lock_acquire_recursive>
 8006e96:	bf00      	nop
 8006e98:	200022ee 	.word	0x200022ee

08006e9c <__sinit_lock_release>:
 8006e9c:	4801      	ldr	r0, [pc, #4]	; (8006ea4 <__sinit_lock_release+0x8>)
 8006e9e:	f000 b8a7 	b.w	8006ff0 <__retarget_lock_release_recursive>
 8006ea2:	bf00      	nop
 8006ea4:	200022ee 	.word	0x200022ee

08006ea8 <__sinit>:
 8006ea8:	b510      	push	{r4, lr}
 8006eaa:	4604      	mov	r4, r0
 8006eac:	f7ff fff0 	bl	8006e90 <__sinit_lock_acquire>
 8006eb0:	69a3      	ldr	r3, [r4, #24]
 8006eb2:	b11b      	cbz	r3, 8006ebc <__sinit+0x14>
 8006eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eb8:	f7ff bff0 	b.w	8006e9c <__sinit_lock_release>
 8006ebc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ec0:	6523      	str	r3, [r4, #80]	; 0x50
 8006ec2:	4b13      	ldr	r3, [pc, #76]	; (8006f10 <__sinit+0x68>)
 8006ec4:	4a13      	ldr	r2, [pc, #76]	; (8006f14 <__sinit+0x6c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006eca:	42a3      	cmp	r3, r4
 8006ecc:	bf04      	itt	eq
 8006ece:	2301      	moveq	r3, #1
 8006ed0:	61a3      	streq	r3, [r4, #24]
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 f820 	bl	8006f18 <__sfp>
 8006ed8:	6060      	str	r0, [r4, #4]
 8006eda:	4620      	mov	r0, r4
 8006edc:	f000 f81c 	bl	8006f18 <__sfp>
 8006ee0:	60a0      	str	r0, [r4, #8]
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f000 f818 	bl	8006f18 <__sfp>
 8006ee8:	2200      	movs	r2, #0
 8006eea:	60e0      	str	r0, [r4, #12]
 8006eec:	2104      	movs	r1, #4
 8006eee:	6860      	ldr	r0, [r4, #4]
 8006ef0:	f7ff ff82 	bl	8006df8 <std>
 8006ef4:	68a0      	ldr	r0, [r4, #8]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	2109      	movs	r1, #9
 8006efa:	f7ff ff7d 	bl	8006df8 <std>
 8006efe:	68e0      	ldr	r0, [r4, #12]
 8006f00:	2202      	movs	r2, #2
 8006f02:	2112      	movs	r1, #18
 8006f04:	f7ff ff78 	bl	8006df8 <std>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	61a3      	str	r3, [r4, #24]
 8006f0c:	e7d2      	b.n	8006eb4 <__sinit+0xc>
 8006f0e:	bf00      	nop
 8006f10:	08008650 	.word	0x08008650
 8006f14:	08006e41 	.word	0x08006e41

08006f18 <__sfp>:
 8006f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1a:	4607      	mov	r7, r0
 8006f1c:	f7ff ffac 	bl	8006e78 <__sfp_lock_acquire>
 8006f20:	4b1e      	ldr	r3, [pc, #120]	; (8006f9c <__sfp+0x84>)
 8006f22:	681e      	ldr	r6, [r3, #0]
 8006f24:	69b3      	ldr	r3, [r6, #24]
 8006f26:	b913      	cbnz	r3, 8006f2e <__sfp+0x16>
 8006f28:	4630      	mov	r0, r6
 8006f2a:	f7ff ffbd 	bl	8006ea8 <__sinit>
 8006f2e:	3648      	adds	r6, #72	; 0x48
 8006f30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	d503      	bpl.n	8006f40 <__sfp+0x28>
 8006f38:	6833      	ldr	r3, [r6, #0]
 8006f3a:	b30b      	cbz	r3, 8006f80 <__sfp+0x68>
 8006f3c:	6836      	ldr	r6, [r6, #0]
 8006f3e:	e7f7      	b.n	8006f30 <__sfp+0x18>
 8006f40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f44:	b9d5      	cbnz	r5, 8006f7c <__sfp+0x64>
 8006f46:	4b16      	ldr	r3, [pc, #88]	; (8006fa0 <__sfp+0x88>)
 8006f48:	60e3      	str	r3, [r4, #12]
 8006f4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f4e:	6665      	str	r5, [r4, #100]	; 0x64
 8006f50:	f000 f84c 	bl	8006fec <__retarget_lock_init_recursive>
 8006f54:	f7ff ff96 	bl	8006e84 <__sfp_lock_release>
 8006f58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f60:	6025      	str	r5, [r4, #0]
 8006f62:	61a5      	str	r5, [r4, #24]
 8006f64:	2208      	movs	r2, #8
 8006f66:	4629      	mov	r1, r5
 8006f68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f6c:	f7fe fa48 	bl	8005400 <memset>
 8006f70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f78:	4620      	mov	r0, r4
 8006f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f7c:	3468      	adds	r4, #104	; 0x68
 8006f7e:	e7d9      	b.n	8006f34 <__sfp+0x1c>
 8006f80:	2104      	movs	r1, #4
 8006f82:	4638      	mov	r0, r7
 8006f84:	f7ff ff62 	bl	8006e4c <__sfmoreglue>
 8006f88:	4604      	mov	r4, r0
 8006f8a:	6030      	str	r0, [r6, #0]
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d1d5      	bne.n	8006f3c <__sfp+0x24>
 8006f90:	f7ff ff78 	bl	8006e84 <__sfp_lock_release>
 8006f94:	230c      	movs	r3, #12
 8006f96:	603b      	str	r3, [r7, #0]
 8006f98:	e7ee      	b.n	8006f78 <__sfp+0x60>
 8006f9a:	bf00      	nop
 8006f9c:	08008650 	.word	0x08008650
 8006fa0:	ffff0001 	.word	0xffff0001

08006fa4 <_fwalk_reent>:
 8006fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa8:	4606      	mov	r6, r0
 8006faa:	4688      	mov	r8, r1
 8006fac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fb0:	2700      	movs	r7, #0
 8006fb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fb6:	f1b9 0901 	subs.w	r9, r9, #1
 8006fba:	d505      	bpl.n	8006fc8 <_fwalk_reent+0x24>
 8006fbc:	6824      	ldr	r4, [r4, #0]
 8006fbe:	2c00      	cmp	r4, #0
 8006fc0:	d1f7      	bne.n	8006fb2 <_fwalk_reent+0xe>
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fc8:	89ab      	ldrh	r3, [r5, #12]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d907      	bls.n	8006fde <_fwalk_reent+0x3a>
 8006fce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	d003      	beq.n	8006fde <_fwalk_reent+0x3a>
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	4630      	mov	r0, r6
 8006fda:	47c0      	blx	r8
 8006fdc:	4307      	orrs	r7, r0
 8006fde:	3568      	adds	r5, #104	; 0x68
 8006fe0:	e7e9      	b.n	8006fb6 <_fwalk_reent+0x12>
	...

08006fe4 <_localeconv_r>:
 8006fe4:	4800      	ldr	r0, [pc, #0]	; (8006fe8 <_localeconv_r+0x4>)
 8006fe6:	4770      	bx	lr
 8006fe8:	2000016c 	.word	0x2000016c

08006fec <__retarget_lock_init_recursive>:
 8006fec:	4770      	bx	lr

08006fee <__retarget_lock_acquire_recursive>:
 8006fee:	4770      	bx	lr

08006ff0 <__retarget_lock_release_recursive>:
 8006ff0:	4770      	bx	lr

08006ff2 <__swhatbuf_r>:
 8006ff2:	b570      	push	{r4, r5, r6, lr}
 8006ff4:	460e      	mov	r6, r1
 8006ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ffa:	2900      	cmp	r1, #0
 8006ffc:	b096      	sub	sp, #88	; 0x58
 8006ffe:	4614      	mov	r4, r2
 8007000:	461d      	mov	r5, r3
 8007002:	da08      	bge.n	8007016 <__swhatbuf_r+0x24>
 8007004:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	602a      	str	r2, [r5, #0]
 800700c:	061a      	lsls	r2, r3, #24
 800700e:	d410      	bmi.n	8007032 <__swhatbuf_r+0x40>
 8007010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007014:	e00e      	b.n	8007034 <__swhatbuf_r+0x42>
 8007016:	466a      	mov	r2, sp
 8007018:	f000 fed2 	bl	8007dc0 <_fstat_r>
 800701c:	2800      	cmp	r0, #0
 800701e:	dbf1      	blt.n	8007004 <__swhatbuf_r+0x12>
 8007020:	9a01      	ldr	r2, [sp, #4]
 8007022:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007026:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800702a:	425a      	negs	r2, r3
 800702c:	415a      	adcs	r2, r3
 800702e:	602a      	str	r2, [r5, #0]
 8007030:	e7ee      	b.n	8007010 <__swhatbuf_r+0x1e>
 8007032:	2340      	movs	r3, #64	; 0x40
 8007034:	2000      	movs	r0, #0
 8007036:	6023      	str	r3, [r4, #0]
 8007038:	b016      	add	sp, #88	; 0x58
 800703a:	bd70      	pop	{r4, r5, r6, pc}

0800703c <__smakebuf_r>:
 800703c:	898b      	ldrh	r3, [r1, #12]
 800703e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007040:	079d      	lsls	r5, r3, #30
 8007042:	4606      	mov	r6, r0
 8007044:	460c      	mov	r4, r1
 8007046:	d507      	bpl.n	8007058 <__smakebuf_r+0x1c>
 8007048:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	6123      	str	r3, [r4, #16]
 8007050:	2301      	movs	r3, #1
 8007052:	6163      	str	r3, [r4, #20]
 8007054:	b002      	add	sp, #8
 8007056:	bd70      	pop	{r4, r5, r6, pc}
 8007058:	ab01      	add	r3, sp, #4
 800705a:	466a      	mov	r2, sp
 800705c:	f7ff ffc9 	bl	8006ff2 <__swhatbuf_r>
 8007060:	9900      	ldr	r1, [sp, #0]
 8007062:	4605      	mov	r5, r0
 8007064:	4630      	mov	r0, r6
 8007066:	f000 fc37 	bl	80078d8 <_malloc_r>
 800706a:	b948      	cbnz	r0, 8007080 <__smakebuf_r+0x44>
 800706c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007070:	059a      	lsls	r2, r3, #22
 8007072:	d4ef      	bmi.n	8007054 <__smakebuf_r+0x18>
 8007074:	f023 0303 	bic.w	r3, r3, #3
 8007078:	f043 0302 	orr.w	r3, r3, #2
 800707c:	81a3      	strh	r3, [r4, #12]
 800707e:	e7e3      	b.n	8007048 <__smakebuf_r+0xc>
 8007080:	4b0d      	ldr	r3, [pc, #52]	; (80070b8 <__smakebuf_r+0x7c>)
 8007082:	62b3      	str	r3, [r6, #40]	; 0x28
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	6020      	str	r0, [r4, #0]
 8007088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800708c:	81a3      	strh	r3, [r4, #12]
 800708e:	9b00      	ldr	r3, [sp, #0]
 8007090:	6163      	str	r3, [r4, #20]
 8007092:	9b01      	ldr	r3, [sp, #4]
 8007094:	6120      	str	r0, [r4, #16]
 8007096:	b15b      	cbz	r3, 80070b0 <__smakebuf_r+0x74>
 8007098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800709c:	4630      	mov	r0, r6
 800709e:	f000 fea1 	bl	8007de4 <_isatty_r>
 80070a2:	b128      	cbz	r0, 80070b0 <__smakebuf_r+0x74>
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	f023 0303 	bic.w	r3, r3, #3
 80070aa:	f043 0301 	orr.w	r3, r3, #1
 80070ae:	81a3      	strh	r3, [r4, #12]
 80070b0:	89a0      	ldrh	r0, [r4, #12]
 80070b2:	4305      	orrs	r5, r0
 80070b4:	81a5      	strh	r5, [r4, #12]
 80070b6:	e7cd      	b.n	8007054 <__smakebuf_r+0x18>
 80070b8:	08006e41 	.word	0x08006e41

080070bc <malloc>:
 80070bc:	4b02      	ldr	r3, [pc, #8]	; (80070c8 <malloc+0xc>)
 80070be:	4601      	mov	r1, r0
 80070c0:	6818      	ldr	r0, [r3, #0]
 80070c2:	f000 bc09 	b.w	80078d8 <_malloc_r>
 80070c6:	bf00      	nop
 80070c8:	20000018 	.word	0x20000018

080070cc <_Balloc>:
 80070cc:	b570      	push	{r4, r5, r6, lr}
 80070ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070d0:	4604      	mov	r4, r0
 80070d2:	460d      	mov	r5, r1
 80070d4:	b976      	cbnz	r6, 80070f4 <_Balloc+0x28>
 80070d6:	2010      	movs	r0, #16
 80070d8:	f7ff fff0 	bl	80070bc <malloc>
 80070dc:	4602      	mov	r2, r0
 80070de:	6260      	str	r0, [r4, #36]	; 0x24
 80070e0:	b920      	cbnz	r0, 80070ec <_Balloc+0x20>
 80070e2:	4b18      	ldr	r3, [pc, #96]	; (8007144 <_Balloc+0x78>)
 80070e4:	4818      	ldr	r0, [pc, #96]	; (8007148 <_Balloc+0x7c>)
 80070e6:	2166      	movs	r1, #102	; 0x66
 80070e8:	f000 fe2a 	bl	8007d40 <__assert_func>
 80070ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070f0:	6006      	str	r6, [r0, #0]
 80070f2:	60c6      	str	r6, [r0, #12]
 80070f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070f6:	68f3      	ldr	r3, [r6, #12]
 80070f8:	b183      	cbz	r3, 800711c <_Balloc+0x50>
 80070fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007102:	b9b8      	cbnz	r0, 8007134 <_Balloc+0x68>
 8007104:	2101      	movs	r1, #1
 8007106:	fa01 f605 	lsl.w	r6, r1, r5
 800710a:	1d72      	adds	r2, r6, #5
 800710c:	0092      	lsls	r2, r2, #2
 800710e:	4620      	mov	r0, r4
 8007110:	f000 fb60 	bl	80077d4 <_calloc_r>
 8007114:	b160      	cbz	r0, 8007130 <_Balloc+0x64>
 8007116:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800711a:	e00e      	b.n	800713a <_Balloc+0x6e>
 800711c:	2221      	movs	r2, #33	; 0x21
 800711e:	2104      	movs	r1, #4
 8007120:	4620      	mov	r0, r4
 8007122:	f000 fb57 	bl	80077d4 <_calloc_r>
 8007126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007128:	60f0      	str	r0, [r6, #12]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1e4      	bne.n	80070fa <_Balloc+0x2e>
 8007130:	2000      	movs	r0, #0
 8007132:	bd70      	pop	{r4, r5, r6, pc}
 8007134:	6802      	ldr	r2, [r0, #0]
 8007136:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800713a:	2300      	movs	r3, #0
 800713c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007140:	e7f7      	b.n	8007132 <_Balloc+0x66>
 8007142:	bf00      	nop
 8007144:	08008695 	.word	0x08008695
 8007148:	08008778 	.word	0x08008778

0800714c <_Bfree>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007150:	4605      	mov	r5, r0
 8007152:	460c      	mov	r4, r1
 8007154:	b976      	cbnz	r6, 8007174 <_Bfree+0x28>
 8007156:	2010      	movs	r0, #16
 8007158:	f7ff ffb0 	bl	80070bc <malloc>
 800715c:	4602      	mov	r2, r0
 800715e:	6268      	str	r0, [r5, #36]	; 0x24
 8007160:	b920      	cbnz	r0, 800716c <_Bfree+0x20>
 8007162:	4b09      	ldr	r3, [pc, #36]	; (8007188 <_Bfree+0x3c>)
 8007164:	4809      	ldr	r0, [pc, #36]	; (800718c <_Bfree+0x40>)
 8007166:	218a      	movs	r1, #138	; 0x8a
 8007168:	f000 fdea 	bl	8007d40 <__assert_func>
 800716c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007170:	6006      	str	r6, [r0, #0]
 8007172:	60c6      	str	r6, [r0, #12]
 8007174:	b13c      	cbz	r4, 8007186 <_Bfree+0x3a>
 8007176:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007178:	6862      	ldr	r2, [r4, #4]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007180:	6021      	str	r1, [r4, #0]
 8007182:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	08008695 	.word	0x08008695
 800718c:	08008778 	.word	0x08008778

08007190 <__multadd>:
 8007190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007194:	690d      	ldr	r5, [r1, #16]
 8007196:	4607      	mov	r7, r0
 8007198:	460c      	mov	r4, r1
 800719a:	461e      	mov	r6, r3
 800719c:	f101 0c14 	add.w	ip, r1, #20
 80071a0:	2000      	movs	r0, #0
 80071a2:	f8dc 3000 	ldr.w	r3, [ip]
 80071a6:	b299      	uxth	r1, r3
 80071a8:	fb02 6101 	mla	r1, r2, r1, r6
 80071ac:	0c1e      	lsrs	r6, r3, #16
 80071ae:	0c0b      	lsrs	r3, r1, #16
 80071b0:	fb02 3306 	mla	r3, r2, r6, r3
 80071b4:	b289      	uxth	r1, r1
 80071b6:	3001      	adds	r0, #1
 80071b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071bc:	4285      	cmp	r5, r0
 80071be:	f84c 1b04 	str.w	r1, [ip], #4
 80071c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071c6:	dcec      	bgt.n	80071a2 <__multadd+0x12>
 80071c8:	b30e      	cbz	r6, 800720e <__multadd+0x7e>
 80071ca:	68a3      	ldr	r3, [r4, #8]
 80071cc:	42ab      	cmp	r3, r5
 80071ce:	dc19      	bgt.n	8007204 <__multadd+0x74>
 80071d0:	6861      	ldr	r1, [r4, #4]
 80071d2:	4638      	mov	r0, r7
 80071d4:	3101      	adds	r1, #1
 80071d6:	f7ff ff79 	bl	80070cc <_Balloc>
 80071da:	4680      	mov	r8, r0
 80071dc:	b928      	cbnz	r0, 80071ea <__multadd+0x5a>
 80071de:	4602      	mov	r2, r0
 80071e0:	4b0c      	ldr	r3, [pc, #48]	; (8007214 <__multadd+0x84>)
 80071e2:	480d      	ldr	r0, [pc, #52]	; (8007218 <__multadd+0x88>)
 80071e4:	21b5      	movs	r1, #181	; 0xb5
 80071e6:	f000 fdab 	bl	8007d40 <__assert_func>
 80071ea:	6922      	ldr	r2, [r4, #16]
 80071ec:	3202      	adds	r2, #2
 80071ee:	f104 010c 	add.w	r1, r4, #12
 80071f2:	0092      	lsls	r2, r2, #2
 80071f4:	300c      	adds	r0, #12
 80071f6:	f7fe f8f5 	bl	80053e4 <memcpy>
 80071fa:	4621      	mov	r1, r4
 80071fc:	4638      	mov	r0, r7
 80071fe:	f7ff ffa5 	bl	800714c <_Bfree>
 8007202:	4644      	mov	r4, r8
 8007204:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007208:	3501      	adds	r5, #1
 800720a:	615e      	str	r6, [r3, #20]
 800720c:	6125      	str	r5, [r4, #16]
 800720e:	4620      	mov	r0, r4
 8007210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007214:	08008707 	.word	0x08008707
 8007218:	08008778 	.word	0x08008778

0800721c <__hi0bits>:
 800721c:	0c03      	lsrs	r3, r0, #16
 800721e:	041b      	lsls	r3, r3, #16
 8007220:	b9d3      	cbnz	r3, 8007258 <__hi0bits+0x3c>
 8007222:	0400      	lsls	r0, r0, #16
 8007224:	2310      	movs	r3, #16
 8007226:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800722a:	bf04      	itt	eq
 800722c:	0200      	lsleq	r0, r0, #8
 800722e:	3308      	addeq	r3, #8
 8007230:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007234:	bf04      	itt	eq
 8007236:	0100      	lsleq	r0, r0, #4
 8007238:	3304      	addeq	r3, #4
 800723a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800723e:	bf04      	itt	eq
 8007240:	0080      	lsleq	r0, r0, #2
 8007242:	3302      	addeq	r3, #2
 8007244:	2800      	cmp	r0, #0
 8007246:	db05      	blt.n	8007254 <__hi0bits+0x38>
 8007248:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800724c:	f103 0301 	add.w	r3, r3, #1
 8007250:	bf08      	it	eq
 8007252:	2320      	moveq	r3, #32
 8007254:	4618      	mov	r0, r3
 8007256:	4770      	bx	lr
 8007258:	2300      	movs	r3, #0
 800725a:	e7e4      	b.n	8007226 <__hi0bits+0xa>

0800725c <__lo0bits>:
 800725c:	6803      	ldr	r3, [r0, #0]
 800725e:	f013 0207 	ands.w	r2, r3, #7
 8007262:	4601      	mov	r1, r0
 8007264:	d00b      	beq.n	800727e <__lo0bits+0x22>
 8007266:	07da      	lsls	r2, r3, #31
 8007268:	d423      	bmi.n	80072b2 <__lo0bits+0x56>
 800726a:	0798      	lsls	r0, r3, #30
 800726c:	bf49      	itett	mi
 800726e:	085b      	lsrmi	r3, r3, #1
 8007270:	089b      	lsrpl	r3, r3, #2
 8007272:	2001      	movmi	r0, #1
 8007274:	600b      	strmi	r3, [r1, #0]
 8007276:	bf5c      	itt	pl
 8007278:	600b      	strpl	r3, [r1, #0]
 800727a:	2002      	movpl	r0, #2
 800727c:	4770      	bx	lr
 800727e:	b298      	uxth	r0, r3
 8007280:	b9a8      	cbnz	r0, 80072ae <__lo0bits+0x52>
 8007282:	0c1b      	lsrs	r3, r3, #16
 8007284:	2010      	movs	r0, #16
 8007286:	b2da      	uxtb	r2, r3
 8007288:	b90a      	cbnz	r2, 800728e <__lo0bits+0x32>
 800728a:	3008      	adds	r0, #8
 800728c:	0a1b      	lsrs	r3, r3, #8
 800728e:	071a      	lsls	r2, r3, #28
 8007290:	bf04      	itt	eq
 8007292:	091b      	lsreq	r3, r3, #4
 8007294:	3004      	addeq	r0, #4
 8007296:	079a      	lsls	r2, r3, #30
 8007298:	bf04      	itt	eq
 800729a:	089b      	lsreq	r3, r3, #2
 800729c:	3002      	addeq	r0, #2
 800729e:	07da      	lsls	r2, r3, #31
 80072a0:	d403      	bmi.n	80072aa <__lo0bits+0x4e>
 80072a2:	085b      	lsrs	r3, r3, #1
 80072a4:	f100 0001 	add.w	r0, r0, #1
 80072a8:	d005      	beq.n	80072b6 <__lo0bits+0x5a>
 80072aa:	600b      	str	r3, [r1, #0]
 80072ac:	4770      	bx	lr
 80072ae:	4610      	mov	r0, r2
 80072b0:	e7e9      	b.n	8007286 <__lo0bits+0x2a>
 80072b2:	2000      	movs	r0, #0
 80072b4:	4770      	bx	lr
 80072b6:	2020      	movs	r0, #32
 80072b8:	4770      	bx	lr
	...

080072bc <__i2b>:
 80072bc:	b510      	push	{r4, lr}
 80072be:	460c      	mov	r4, r1
 80072c0:	2101      	movs	r1, #1
 80072c2:	f7ff ff03 	bl	80070cc <_Balloc>
 80072c6:	4602      	mov	r2, r0
 80072c8:	b928      	cbnz	r0, 80072d6 <__i2b+0x1a>
 80072ca:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <__i2b+0x24>)
 80072cc:	4805      	ldr	r0, [pc, #20]	; (80072e4 <__i2b+0x28>)
 80072ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072d2:	f000 fd35 	bl	8007d40 <__assert_func>
 80072d6:	2301      	movs	r3, #1
 80072d8:	6144      	str	r4, [r0, #20]
 80072da:	6103      	str	r3, [r0, #16]
 80072dc:	bd10      	pop	{r4, pc}
 80072de:	bf00      	nop
 80072e0:	08008707 	.word	0x08008707
 80072e4:	08008778 	.word	0x08008778

080072e8 <__multiply>:
 80072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	4691      	mov	r9, r2
 80072ee:	690a      	ldr	r2, [r1, #16]
 80072f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	bfb8      	it	lt
 80072f8:	460b      	movlt	r3, r1
 80072fa:	460c      	mov	r4, r1
 80072fc:	bfbc      	itt	lt
 80072fe:	464c      	movlt	r4, r9
 8007300:	4699      	movlt	r9, r3
 8007302:	6927      	ldr	r7, [r4, #16]
 8007304:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007308:	68a3      	ldr	r3, [r4, #8]
 800730a:	6861      	ldr	r1, [r4, #4]
 800730c:	eb07 060a 	add.w	r6, r7, sl
 8007310:	42b3      	cmp	r3, r6
 8007312:	b085      	sub	sp, #20
 8007314:	bfb8      	it	lt
 8007316:	3101      	addlt	r1, #1
 8007318:	f7ff fed8 	bl	80070cc <_Balloc>
 800731c:	b930      	cbnz	r0, 800732c <__multiply+0x44>
 800731e:	4602      	mov	r2, r0
 8007320:	4b44      	ldr	r3, [pc, #272]	; (8007434 <__multiply+0x14c>)
 8007322:	4845      	ldr	r0, [pc, #276]	; (8007438 <__multiply+0x150>)
 8007324:	f240 115d 	movw	r1, #349	; 0x15d
 8007328:	f000 fd0a 	bl	8007d40 <__assert_func>
 800732c:	f100 0514 	add.w	r5, r0, #20
 8007330:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007334:	462b      	mov	r3, r5
 8007336:	2200      	movs	r2, #0
 8007338:	4543      	cmp	r3, r8
 800733a:	d321      	bcc.n	8007380 <__multiply+0x98>
 800733c:	f104 0314 	add.w	r3, r4, #20
 8007340:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007344:	f109 0314 	add.w	r3, r9, #20
 8007348:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800734c:	9202      	str	r2, [sp, #8]
 800734e:	1b3a      	subs	r2, r7, r4
 8007350:	3a15      	subs	r2, #21
 8007352:	f022 0203 	bic.w	r2, r2, #3
 8007356:	3204      	adds	r2, #4
 8007358:	f104 0115 	add.w	r1, r4, #21
 800735c:	428f      	cmp	r7, r1
 800735e:	bf38      	it	cc
 8007360:	2204      	movcc	r2, #4
 8007362:	9201      	str	r2, [sp, #4]
 8007364:	9a02      	ldr	r2, [sp, #8]
 8007366:	9303      	str	r3, [sp, #12]
 8007368:	429a      	cmp	r2, r3
 800736a:	d80c      	bhi.n	8007386 <__multiply+0x9e>
 800736c:	2e00      	cmp	r6, #0
 800736e:	dd03      	ble.n	8007378 <__multiply+0x90>
 8007370:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007374:	2b00      	cmp	r3, #0
 8007376:	d05a      	beq.n	800742e <__multiply+0x146>
 8007378:	6106      	str	r6, [r0, #16]
 800737a:	b005      	add	sp, #20
 800737c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007380:	f843 2b04 	str.w	r2, [r3], #4
 8007384:	e7d8      	b.n	8007338 <__multiply+0x50>
 8007386:	f8b3 a000 	ldrh.w	sl, [r3]
 800738a:	f1ba 0f00 	cmp.w	sl, #0
 800738e:	d024      	beq.n	80073da <__multiply+0xf2>
 8007390:	f104 0e14 	add.w	lr, r4, #20
 8007394:	46a9      	mov	r9, r5
 8007396:	f04f 0c00 	mov.w	ip, #0
 800739a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800739e:	f8d9 1000 	ldr.w	r1, [r9]
 80073a2:	fa1f fb82 	uxth.w	fp, r2
 80073a6:	b289      	uxth	r1, r1
 80073a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80073ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80073b0:	f8d9 2000 	ldr.w	r2, [r9]
 80073b4:	4461      	add	r1, ip
 80073b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80073be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073c2:	b289      	uxth	r1, r1
 80073c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073c8:	4577      	cmp	r7, lr
 80073ca:	f849 1b04 	str.w	r1, [r9], #4
 80073ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073d2:	d8e2      	bhi.n	800739a <__multiply+0xb2>
 80073d4:	9a01      	ldr	r2, [sp, #4]
 80073d6:	f845 c002 	str.w	ip, [r5, r2]
 80073da:	9a03      	ldr	r2, [sp, #12]
 80073dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073e0:	3304      	adds	r3, #4
 80073e2:	f1b9 0f00 	cmp.w	r9, #0
 80073e6:	d020      	beq.n	800742a <__multiply+0x142>
 80073e8:	6829      	ldr	r1, [r5, #0]
 80073ea:	f104 0c14 	add.w	ip, r4, #20
 80073ee:	46ae      	mov	lr, r5
 80073f0:	f04f 0a00 	mov.w	sl, #0
 80073f4:	f8bc b000 	ldrh.w	fp, [ip]
 80073f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073fc:	fb09 220b 	mla	r2, r9, fp, r2
 8007400:	4492      	add	sl, r2
 8007402:	b289      	uxth	r1, r1
 8007404:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007408:	f84e 1b04 	str.w	r1, [lr], #4
 800740c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007410:	f8be 1000 	ldrh.w	r1, [lr]
 8007414:	0c12      	lsrs	r2, r2, #16
 8007416:	fb09 1102 	mla	r1, r9, r2, r1
 800741a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800741e:	4567      	cmp	r7, ip
 8007420:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007424:	d8e6      	bhi.n	80073f4 <__multiply+0x10c>
 8007426:	9a01      	ldr	r2, [sp, #4]
 8007428:	50a9      	str	r1, [r5, r2]
 800742a:	3504      	adds	r5, #4
 800742c:	e79a      	b.n	8007364 <__multiply+0x7c>
 800742e:	3e01      	subs	r6, #1
 8007430:	e79c      	b.n	800736c <__multiply+0x84>
 8007432:	bf00      	nop
 8007434:	08008707 	.word	0x08008707
 8007438:	08008778 	.word	0x08008778

0800743c <__pow5mult>:
 800743c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007440:	4615      	mov	r5, r2
 8007442:	f012 0203 	ands.w	r2, r2, #3
 8007446:	4606      	mov	r6, r0
 8007448:	460f      	mov	r7, r1
 800744a:	d007      	beq.n	800745c <__pow5mult+0x20>
 800744c:	4c25      	ldr	r4, [pc, #148]	; (80074e4 <__pow5mult+0xa8>)
 800744e:	3a01      	subs	r2, #1
 8007450:	2300      	movs	r3, #0
 8007452:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007456:	f7ff fe9b 	bl	8007190 <__multadd>
 800745a:	4607      	mov	r7, r0
 800745c:	10ad      	asrs	r5, r5, #2
 800745e:	d03d      	beq.n	80074dc <__pow5mult+0xa0>
 8007460:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007462:	b97c      	cbnz	r4, 8007484 <__pow5mult+0x48>
 8007464:	2010      	movs	r0, #16
 8007466:	f7ff fe29 	bl	80070bc <malloc>
 800746a:	4602      	mov	r2, r0
 800746c:	6270      	str	r0, [r6, #36]	; 0x24
 800746e:	b928      	cbnz	r0, 800747c <__pow5mult+0x40>
 8007470:	4b1d      	ldr	r3, [pc, #116]	; (80074e8 <__pow5mult+0xac>)
 8007472:	481e      	ldr	r0, [pc, #120]	; (80074ec <__pow5mult+0xb0>)
 8007474:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007478:	f000 fc62 	bl	8007d40 <__assert_func>
 800747c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007480:	6004      	str	r4, [r0, #0]
 8007482:	60c4      	str	r4, [r0, #12]
 8007484:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007488:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800748c:	b94c      	cbnz	r4, 80074a2 <__pow5mult+0x66>
 800748e:	f240 2171 	movw	r1, #625	; 0x271
 8007492:	4630      	mov	r0, r6
 8007494:	f7ff ff12 	bl	80072bc <__i2b>
 8007498:	2300      	movs	r3, #0
 800749a:	f8c8 0008 	str.w	r0, [r8, #8]
 800749e:	4604      	mov	r4, r0
 80074a0:	6003      	str	r3, [r0, #0]
 80074a2:	f04f 0900 	mov.w	r9, #0
 80074a6:	07eb      	lsls	r3, r5, #31
 80074a8:	d50a      	bpl.n	80074c0 <__pow5mult+0x84>
 80074aa:	4639      	mov	r1, r7
 80074ac:	4622      	mov	r2, r4
 80074ae:	4630      	mov	r0, r6
 80074b0:	f7ff ff1a 	bl	80072e8 <__multiply>
 80074b4:	4639      	mov	r1, r7
 80074b6:	4680      	mov	r8, r0
 80074b8:	4630      	mov	r0, r6
 80074ba:	f7ff fe47 	bl	800714c <_Bfree>
 80074be:	4647      	mov	r7, r8
 80074c0:	106d      	asrs	r5, r5, #1
 80074c2:	d00b      	beq.n	80074dc <__pow5mult+0xa0>
 80074c4:	6820      	ldr	r0, [r4, #0]
 80074c6:	b938      	cbnz	r0, 80074d8 <__pow5mult+0x9c>
 80074c8:	4622      	mov	r2, r4
 80074ca:	4621      	mov	r1, r4
 80074cc:	4630      	mov	r0, r6
 80074ce:	f7ff ff0b 	bl	80072e8 <__multiply>
 80074d2:	6020      	str	r0, [r4, #0]
 80074d4:	f8c0 9000 	str.w	r9, [r0]
 80074d8:	4604      	mov	r4, r0
 80074da:	e7e4      	b.n	80074a6 <__pow5mult+0x6a>
 80074dc:	4638      	mov	r0, r7
 80074de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074e2:	bf00      	nop
 80074e4:	080088c8 	.word	0x080088c8
 80074e8:	08008695 	.word	0x08008695
 80074ec:	08008778 	.word	0x08008778

080074f0 <__lshift>:
 80074f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f4:	460c      	mov	r4, r1
 80074f6:	6849      	ldr	r1, [r1, #4]
 80074f8:	6923      	ldr	r3, [r4, #16]
 80074fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074fe:	68a3      	ldr	r3, [r4, #8]
 8007500:	4607      	mov	r7, r0
 8007502:	4691      	mov	r9, r2
 8007504:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007508:	f108 0601 	add.w	r6, r8, #1
 800750c:	42b3      	cmp	r3, r6
 800750e:	db0b      	blt.n	8007528 <__lshift+0x38>
 8007510:	4638      	mov	r0, r7
 8007512:	f7ff fddb 	bl	80070cc <_Balloc>
 8007516:	4605      	mov	r5, r0
 8007518:	b948      	cbnz	r0, 800752e <__lshift+0x3e>
 800751a:	4602      	mov	r2, r0
 800751c:	4b2a      	ldr	r3, [pc, #168]	; (80075c8 <__lshift+0xd8>)
 800751e:	482b      	ldr	r0, [pc, #172]	; (80075cc <__lshift+0xdc>)
 8007520:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007524:	f000 fc0c 	bl	8007d40 <__assert_func>
 8007528:	3101      	adds	r1, #1
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	e7ee      	b.n	800750c <__lshift+0x1c>
 800752e:	2300      	movs	r3, #0
 8007530:	f100 0114 	add.w	r1, r0, #20
 8007534:	f100 0210 	add.w	r2, r0, #16
 8007538:	4618      	mov	r0, r3
 800753a:	4553      	cmp	r3, sl
 800753c:	db37      	blt.n	80075ae <__lshift+0xbe>
 800753e:	6920      	ldr	r0, [r4, #16]
 8007540:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007544:	f104 0314 	add.w	r3, r4, #20
 8007548:	f019 091f 	ands.w	r9, r9, #31
 800754c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007550:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007554:	d02f      	beq.n	80075b6 <__lshift+0xc6>
 8007556:	f1c9 0e20 	rsb	lr, r9, #32
 800755a:	468a      	mov	sl, r1
 800755c:	f04f 0c00 	mov.w	ip, #0
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	fa02 f209 	lsl.w	r2, r2, r9
 8007566:	ea42 020c 	orr.w	r2, r2, ip
 800756a:	f84a 2b04 	str.w	r2, [sl], #4
 800756e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007572:	4298      	cmp	r0, r3
 8007574:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007578:	d8f2      	bhi.n	8007560 <__lshift+0x70>
 800757a:	1b03      	subs	r3, r0, r4
 800757c:	3b15      	subs	r3, #21
 800757e:	f023 0303 	bic.w	r3, r3, #3
 8007582:	3304      	adds	r3, #4
 8007584:	f104 0215 	add.w	r2, r4, #21
 8007588:	4290      	cmp	r0, r2
 800758a:	bf38      	it	cc
 800758c:	2304      	movcc	r3, #4
 800758e:	f841 c003 	str.w	ip, [r1, r3]
 8007592:	f1bc 0f00 	cmp.w	ip, #0
 8007596:	d001      	beq.n	800759c <__lshift+0xac>
 8007598:	f108 0602 	add.w	r6, r8, #2
 800759c:	3e01      	subs	r6, #1
 800759e:	4638      	mov	r0, r7
 80075a0:	612e      	str	r6, [r5, #16]
 80075a2:	4621      	mov	r1, r4
 80075a4:	f7ff fdd2 	bl	800714c <_Bfree>
 80075a8:	4628      	mov	r0, r5
 80075aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80075b2:	3301      	adds	r3, #1
 80075b4:	e7c1      	b.n	800753a <__lshift+0x4a>
 80075b6:	3904      	subs	r1, #4
 80075b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80075bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80075c0:	4298      	cmp	r0, r3
 80075c2:	d8f9      	bhi.n	80075b8 <__lshift+0xc8>
 80075c4:	e7ea      	b.n	800759c <__lshift+0xac>
 80075c6:	bf00      	nop
 80075c8:	08008707 	.word	0x08008707
 80075cc:	08008778 	.word	0x08008778

080075d0 <__mcmp>:
 80075d0:	b530      	push	{r4, r5, lr}
 80075d2:	6902      	ldr	r2, [r0, #16]
 80075d4:	690c      	ldr	r4, [r1, #16]
 80075d6:	1b12      	subs	r2, r2, r4
 80075d8:	d10e      	bne.n	80075f8 <__mcmp+0x28>
 80075da:	f100 0314 	add.w	r3, r0, #20
 80075de:	3114      	adds	r1, #20
 80075e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80075e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80075e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075f0:	42a5      	cmp	r5, r4
 80075f2:	d003      	beq.n	80075fc <__mcmp+0x2c>
 80075f4:	d305      	bcc.n	8007602 <__mcmp+0x32>
 80075f6:	2201      	movs	r2, #1
 80075f8:	4610      	mov	r0, r2
 80075fa:	bd30      	pop	{r4, r5, pc}
 80075fc:	4283      	cmp	r3, r0
 80075fe:	d3f3      	bcc.n	80075e8 <__mcmp+0x18>
 8007600:	e7fa      	b.n	80075f8 <__mcmp+0x28>
 8007602:	f04f 32ff 	mov.w	r2, #4294967295
 8007606:	e7f7      	b.n	80075f8 <__mcmp+0x28>

08007608 <__mdiff>:
 8007608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760c:	460c      	mov	r4, r1
 800760e:	4606      	mov	r6, r0
 8007610:	4611      	mov	r1, r2
 8007612:	4620      	mov	r0, r4
 8007614:	4690      	mov	r8, r2
 8007616:	f7ff ffdb 	bl	80075d0 <__mcmp>
 800761a:	1e05      	subs	r5, r0, #0
 800761c:	d110      	bne.n	8007640 <__mdiff+0x38>
 800761e:	4629      	mov	r1, r5
 8007620:	4630      	mov	r0, r6
 8007622:	f7ff fd53 	bl	80070cc <_Balloc>
 8007626:	b930      	cbnz	r0, 8007636 <__mdiff+0x2e>
 8007628:	4b3a      	ldr	r3, [pc, #232]	; (8007714 <__mdiff+0x10c>)
 800762a:	4602      	mov	r2, r0
 800762c:	f240 2132 	movw	r1, #562	; 0x232
 8007630:	4839      	ldr	r0, [pc, #228]	; (8007718 <__mdiff+0x110>)
 8007632:	f000 fb85 	bl	8007d40 <__assert_func>
 8007636:	2301      	movs	r3, #1
 8007638:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800763c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007640:	bfa4      	itt	ge
 8007642:	4643      	movge	r3, r8
 8007644:	46a0      	movge	r8, r4
 8007646:	4630      	mov	r0, r6
 8007648:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800764c:	bfa6      	itte	ge
 800764e:	461c      	movge	r4, r3
 8007650:	2500      	movge	r5, #0
 8007652:	2501      	movlt	r5, #1
 8007654:	f7ff fd3a 	bl	80070cc <_Balloc>
 8007658:	b920      	cbnz	r0, 8007664 <__mdiff+0x5c>
 800765a:	4b2e      	ldr	r3, [pc, #184]	; (8007714 <__mdiff+0x10c>)
 800765c:	4602      	mov	r2, r0
 800765e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007662:	e7e5      	b.n	8007630 <__mdiff+0x28>
 8007664:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007668:	6926      	ldr	r6, [r4, #16]
 800766a:	60c5      	str	r5, [r0, #12]
 800766c:	f104 0914 	add.w	r9, r4, #20
 8007670:	f108 0514 	add.w	r5, r8, #20
 8007674:	f100 0e14 	add.w	lr, r0, #20
 8007678:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800767c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007680:	f108 0210 	add.w	r2, r8, #16
 8007684:	46f2      	mov	sl, lr
 8007686:	2100      	movs	r1, #0
 8007688:	f859 3b04 	ldr.w	r3, [r9], #4
 800768c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007690:	fa1f f883 	uxth.w	r8, r3
 8007694:	fa11 f18b 	uxtah	r1, r1, fp
 8007698:	0c1b      	lsrs	r3, r3, #16
 800769a:	eba1 0808 	sub.w	r8, r1, r8
 800769e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076a6:	fa1f f888 	uxth.w	r8, r8
 80076aa:	1419      	asrs	r1, r3, #16
 80076ac:	454e      	cmp	r6, r9
 80076ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80076b2:	f84a 3b04 	str.w	r3, [sl], #4
 80076b6:	d8e7      	bhi.n	8007688 <__mdiff+0x80>
 80076b8:	1b33      	subs	r3, r6, r4
 80076ba:	3b15      	subs	r3, #21
 80076bc:	f023 0303 	bic.w	r3, r3, #3
 80076c0:	3304      	adds	r3, #4
 80076c2:	3415      	adds	r4, #21
 80076c4:	42a6      	cmp	r6, r4
 80076c6:	bf38      	it	cc
 80076c8:	2304      	movcc	r3, #4
 80076ca:	441d      	add	r5, r3
 80076cc:	4473      	add	r3, lr
 80076ce:	469e      	mov	lr, r3
 80076d0:	462e      	mov	r6, r5
 80076d2:	4566      	cmp	r6, ip
 80076d4:	d30e      	bcc.n	80076f4 <__mdiff+0xec>
 80076d6:	f10c 0203 	add.w	r2, ip, #3
 80076da:	1b52      	subs	r2, r2, r5
 80076dc:	f022 0203 	bic.w	r2, r2, #3
 80076e0:	3d03      	subs	r5, #3
 80076e2:	45ac      	cmp	ip, r5
 80076e4:	bf38      	it	cc
 80076e6:	2200      	movcc	r2, #0
 80076e8:	441a      	add	r2, r3
 80076ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80076ee:	b17b      	cbz	r3, 8007710 <__mdiff+0x108>
 80076f0:	6107      	str	r7, [r0, #16]
 80076f2:	e7a3      	b.n	800763c <__mdiff+0x34>
 80076f4:	f856 8b04 	ldr.w	r8, [r6], #4
 80076f8:	fa11 f288 	uxtah	r2, r1, r8
 80076fc:	1414      	asrs	r4, r2, #16
 80076fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007702:	b292      	uxth	r2, r2
 8007704:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007708:	f84e 2b04 	str.w	r2, [lr], #4
 800770c:	1421      	asrs	r1, r4, #16
 800770e:	e7e0      	b.n	80076d2 <__mdiff+0xca>
 8007710:	3f01      	subs	r7, #1
 8007712:	e7ea      	b.n	80076ea <__mdiff+0xe2>
 8007714:	08008707 	.word	0x08008707
 8007718:	08008778 	.word	0x08008778

0800771c <__d2b>:
 800771c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007720:	4689      	mov	r9, r1
 8007722:	2101      	movs	r1, #1
 8007724:	ec57 6b10 	vmov	r6, r7, d0
 8007728:	4690      	mov	r8, r2
 800772a:	f7ff fccf 	bl	80070cc <_Balloc>
 800772e:	4604      	mov	r4, r0
 8007730:	b930      	cbnz	r0, 8007740 <__d2b+0x24>
 8007732:	4602      	mov	r2, r0
 8007734:	4b25      	ldr	r3, [pc, #148]	; (80077cc <__d2b+0xb0>)
 8007736:	4826      	ldr	r0, [pc, #152]	; (80077d0 <__d2b+0xb4>)
 8007738:	f240 310a 	movw	r1, #778	; 0x30a
 800773c:	f000 fb00 	bl	8007d40 <__assert_func>
 8007740:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007744:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007748:	bb35      	cbnz	r5, 8007798 <__d2b+0x7c>
 800774a:	2e00      	cmp	r6, #0
 800774c:	9301      	str	r3, [sp, #4]
 800774e:	d028      	beq.n	80077a2 <__d2b+0x86>
 8007750:	4668      	mov	r0, sp
 8007752:	9600      	str	r6, [sp, #0]
 8007754:	f7ff fd82 	bl	800725c <__lo0bits>
 8007758:	9900      	ldr	r1, [sp, #0]
 800775a:	b300      	cbz	r0, 800779e <__d2b+0x82>
 800775c:	9a01      	ldr	r2, [sp, #4]
 800775e:	f1c0 0320 	rsb	r3, r0, #32
 8007762:	fa02 f303 	lsl.w	r3, r2, r3
 8007766:	430b      	orrs	r3, r1
 8007768:	40c2      	lsrs	r2, r0
 800776a:	6163      	str	r3, [r4, #20]
 800776c:	9201      	str	r2, [sp, #4]
 800776e:	9b01      	ldr	r3, [sp, #4]
 8007770:	61a3      	str	r3, [r4, #24]
 8007772:	2b00      	cmp	r3, #0
 8007774:	bf14      	ite	ne
 8007776:	2202      	movne	r2, #2
 8007778:	2201      	moveq	r2, #1
 800777a:	6122      	str	r2, [r4, #16]
 800777c:	b1d5      	cbz	r5, 80077b4 <__d2b+0x98>
 800777e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007782:	4405      	add	r5, r0
 8007784:	f8c9 5000 	str.w	r5, [r9]
 8007788:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800778c:	f8c8 0000 	str.w	r0, [r8]
 8007790:	4620      	mov	r0, r4
 8007792:	b003      	add	sp, #12
 8007794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800779c:	e7d5      	b.n	800774a <__d2b+0x2e>
 800779e:	6161      	str	r1, [r4, #20]
 80077a0:	e7e5      	b.n	800776e <__d2b+0x52>
 80077a2:	a801      	add	r0, sp, #4
 80077a4:	f7ff fd5a 	bl	800725c <__lo0bits>
 80077a8:	9b01      	ldr	r3, [sp, #4]
 80077aa:	6163      	str	r3, [r4, #20]
 80077ac:	2201      	movs	r2, #1
 80077ae:	6122      	str	r2, [r4, #16]
 80077b0:	3020      	adds	r0, #32
 80077b2:	e7e3      	b.n	800777c <__d2b+0x60>
 80077b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077bc:	f8c9 0000 	str.w	r0, [r9]
 80077c0:	6918      	ldr	r0, [r3, #16]
 80077c2:	f7ff fd2b 	bl	800721c <__hi0bits>
 80077c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077ca:	e7df      	b.n	800778c <__d2b+0x70>
 80077cc:	08008707 	.word	0x08008707
 80077d0:	08008778 	.word	0x08008778

080077d4 <_calloc_r>:
 80077d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077d6:	fba1 2402 	umull	r2, r4, r1, r2
 80077da:	b94c      	cbnz	r4, 80077f0 <_calloc_r+0x1c>
 80077dc:	4611      	mov	r1, r2
 80077de:	9201      	str	r2, [sp, #4]
 80077e0:	f000 f87a 	bl	80078d8 <_malloc_r>
 80077e4:	9a01      	ldr	r2, [sp, #4]
 80077e6:	4605      	mov	r5, r0
 80077e8:	b930      	cbnz	r0, 80077f8 <_calloc_r+0x24>
 80077ea:	4628      	mov	r0, r5
 80077ec:	b003      	add	sp, #12
 80077ee:	bd30      	pop	{r4, r5, pc}
 80077f0:	220c      	movs	r2, #12
 80077f2:	6002      	str	r2, [r0, #0]
 80077f4:	2500      	movs	r5, #0
 80077f6:	e7f8      	b.n	80077ea <_calloc_r+0x16>
 80077f8:	4621      	mov	r1, r4
 80077fa:	f7fd fe01 	bl	8005400 <memset>
 80077fe:	e7f4      	b.n	80077ea <_calloc_r+0x16>

08007800 <_free_r>:
 8007800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007802:	2900      	cmp	r1, #0
 8007804:	d044      	beq.n	8007890 <_free_r+0x90>
 8007806:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800780a:	9001      	str	r0, [sp, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	f1a1 0404 	sub.w	r4, r1, #4
 8007812:	bfb8      	it	lt
 8007814:	18e4      	addlt	r4, r4, r3
 8007816:	f000 fb19 	bl	8007e4c <__malloc_lock>
 800781a:	4a1e      	ldr	r2, [pc, #120]	; (8007894 <_free_r+0x94>)
 800781c:	9801      	ldr	r0, [sp, #4]
 800781e:	6813      	ldr	r3, [r2, #0]
 8007820:	b933      	cbnz	r3, 8007830 <_free_r+0x30>
 8007822:	6063      	str	r3, [r4, #4]
 8007824:	6014      	str	r4, [r2, #0]
 8007826:	b003      	add	sp, #12
 8007828:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800782c:	f000 bb14 	b.w	8007e58 <__malloc_unlock>
 8007830:	42a3      	cmp	r3, r4
 8007832:	d908      	bls.n	8007846 <_free_r+0x46>
 8007834:	6825      	ldr	r5, [r4, #0]
 8007836:	1961      	adds	r1, r4, r5
 8007838:	428b      	cmp	r3, r1
 800783a:	bf01      	itttt	eq
 800783c:	6819      	ldreq	r1, [r3, #0]
 800783e:	685b      	ldreq	r3, [r3, #4]
 8007840:	1949      	addeq	r1, r1, r5
 8007842:	6021      	streq	r1, [r4, #0]
 8007844:	e7ed      	b.n	8007822 <_free_r+0x22>
 8007846:	461a      	mov	r2, r3
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	b10b      	cbz	r3, 8007850 <_free_r+0x50>
 800784c:	42a3      	cmp	r3, r4
 800784e:	d9fa      	bls.n	8007846 <_free_r+0x46>
 8007850:	6811      	ldr	r1, [r2, #0]
 8007852:	1855      	adds	r5, r2, r1
 8007854:	42a5      	cmp	r5, r4
 8007856:	d10b      	bne.n	8007870 <_free_r+0x70>
 8007858:	6824      	ldr	r4, [r4, #0]
 800785a:	4421      	add	r1, r4
 800785c:	1854      	adds	r4, r2, r1
 800785e:	42a3      	cmp	r3, r4
 8007860:	6011      	str	r1, [r2, #0]
 8007862:	d1e0      	bne.n	8007826 <_free_r+0x26>
 8007864:	681c      	ldr	r4, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	6053      	str	r3, [r2, #4]
 800786a:	4421      	add	r1, r4
 800786c:	6011      	str	r1, [r2, #0]
 800786e:	e7da      	b.n	8007826 <_free_r+0x26>
 8007870:	d902      	bls.n	8007878 <_free_r+0x78>
 8007872:	230c      	movs	r3, #12
 8007874:	6003      	str	r3, [r0, #0]
 8007876:	e7d6      	b.n	8007826 <_free_r+0x26>
 8007878:	6825      	ldr	r5, [r4, #0]
 800787a:	1961      	adds	r1, r4, r5
 800787c:	428b      	cmp	r3, r1
 800787e:	bf04      	itt	eq
 8007880:	6819      	ldreq	r1, [r3, #0]
 8007882:	685b      	ldreq	r3, [r3, #4]
 8007884:	6063      	str	r3, [r4, #4]
 8007886:	bf04      	itt	eq
 8007888:	1949      	addeq	r1, r1, r5
 800788a:	6021      	streq	r1, [r4, #0]
 800788c:	6054      	str	r4, [r2, #4]
 800788e:	e7ca      	b.n	8007826 <_free_r+0x26>
 8007890:	b003      	add	sp, #12
 8007892:	bd30      	pop	{r4, r5, pc}
 8007894:	200022f0 	.word	0x200022f0

08007898 <sbrk_aligned>:
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	4e0e      	ldr	r6, [pc, #56]	; (80078d4 <sbrk_aligned+0x3c>)
 800789c:	460c      	mov	r4, r1
 800789e:	6831      	ldr	r1, [r6, #0]
 80078a0:	4605      	mov	r5, r0
 80078a2:	b911      	cbnz	r1, 80078aa <sbrk_aligned+0x12>
 80078a4:	f000 f9e6 	bl	8007c74 <_sbrk_r>
 80078a8:	6030      	str	r0, [r6, #0]
 80078aa:	4621      	mov	r1, r4
 80078ac:	4628      	mov	r0, r5
 80078ae:	f000 f9e1 	bl	8007c74 <_sbrk_r>
 80078b2:	1c43      	adds	r3, r0, #1
 80078b4:	d00a      	beq.n	80078cc <sbrk_aligned+0x34>
 80078b6:	1cc4      	adds	r4, r0, #3
 80078b8:	f024 0403 	bic.w	r4, r4, #3
 80078bc:	42a0      	cmp	r0, r4
 80078be:	d007      	beq.n	80078d0 <sbrk_aligned+0x38>
 80078c0:	1a21      	subs	r1, r4, r0
 80078c2:	4628      	mov	r0, r5
 80078c4:	f000 f9d6 	bl	8007c74 <_sbrk_r>
 80078c8:	3001      	adds	r0, #1
 80078ca:	d101      	bne.n	80078d0 <sbrk_aligned+0x38>
 80078cc:	f04f 34ff 	mov.w	r4, #4294967295
 80078d0:	4620      	mov	r0, r4
 80078d2:	bd70      	pop	{r4, r5, r6, pc}
 80078d4:	200022f4 	.word	0x200022f4

080078d8 <_malloc_r>:
 80078d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078dc:	1ccd      	adds	r5, r1, #3
 80078de:	f025 0503 	bic.w	r5, r5, #3
 80078e2:	3508      	adds	r5, #8
 80078e4:	2d0c      	cmp	r5, #12
 80078e6:	bf38      	it	cc
 80078e8:	250c      	movcc	r5, #12
 80078ea:	2d00      	cmp	r5, #0
 80078ec:	4607      	mov	r7, r0
 80078ee:	db01      	blt.n	80078f4 <_malloc_r+0x1c>
 80078f0:	42a9      	cmp	r1, r5
 80078f2:	d905      	bls.n	8007900 <_malloc_r+0x28>
 80078f4:	230c      	movs	r3, #12
 80078f6:	603b      	str	r3, [r7, #0]
 80078f8:	2600      	movs	r6, #0
 80078fa:	4630      	mov	r0, r6
 80078fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007900:	4e2e      	ldr	r6, [pc, #184]	; (80079bc <_malloc_r+0xe4>)
 8007902:	f000 faa3 	bl	8007e4c <__malloc_lock>
 8007906:	6833      	ldr	r3, [r6, #0]
 8007908:	461c      	mov	r4, r3
 800790a:	bb34      	cbnz	r4, 800795a <_malloc_r+0x82>
 800790c:	4629      	mov	r1, r5
 800790e:	4638      	mov	r0, r7
 8007910:	f7ff ffc2 	bl	8007898 <sbrk_aligned>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	4604      	mov	r4, r0
 8007918:	d14d      	bne.n	80079b6 <_malloc_r+0xde>
 800791a:	6834      	ldr	r4, [r6, #0]
 800791c:	4626      	mov	r6, r4
 800791e:	2e00      	cmp	r6, #0
 8007920:	d140      	bne.n	80079a4 <_malloc_r+0xcc>
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	4631      	mov	r1, r6
 8007926:	4638      	mov	r0, r7
 8007928:	eb04 0803 	add.w	r8, r4, r3
 800792c:	f000 f9a2 	bl	8007c74 <_sbrk_r>
 8007930:	4580      	cmp	r8, r0
 8007932:	d13a      	bne.n	80079aa <_malloc_r+0xd2>
 8007934:	6821      	ldr	r1, [r4, #0]
 8007936:	3503      	adds	r5, #3
 8007938:	1a6d      	subs	r5, r5, r1
 800793a:	f025 0503 	bic.w	r5, r5, #3
 800793e:	3508      	adds	r5, #8
 8007940:	2d0c      	cmp	r5, #12
 8007942:	bf38      	it	cc
 8007944:	250c      	movcc	r5, #12
 8007946:	4629      	mov	r1, r5
 8007948:	4638      	mov	r0, r7
 800794a:	f7ff ffa5 	bl	8007898 <sbrk_aligned>
 800794e:	3001      	adds	r0, #1
 8007950:	d02b      	beq.n	80079aa <_malloc_r+0xd2>
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	442b      	add	r3, r5
 8007956:	6023      	str	r3, [r4, #0]
 8007958:	e00e      	b.n	8007978 <_malloc_r+0xa0>
 800795a:	6822      	ldr	r2, [r4, #0]
 800795c:	1b52      	subs	r2, r2, r5
 800795e:	d41e      	bmi.n	800799e <_malloc_r+0xc6>
 8007960:	2a0b      	cmp	r2, #11
 8007962:	d916      	bls.n	8007992 <_malloc_r+0xba>
 8007964:	1961      	adds	r1, r4, r5
 8007966:	42a3      	cmp	r3, r4
 8007968:	6025      	str	r5, [r4, #0]
 800796a:	bf18      	it	ne
 800796c:	6059      	strne	r1, [r3, #4]
 800796e:	6863      	ldr	r3, [r4, #4]
 8007970:	bf08      	it	eq
 8007972:	6031      	streq	r1, [r6, #0]
 8007974:	5162      	str	r2, [r4, r5]
 8007976:	604b      	str	r3, [r1, #4]
 8007978:	4638      	mov	r0, r7
 800797a:	f104 060b 	add.w	r6, r4, #11
 800797e:	f000 fa6b 	bl	8007e58 <__malloc_unlock>
 8007982:	f026 0607 	bic.w	r6, r6, #7
 8007986:	1d23      	adds	r3, r4, #4
 8007988:	1af2      	subs	r2, r6, r3
 800798a:	d0b6      	beq.n	80078fa <_malloc_r+0x22>
 800798c:	1b9b      	subs	r3, r3, r6
 800798e:	50a3      	str	r3, [r4, r2]
 8007990:	e7b3      	b.n	80078fa <_malloc_r+0x22>
 8007992:	6862      	ldr	r2, [r4, #4]
 8007994:	42a3      	cmp	r3, r4
 8007996:	bf0c      	ite	eq
 8007998:	6032      	streq	r2, [r6, #0]
 800799a:	605a      	strne	r2, [r3, #4]
 800799c:	e7ec      	b.n	8007978 <_malloc_r+0xa0>
 800799e:	4623      	mov	r3, r4
 80079a0:	6864      	ldr	r4, [r4, #4]
 80079a2:	e7b2      	b.n	800790a <_malloc_r+0x32>
 80079a4:	4634      	mov	r4, r6
 80079a6:	6876      	ldr	r6, [r6, #4]
 80079a8:	e7b9      	b.n	800791e <_malloc_r+0x46>
 80079aa:	230c      	movs	r3, #12
 80079ac:	603b      	str	r3, [r7, #0]
 80079ae:	4638      	mov	r0, r7
 80079b0:	f000 fa52 	bl	8007e58 <__malloc_unlock>
 80079b4:	e7a1      	b.n	80078fa <_malloc_r+0x22>
 80079b6:	6025      	str	r5, [r4, #0]
 80079b8:	e7de      	b.n	8007978 <_malloc_r+0xa0>
 80079ba:	bf00      	nop
 80079bc:	200022f0 	.word	0x200022f0

080079c0 <__sfputc_r>:
 80079c0:	6893      	ldr	r3, [r2, #8]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	b410      	push	{r4}
 80079c8:	6093      	str	r3, [r2, #8]
 80079ca:	da08      	bge.n	80079de <__sfputc_r+0x1e>
 80079cc:	6994      	ldr	r4, [r2, #24]
 80079ce:	42a3      	cmp	r3, r4
 80079d0:	db01      	blt.n	80079d6 <__sfputc_r+0x16>
 80079d2:	290a      	cmp	r1, #10
 80079d4:	d103      	bne.n	80079de <__sfputc_r+0x1e>
 80079d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079da:	f7fe ba11 	b.w	8005e00 <__swbuf_r>
 80079de:	6813      	ldr	r3, [r2, #0]
 80079e0:	1c58      	adds	r0, r3, #1
 80079e2:	6010      	str	r0, [r2, #0]
 80079e4:	7019      	strb	r1, [r3, #0]
 80079e6:	4608      	mov	r0, r1
 80079e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <__sfputs_r>:
 80079ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f0:	4606      	mov	r6, r0
 80079f2:	460f      	mov	r7, r1
 80079f4:	4614      	mov	r4, r2
 80079f6:	18d5      	adds	r5, r2, r3
 80079f8:	42ac      	cmp	r4, r5
 80079fa:	d101      	bne.n	8007a00 <__sfputs_r+0x12>
 80079fc:	2000      	movs	r0, #0
 80079fe:	e007      	b.n	8007a10 <__sfputs_r+0x22>
 8007a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a04:	463a      	mov	r2, r7
 8007a06:	4630      	mov	r0, r6
 8007a08:	f7ff ffda 	bl	80079c0 <__sfputc_r>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d1f3      	bne.n	80079f8 <__sfputs_r+0xa>
 8007a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a14 <_vfiprintf_r>:
 8007a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a18:	460d      	mov	r5, r1
 8007a1a:	b09d      	sub	sp, #116	; 0x74
 8007a1c:	4614      	mov	r4, r2
 8007a1e:	4698      	mov	r8, r3
 8007a20:	4606      	mov	r6, r0
 8007a22:	b118      	cbz	r0, 8007a2c <_vfiprintf_r+0x18>
 8007a24:	6983      	ldr	r3, [r0, #24]
 8007a26:	b90b      	cbnz	r3, 8007a2c <_vfiprintf_r+0x18>
 8007a28:	f7ff fa3e 	bl	8006ea8 <__sinit>
 8007a2c:	4b89      	ldr	r3, [pc, #548]	; (8007c54 <_vfiprintf_r+0x240>)
 8007a2e:	429d      	cmp	r5, r3
 8007a30:	d11b      	bne.n	8007a6a <_vfiprintf_r+0x56>
 8007a32:	6875      	ldr	r5, [r6, #4]
 8007a34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a36:	07d9      	lsls	r1, r3, #31
 8007a38:	d405      	bmi.n	8007a46 <_vfiprintf_r+0x32>
 8007a3a:	89ab      	ldrh	r3, [r5, #12]
 8007a3c:	059a      	lsls	r2, r3, #22
 8007a3e:	d402      	bmi.n	8007a46 <_vfiprintf_r+0x32>
 8007a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a42:	f7ff fad4 	bl	8006fee <__retarget_lock_acquire_recursive>
 8007a46:	89ab      	ldrh	r3, [r5, #12]
 8007a48:	071b      	lsls	r3, r3, #28
 8007a4a:	d501      	bpl.n	8007a50 <_vfiprintf_r+0x3c>
 8007a4c:	692b      	ldr	r3, [r5, #16]
 8007a4e:	b9eb      	cbnz	r3, 8007a8c <_vfiprintf_r+0x78>
 8007a50:	4629      	mov	r1, r5
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7fe fa26 	bl	8005ea4 <__swsetup_r>
 8007a58:	b1c0      	cbz	r0, 8007a8c <_vfiprintf_r+0x78>
 8007a5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a5c:	07dc      	lsls	r4, r3, #31
 8007a5e:	d50e      	bpl.n	8007a7e <_vfiprintf_r+0x6a>
 8007a60:	f04f 30ff 	mov.w	r0, #4294967295
 8007a64:	b01d      	add	sp, #116	; 0x74
 8007a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6a:	4b7b      	ldr	r3, [pc, #492]	; (8007c58 <_vfiprintf_r+0x244>)
 8007a6c:	429d      	cmp	r5, r3
 8007a6e:	d101      	bne.n	8007a74 <_vfiprintf_r+0x60>
 8007a70:	68b5      	ldr	r5, [r6, #8]
 8007a72:	e7df      	b.n	8007a34 <_vfiprintf_r+0x20>
 8007a74:	4b79      	ldr	r3, [pc, #484]	; (8007c5c <_vfiprintf_r+0x248>)
 8007a76:	429d      	cmp	r5, r3
 8007a78:	bf08      	it	eq
 8007a7a:	68f5      	ldreq	r5, [r6, #12]
 8007a7c:	e7da      	b.n	8007a34 <_vfiprintf_r+0x20>
 8007a7e:	89ab      	ldrh	r3, [r5, #12]
 8007a80:	0598      	lsls	r0, r3, #22
 8007a82:	d4ed      	bmi.n	8007a60 <_vfiprintf_r+0x4c>
 8007a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a86:	f7ff fab3 	bl	8006ff0 <__retarget_lock_release_recursive>
 8007a8a:	e7e9      	b.n	8007a60 <_vfiprintf_r+0x4c>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a90:	2320      	movs	r3, #32
 8007a92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a9a:	2330      	movs	r3, #48	; 0x30
 8007a9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c60 <_vfiprintf_r+0x24c>
 8007aa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007aa4:	f04f 0901 	mov.w	r9, #1
 8007aa8:	4623      	mov	r3, r4
 8007aaa:	469a      	mov	sl, r3
 8007aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ab0:	b10a      	cbz	r2, 8007ab6 <_vfiprintf_r+0xa2>
 8007ab2:	2a25      	cmp	r2, #37	; 0x25
 8007ab4:	d1f9      	bne.n	8007aaa <_vfiprintf_r+0x96>
 8007ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8007aba:	d00b      	beq.n	8007ad4 <_vfiprintf_r+0xc0>
 8007abc:	465b      	mov	r3, fp
 8007abe:	4622      	mov	r2, r4
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	f7ff ff93 	bl	80079ee <__sfputs_r>
 8007ac8:	3001      	adds	r0, #1
 8007aca:	f000 80aa 	beq.w	8007c22 <_vfiprintf_r+0x20e>
 8007ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ad0:	445a      	add	r2, fp
 8007ad2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 80a2 	beq.w	8007c22 <_vfiprintf_r+0x20e>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ae8:	f10a 0a01 	add.w	sl, sl, #1
 8007aec:	9304      	str	r3, [sp, #16]
 8007aee:	9307      	str	r3, [sp, #28]
 8007af0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007af4:	931a      	str	r3, [sp, #104]	; 0x68
 8007af6:	4654      	mov	r4, sl
 8007af8:	2205      	movs	r2, #5
 8007afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007afe:	4858      	ldr	r0, [pc, #352]	; (8007c60 <_vfiprintf_r+0x24c>)
 8007b00:	f7f8 fb6e 	bl	80001e0 <memchr>
 8007b04:	9a04      	ldr	r2, [sp, #16]
 8007b06:	b9d8      	cbnz	r0, 8007b40 <_vfiprintf_r+0x12c>
 8007b08:	06d1      	lsls	r1, r2, #27
 8007b0a:	bf44      	itt	mi
 8007b0c:	2320      	movmi	r3, #32
 8007b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b12:	0713      	lsls	r3, r2, #28
 8007b14:	bf44      	itt	mi
 8007b16:	232b      	movmi	r3, #43	; 0x2b
 8007b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b20:	2b2a      	cmp	r3, #42	; 0x2a
 8007b22:	d015      	beq.n	8007b50 <_vfiprintf_r+0x13c>
 8007b24:	9a07      	ldr	r2, [sp, #28]
 8007b26:	4654      	mov	r4, sl
 8007b28:	2000      	movs	r0, #0
 8007b2a:	f04f 0c0a 	mov.w	ip, #10
 8007b2e:	4621      	mov	r1, r4
 8007b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b34:	3b30      	subs	r3, #48	; 0x30
 8007b36:	2b09      	cmp	r3, #9
 8007b38:	d94e      	bls.n	8007bd8 <_vfiprintf_r+0x1c4>
 8007b3a:	b1b0      	cbz	r0, 8007b6a <_vfiprintf_r+0x156>
 8007b3c:	9207      	str	r2, [sp, #28]
 8007b3e:	e014      	b.n	8007b6a <_vfiprintf_r+0x156>
 8007b40:	eba0 0308 	sub.w	r3, r0, r8
 8007b44:	fa09 f303 	lsl.w	r3, r9, r3
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	9304      	str	r3, [sp, #16]
 8007b4c:	46a2      	mov	sl, r4
 8007b4e:	e7d2      	b.n	8007af6 <_vfiprintf_r+0xe2>
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	1d19      	adds	r1, r3, #4
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	9103      	str	r1, [sp, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	bfbb      	ittet	lt
 8007b5c:	425b      	neglt	r3, r3
 8007b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b62:	9307      	strge	r3, [sp, #28]
 8007b64:	9307      	strlt	r3, [sp, #28]
 8007b66:	bfb8      	it	lt
 8007b68:	9204      	strlt	r2, [sp, #16]
 8007b6a:	7823      	ldrb	r3, [r4, #0]
 8007b6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007b6e:	d10c      	bne.n	8007b8a <_vfiprintf_r+0x176>
 8007b70:	7863      	ldrb	r3, [r4, #1]
 8007b72:	2b2a      	cmp	r3, #42	; 0x2a
 8007b74:	d135      	bne.n	8007be2 <_vfiprintf_r+0x1ce>
 8007b76:	9b03      	ldr	r3, [sp, #12]
 8007b78:	1d1a      	adds	r2, r3, #4
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	9203      	str	r2, [sp, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	bfb8      	it	lt
 8007b82:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b86:	3402      	adds	r4, #2
 8007b88:	9305      	str	r3, [sp, #20]
 8007b8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c70 <_vfiprintf_r+0x25c>
 8007b8e:	7821      	ldrb	r1, [r4, #0]
 8007b90:	2203      	movs	r2, #3
 8007b92:	4650      	mov	r0, sl
 8007b94:	f7f8 fb24 	bl	80001e0 <memchr>
 8007b98:	b140      	cbz	r0, 8007bac <_vfiprintf_r+0x198>
 8007b9a:	2340      	movs	r3, #64	; 0x40
 8007b9c:	eba0 000a 	sub.w	r0, r0, sl
 8007ba0:	fa03 f000 	lsl.w	r0, r3, r0
 8007ba4:	9b04      	ldr	r3, [sp, #16]
 8007ba6:	4303      	orrs	r3, r0
 8007ba8:	3401      	adds	r4, #1
 8007baa:	9304      	str	r3, [sp, #16]
 8007bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb0:	482c      	ldr	r0, [pc, #176]	; (8007c64 <_vfiprintf_r+0x250>)
 8007bb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bb6:	2206      	movs	r2, #6
 8007bb8:	f7f8 fb12 	bl	80001e0 <memchr>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d03f      	beq.n	8007c40 <_vfiprintf_r+0x22c>
 8007bc0:	4b29      	ldr	r3, [pc, #164]	; (8007c68 <_vfiprintf_r+0x254>)
 8007bc2:	bb1b      	cbnz	r3, 8007c0c <_vfiprintf_r+0x1f8>
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	3307      	adds	r3, #7
 8007bc8:	f023 0307 	bic.w	r3, r3, #7
 8007bcc:	3308      	adds	r3, #8
 8007bce:	9303      	str	r3, [sp, #12]
 8007bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd2:	443b      	add	r3, r7
 8007bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007bd6:	e767      	b.n	8007aa8 <_vfiprintf_r+0x94>
 8007bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bdc:	460c      	mov	r4, r1
 8007bde:	2001      	movs	r0, #1
 8007be0:	e7a5      	b.n	8007b2e <_vfiprintf_r+0x11a>
 8007be2:	2300      	movs	r3, #0
 8007be4:	3401      	adds	r4, #1
 8007be6:	9305      	str	r3, [sp, #20]
 8007be8:	4619      	mov	r1, r3
 8007bea:	f04f 0c0a 	mov.w	ip, #10
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bf4:	3a30      	subs	r2, #48	; 0x30
 8007bf6:	2a09      	cmp	r2, #9
 8007bf8:	d903      	bls.n	8007c02 <_vfiprintf_r+0x1ee>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d0c5      	beq.n	8007b8a <_vfiprintf_r+0x176>
 8007bfe:	9105      	str	r1, [sp, #20]
 8007c00:	e7c3      	b.n	8007b8a <_vfiprintf_r+0x176>
 8007c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c06:	4604      	mov	r4, r0
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e7f0      	b.n	8007bee <_vfiprintf_r+0x1da>
 8007c0c:	ab03      	add	r3, sp, #12
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	462a      	mov	r2, r5
 8007c12:	4b16      	ldr	r3, [pc, #88]	; (8007c6c <_vfiprintf_r+0x258>)
 8007c14:	a904      	add	r1, sp, #16
 8007c16:	4630      	mov	r0, r6
 8007c18:	f7fd fc9a 	bl	8005550 <_printf_float>
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	1c78      	adds	r0, r7, #1
 8007c20:	d1d6      	bne.n	8007bd0 <_vfiprintf_r+0x1bc>
 8007c22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c24:	07d9      	lsls	r1, r3, #31
 8007c26:	d405      	bmi.n	8007c34 <_vfiprintf_r+0x220>
 8007c28:	89ab      	ldrh	r3, [r5, #12]
 8007c2a:	059a      	lsls	r2, r3, #22
 8007c2c:	d402      	bmi.n	8007c34 <_vfiprintf_r+0x220>
 8007c2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c30:	f7ff f9de 	bl	8006ff0 <__retarget_lock_release_recursive>
 8007c34:	89ab      	ldrh	r3, [r5, #12]
 8007c36:	065b      	lsls	r3, r3, #25
 8007c38:	f53f af12 	bmi.w	8007a60 <_vfiprintf_r+0x4c>
 8007c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c3e:	e711      	b.n	8007a64 <_vfiprintf_r+0x50>
 8007c40:	ab03      	add	r3, sp, #12
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	462a      	mov	r2, r5
 8007c46:	4b09      	ldr	r3, [pc, #36]	; (8007c6c <_vfiprintf_r+0x258>)
 8007c48:	a904      	add	r1, sp, #16
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f7fd ff24 	bl	8005a98 <_printf_i>
 8007c50:	e7e4      	b.n	8007c1c <_vfiprintf_r+0x208>
 8007c52:	bf00      	nop
 8007c54:	08008738 	.word	0x08008738
 8007c58:	08008758 	.word	0x08008758
 8007c5c:	08008718 	.word	0x08008718
 8007c60:	080088d4 	.word	0x080088d4
 8007c64:	080088de 	.word	0x080088de
 8007c68:	08005551 	.word	0x08005551
 8007c6c:	080079ef 	.word	0x080079ef
 8007c70:	080088da 	.word	0x080088da

08007c74 <_sbrk_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4d06      	ldr	r5, [pc, #24]	; (8007c90 <_sbrk_r+0x1c>)
 8007c78:	2300      	movs	r3, #0
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	4608      	mov	r0, r1
 8007c7e:	602b      	str	r3, [r5, #0]
 8007c80:	f7fa fcd2 	bl	8002628 <_sbrk>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	d102      	bne.n	8007c8e <_sbrk_r+0x1a>
 8007c88:	682b      	ldr	r3, [r5, #0]
 8007c8a:	b103      	cbz	r3, 8007c8e <_sbrk_r+0x1a>
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	bd38      	pop	{r3, r4, r5, pc}
 8007c90:	200022f8 	.word	0x200022f8

08007c94 <__sread>:
 8007c94:	b510      	push	{r4, lr}
 8007c96:	460c      	mov	r4, r1
 8007c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c9c:	f000 f8e2 	bl	8007e64 <_read_r>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	bfab      	itete	ge
 8007ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ca8:	181b      	addge	r3, r3, r0
 8007caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cae:	bfac      	ite	ge
 8007cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cb2:	81a3      	strhlt	r3, [r4, #12]
 8007cb4:	bd10      	pop	{r4, pc}

08007cb6 <__swrite>:
 8007cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cba:	461f      	mov	r7, r3
 8007cbc:	898b      	ldrh	r3, [r1, #12]
 8007cbe:	05db      	lsls	r3, r3, #23
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	4616      	mov	r6, r2
 8007cc6:	d505      	bpl.n	8007cd4 <__swrite+0x1e>
 8007cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ccc:	2302      	movs	r3, #2
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f000 f898 	bl	8007e04 <_lseek_r>
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cde:	81a3      	strh	r3, [r4, #12]
 8007ce0:	4632      	mov	r2, r6
 8007ce2:	463b      	mov	r3, r7
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cea:	f000 b817 	b.w	8007d1c <_write_r>

08007cee <__sseek>:
 8007cee:	b510      	push	{r4, lr}
 8007cf0:	460c      	mov	r4, r1
 8007cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf6:	f000 f885 	bl	8007e04 <_lseek_r>
 8007cfa:	1c43      	adds	r3, r0, #1
 8007cfc:	89a3      	ldrh	r3, [r4, #12]
 8007cfe:	bf15      	itete	ne
 8007d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d0a:	81a3      	strheq	r3, [r4, #12]
 8007d0c:	bf18      	it	ne
 8007d0e:	81a3      	strhne	r3, [r4, #12]
 8007d10:	bd10      	pop	{r4, pc}

08007d12 <__sclose>:
 8007d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d16:	f000 b831 	b.w	8007d7c <_close_r>
	...

08007d1c <_write_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4d07      	ldr	r5, [pc, #28]	; (8007d3c <_write_r+0x20>)
 8007d20:	4604      	mov	r4, r0
 8007d22:	4608      	mov	r0, r1
 8007d24:	4611      	mov	r1, r2
 8007d26:	2200      	movs	r2, #0
 8007d28:	602a      	str	r2, [r5, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f7fa f9c9 	bl	80020c2 <_write>
 8007d30:	1c43      	adds	r3, r0, #1
 8007d32:	d102      	bne.n	8007d3a <_write_r+0x1e>
 8007d34:	682b      	ldr	r3, [r5, #0]
 8007d36:	b103      	cbz	r3, 8007d3a <_write_r+0x1e>
 8007d38:	6023      	str	r3, [r4, #0]
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	200022f8 	.word	0x200022f8

08007d40 <__assert_func>:
 8007d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d42:	4614      	mov	r4, r2
 8007d44:	461a      	mov	r2, r3
 8007d46:	4b09      	ldr	r3, [pc, #36]	; (8007d6c <__assert_func+0x2c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	68d8      	ldr	r0, [r3, #12]
 8007d4e:	b14c      	cbz	r4, 8007d64 <__assert_func+0x24>
 8007d50:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <__assert_func+0x30>)
 8007d52:	9100      	str	r1, [sp, #0]
 8007d54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d58:	4906      	ldr	r1, [pc, #24]	; (8007d74 <__assert_func+0x34>)
 8007d5a:	462b      	mov	r3, r5
 8007d5c:	f000 f81e 	bl	8007d9c <fiprintf>
 8007d60:	f000 f89f 	bl	8007ea2 <abort>
 8007d64:	4b04      	ldr	r3, [pc, #16]	; (8007d78 <__assert_func+0x38>)
 8007d66:	461c      	mov	r4, r3
 8007d68:	e7f3      	b.n	8007d52 <__assert_func+0x12>
 8007d6a:	bf00      	nop
 8007d6c:	20000018 	.word	0x20000018
 8007d70:	080088e5 	.word	0x080088e5
 8007d74:	080088f2 	.word	0x080088f2
 8007d78:	08008920 	.word	0x08008920

08007d7c <_close_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4d06      	ldr	r5, [pc, #24]	; (8007d98 <_close_r+0x1c>)
 8007d80:	2300      	movs	r3, #0
 8007d82:	4604      	mov	r4, r0
 8007d84:	4608      	mov	r0, r1
 8007d86:	602b      	str	r3, [r5, #0]
 8007d88:	f7fa fc19 	bl	80025be <_close>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d102      	bne.n	8007d96 <_close_r+0x1a>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	b103      	cbz	r3, 8007d96 <_close_r+0x1a>
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	200022f8 	.word	0x200022f8

08007d9c <fiprintf>:
 8007d9c:	b40e      	push	{r1, r2, r3}
 8007d9e:	b503      	push	{r0, r1, lr}
 8007da0:	4601      	mov	r1, r0
 8007da2:	ab03      	add	r3, sp, #12
 8007da4:	4805      	ldr	r0, [pc, #20]	; (8007dbc <fiprintf+0x20>)
 8007da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007daa:	6800      	ldr	r0, [r0, #0]
 8007dac:	9301      	str	r3, [sp, #4]
 8007dae:	f7ff fe31 	bl	8007a14 <_vfiprintf_r>
 8007db2:	b002      	add	sp, #8
 8007db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007db8:	b003      	add	sp, #12
 8007dba:	4770      	bx	lr
 8007dbc:	20000018 	.word	0x20000018

08007dc0 <_fstat_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4d07      	ldr	r5, [pc, #28]	; (8007de0 <_fstat_r+0x20>)
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	4608      	mov	r0, r1
 8007dca:	4611      	mov	r1, r2
 8007dcc:	602b      	str	r3, [r5, #0]
 8007dce:	f7fa fc02 	bl	80025d6 <_fstat>
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	d102      	bne.n	8007ddc <_fstat_r+0x1c>
 8007dd6:	682b      	ldr	r3, [r5, #0]
 8007dd8:	b103      	cbz	r3, 8007ddc <_fstat_r+0x1c>
 8007dda:	6023      	str	r3, [r4, #0]
 8007ddc:	bd38      	pop	{r3, r4, r5, pc}
 8007dde:	bf00      	nop
 8007de0:	200022f8 	.word	0x200022f8

08007de4 <_isatty_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4d06      	ldr	r5, [pc, #24]	; (8007e00 <_isatty_r+0x1c>)
 8007de8:	2300      	movs	r3, #0
 8007dea:	4604      	mov	r4, r0
 8007dec:	4608      	mov	r0, r1
 8007dee:	602b      	str	r3, [r5, #0]
 8007df0:	f7fa fc01 	bl	80025f6 <_isatty>
 8007df4:	1c43      	adds	r3, r0, #1
 8007df6:	d102      	bne.n	8007dfe <_isatty_r+0x1a>
 8007df8:	682b      	ldr	r3, [r5, #0]
 8007dfa:	b103      	cbz	r3, 8007dfe <_isatty_r+0x1a>
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	bd38      	pop	{r3, r4, r5, pc}
 8007e00:	200022f8 	.word	0x200022f8

08007e04 <_lseek_r>:
 8007e04:	b538      	push	{r3, r4, r5, lr}
 8007e06:	4d07      	ldr	r5, [pc, #28]	; (8007e24 <_lseek_r+0x20>)
 8007e08:	4604      	mov	r4, r0
 8007e0a:	4608      	mov	r0, r1
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	2200      	movs	r2, #0
 8007e10:	602a      	str	r2, [r5, #0]
 8007e12:	461a      	mov	r2, r3
 8007e14:	f7fa fbfa 	bl	800260c <_lseek>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d102      	bne.n	8007e22 <_lseek_r+0x1e>
 8007e1c:	682b      	ldr	r3, [r5, #0]
 8007e1e:	b103      	cbz	r3, 8007e22 <_lseek_r+0x1e>
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	200022f8 	.word	0x200022f8

08007e28 <__ascii_mbtowc>:
 8007e28:	b082      	sub	sp, #8
 8007e2a:	b901      	cbnz	r1, 8007e2e <__ascii_mbtowc+0x6>
 8007e2c:	a901      	add	r1, sp, #4
 8007e2e:	b142      	cbz	r2, 8007e42 <__ascii_mbtowc+0x1a>
 8007e30:	b14b      	cbz	r3, 8007e46 <__ascii_mbtowc+0x1e>
 8007e32:	7813      	ldrb	r3, [r2, #0]
 8007e34:	600b      	str	r3, [r1, #0]
 8007e36:	7812      	ldrb	r2, [r2, #0]
 8007e38:	1e10      	subs	r0, r2, #0
 8007e3a:	bf18      	it	ne
 8007e3c:	2001      	movne	r0, #1
 8007e3e:	b002      	add	sp, #8
 8007e40:	4770      	bx	lr
 8007e42:	4610      	mov	r0, r2
 8007e44:	e7fb      	b.n	8007e3e <__ascii_mbtowc+0x16>
 8007e46:	f06f 0001 	mvn.w	r0, #1
 8007e4a:	e7f8      	b.n	8007e3e <__ascii_mbtowc+0x16>

08007e4c <__malloc_lock>:
 8007e4c:	4801      	ldr	r0, [pc, #4]	; (8007e54 <__malloc_lock+0x8>)
 8007e4e:	f7ff b8ce 	b.w	8006fee <__retarget_lock_acquire_recursive>
 8007e52:	bf00      	nop
 8007e54:	200022ec 	.word	0x200022ec

08007e58 <__malloc_unlock>:
 8007e58:	4801      	ldr	r0, [pc, #4]	; (8007e60 <__malloc_unlock+0x8>)
 8007e5a:	f7ff b8c9 	b.w	8006ff0 <__retarget_lock_release_recursive>
 8007e5e:	bf00      	nop
 8007e60:	200022ec 	.word	0x200022ec

08007e64 <_read_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	4d07      	ldr	r5, [pc, #28]	; (8007e84 <_read_r+0x20>)
 8007e68:	4604      	mov	r4, r0
 8007e6a:	4608      	mov	r0, r1
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	2200      	movs	r2, #0
 8007e70:	602a      	str	r2, [r5, #0]
 8007e72:	461a      	mov	r2, r3
 8007e74:	f7fa fb86 	bl	8002584 <_read>
 8007e78:	1c43      	adds	r3, r0, #1
 8007e7a:	d102      	bne.n	8007e82 <_read_r+0x1e>
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	b103      	cbz	r3, 8007e82 <_read_r+0x1e>
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	bd38      	pop	{r3, r4, r5, pc}
 8007e84:	200022f8 	.word	0x200022f8

08007e88 <__ascii_wctomb>:
 8007e88:	b149      	cbz	r1, 8007e9e <__ascii_wctomb+0x16>
 8007e8a:	2aff      	cmp	r2, #255	; 0xff
 8007e8c:	bf85      	ittet	hi
 8007e8e:	238a      	movhi	r3, #138	; 0x8a
 8007e90:	6003      	strhi	r3, [r0, #0]
 8007e92:	700a      	strbls	r2, [r1, #0]
 8007e94:	f04f 30ff 	movhi.w	r0, #4294967295
 8007e98:	bf98      	it	ls
 8007e9a:	2001      	movls	r0, #1
 8007e9c:	4770      	bx	lr
 8007e9e:	4608      	mov	r0, r1
 8007ea0:	4770      	bx	lr

08007ea2 <abort>:
 8007ea2:	b508      	push	{r3, lr}
 8007ea4:	2006      	movs	r0, #6
 8007ea6:	f000 f82b 	bl	8007f00 <raise>
 8007eaa:	2001      	movs	r0, #1
 8007eac:	f7fa fb60 	bl	8002570 <_exit>

08007eb0 <_raise_r>:
 8007eb0:	291f      	cmp	r1, #31
 8007eb2:	b538      	push	{r3, r4, r5, lr}
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	460d      	mov	r5, r1
 8007eb8:	d904      	bls.n	8007ec4 <_raise_r+0x14>
 8007eba:	2316      	movs	r3, #22
 8007ebc:	6003      	str	r3, [r0, #0]
 8007ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec2:	bd38      	pop	{r3, r4, r5, pc}
 8007ec4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ec6:	b112      	cbz	r2, 8007ece <_raise_r+0x1e>
 8007ec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ecc:	b94b      	cbnz	r3, 8007ee2 <_raise_r+0x32>
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f000 f830 	bl	8007f34 <_getpid_r>
 8007ed4:	462a      	mov	r2, r5
 8007ed6:	4601      	mov	r1, r0
 8007ed8:	4620      	mov	r0, r4
 8007eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ede:	f000 b817 	b.w	8007f10 <_kill_r>
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d00a      	beq.n	8007efc <_raise_r+0x4c>
 8007ee6:	1c59      	adds	r1, r3, #1
 8007ee8:	d103      	bne.n	8007ef2 <_raise_r+0x42>
 8007eea:	2316      	movs	r3, #22
 8007eec:	6003      	str	r3, [r0, #0]
 8007eee:	2001      	movs	r0, #1
 8007ef0:	e7e7      	b.n	8007ec2 <_raise_r+0x12>
 8007ef2:	2400      	movs	r4, #0
 8007ef4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ef8:	4628      	mov	r0, r5
 8007efa:	4798      	blx	r3
 8007efc:	2000      	movs	r0, #0
 8007efe:	e7e0      	b.n	8007ec2 <_raise_r+0x12>

08007f00 <raise>:
 8007f00:	4b02      	ldr	r3, [pc, #8]	; (8007f0c <raise+0xc>)
 8007f02:	4601      	mov	r1, r0
 8007f04:	6818      	ldr	r0, [r3, #0]
 8007f06:	f7ff bfd3 	b.w	8007eb0 <_raise_r>
 8007f0a:	bf00      	nop
 8007f0c:	20000018 	.word	0x20000018

08007f10 <_kill_r>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	4d07      	ldr	r5, [pc, #28]	; (8007f30 <_kill_r+0x20>)
 8007f14:	2300      	movs	r3, #0
 8007f16:	4604      	mov	r4, r0
 8007f18:	4608      	mov	r0, r1
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	602b      	str	r3, [r5, #0]
 8007f1e:	f7fa fb17 	bl	8002550 <_kill>
 8007f22:	1c43      	adds	r3, r0, #1
 8007f24:	d102      	bne.n	8007f2c <_kill_r+0x1c>
 8007f26:	682b      	ldr	r3, [r5, #0]
 8007f28:	b103      	cbz	r3, 8007f2c <_kill_r+0x1c>
 8007f2a:	6023      	str	r3, [r4, #0]
 8007f2c:	bd38      	pop	{r3, r4, r5, pc}
 8007f2e:	bf00      	nop
 8007f30:	200022f8 	.word	0x200022f8

08007f34 <_getpid_r>:
 8007f34:	f7fa bb04 	b.w	8002540 <_getpid>

08007f38 <_init>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	bf00      	nop
 8007f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3e:	bc08      	pop	{r3}
 8007f40:	469e      	mov	lr, r3
 8007f42:	4770      	bx	lr

08007f44 <_fini>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	bf00      	nop
 8007f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4a:	bc08      	pop	{r3}
 8007f4c:	469e      	mov	lr, r3
 8007f4e:	4770      	bx	lr
